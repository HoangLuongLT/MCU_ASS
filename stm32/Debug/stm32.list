
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003fa0  08003fa0  00013fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800400c  0800400c  000200f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800400c  0800400c  000200f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800400c  0800400c  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800400c  0800400c  0001400c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004010  08004010  00014010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  08004014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200000f8  0800410c  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  0800410c  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc45  00000000  00000000  00020121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fdb  00000000  00000000  0002bd66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  0002dd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  0002ea60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174fb  00000000  00000000  0002f668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1f4  00000000  00000000  00046b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088c4c  00000000  00000000  00053d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dc9a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003804  00000000  00000000  000dc9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f8 	.word	0x200000f8
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f88 	.word	0x08003f88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000fc 	.word	0x200000fc
 8000148:	08003f88 	.word	0x08003f88

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <subKeyProcess>:

int is3secondPressed[4]={0,0,0,0};

int button_flag[4]={0,0,0,0};

void subKeyProcess(int i){
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	button_flag[i]=1;
 8000164:	4a04      	ldr	r2, [pc, #16]	; (8000178 <subKeyProcess+0x1c>)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2101      	movs	r1, #1
 800016a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800016e:	bf00      	nop
 8000170:	370c      	adds	r7, #12
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000124 	.word	0x20000124

0800017c <isButtonPress>:

int isButtonPress(int i){
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
	if(button_flag[i]==1){
 8000184:	4a09      	ldr	r2, [pc, #36]	; (80001ac <isButtonPress+0x30>)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800018c:	2b01      	cmp	r3, #1
 800018e:	d106      	bne.n	800019e <isButtonPress+0x22>
		button_flag[i]=0;
 8000190:	4a06      	ldr	r2, [pc, #24]	; (80001ac <isButtonPress+0x30>)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2100      	movs	r1, #0
 8000196:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800019a:	2301      	movs	r3, #1
 800019c:	e000      	b.n	80001a0 <isButtonPress+0x24>
	}
	return 0;
 800019e:	2300      	movs	r3, #0
}
 80001a0:	4618      	mov	r0, r3
 80001a2:	370c      	adds	r7, #12
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	20000124 	.word	0x20000124

080001b0 <getKeyInput>:

void getKeyInput(){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0

	for(int i=0;i<4;i++){
 80001b6:	2300      	movs	r3, #0
 80001b8:	607b      	str	r3, [r7, #4]
 80001ba:	e0ae      	b.n	800031a <getKeyInput+0x16a>
		keyReg0[i] = keyReg1[i];
 80001bc:	4a5b      	ldr	r2, [pc, #364]	; (800032c <getKeyInput+0x17c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	495a      	ldr	r1, [pc, #360]	; (8000330 <getKeyInput+0x180>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 80001cc:	4a59      	ldr	r2, [pc, #356]	; (8000334 <getKeyInput+0x184>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	4955      	ldr	r1, [pc, #340]	; (800032c <getKeyInput+0x17c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2b03      	cmp	r3, #3
 80001e0:	d836      	bhi.n	8000250 <getKeyInput+0xa0>
 80001e2:	a201      	add	r2, pc, #4	; (adr r2, 80001e8 <getKeyInput+0x38>)
 80001e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001e8:	080001f9 	.word	0x080001f9
 80001ec:	0800020f 	.word	0x0800020f
 80001f0:	08000225 	.word	0x08000225
 80001f4:	0800023b 	.word	0x0800023b
		switch (i) {
			case 0:
				keyReg2[i] = HAL_GPIO_ReadPin(Button_1_GPIO_Port,Button_1_Pin);
 80001f8:	2102      	movs	r1, #2
 80001fa:	484f      	ldr	r0, [pc, #316]	; (8000338 <getKeyInput+0x188>)
 80001fc:	f001 fcbe 	bl	8001b7c <HAL_GPIO_ReadPin>
 8000200:	4603      	mov	r3, r0
 8000202:	4619      	mov	r1, r3
 8000204:	4a4b      	ldr	r2, [pc, #300]	; (8000334 <getKeyInput+0x184>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800020c:	e021      	b.n	8000252 <getKeyInput+0xa2>
			case 1:
				keyReg2[i] = HAL_GPIO_ReadPin(Button_2_GPIO_Port,Button_2_Pin);
 800020e:	2110      	movs	r1, #16
 8000210:	4849      	ldr	r0, [pc, #292]	; (8000338 <getKeyInput+0x188>)
 8000212:	f001 fcb3 	bl	8001b7c <HAL_GPIO_ReadPin>
 8000216:	4603      	mov	r3, r0
 8000218:	4619      	mov	r1, r3
 800021a:	4a46      	ldr	r2, [pc, #280]	; (8000334 <getKeyInput+0x184>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000222:	e016      	b.n	8000252 <getKeyInput+0xa2>
			case 2:
				keyReg2[i] = HAL_GPIO_ReadPin(Button_3_GPIO_Port,Button_3_Pin);
 8000224:	2101      	movs	r1, #1
 8000226:	4845      	ldr	r0, [pc, #276]	; (800033c <getKeyInput+0x18c>)
 8000228:	f001 fca8 	bl	8001b7c <HAL_GPIO_ReadPin>
 800022c:	4603      	mov	r3, r0
 800022e:	4619      	mov	r1, r3
 8000230:	4a40      	ldr	r2, [pc, #256]	; (8000334 <getKeyInput+0x184>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000238:	e00b      	b.n	8000252 <getKeyInput+0xa2>
			case 3:
				keyReg2[i] = HAL_GPIO_ReadPin(Button_P_GPIO_Port,Button_P_Pin);
 800023a:	2101      	movs	r1, #1
 800023c:	483e      	ldr	r0, [pc, #248]	; (8000338 <getKeyInput+0x188>)
 800023e:	f001 fc9d 	bl	8001b7c <HAL_GPIO_ReadPin>
 8000242:	4603      	mov	r3, r0
 8000244:	4619      	mov	r1, r3
 8000246:	4a3b      	ldr	r2, [pc, #236]	; (8000334 <getKeyInput+0x184>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800024e:	e000      	b.n	8000252 <getKeyInput+0xa2>
			default:
				break;
 8000250:	bf00      	nop
		}
		//Stability Signal
		if((keyReg0[i]==keyReg1[i])&&(keyReg1[i]==keyReg2[i])){
 8000252:	4a37      	ldr	r2, [pc, #220]	; (8000330 <getKeyInput+0x180>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025a:	4934      	ldr	r1, [pc, #208]	; (800032c <getKeyInput+0x17c>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000262:	429a      	cmp	r2, r3
 8000264:	d156      	bne.n	8000314 <getKeyInput+0x164>
 8000266:	4a31      	ldr	r2, [pc, #196]	; (800032c <getKeyInput+0x17c>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800026e:	4931      	ldr	r1, [pc, #196]	; (8000334 <getKeyInput+0x184>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000276:	429a      	cmp	r2, r3
 8000278:	d14c      	bne.n	8000314 <getKeyInput+0x164>
			//When signal change
			if(keyReg2[i]!=keyReg3[i]){
 800027a:	4a2e      	ldr	r2, [pc, #184]	; (8000334 <getKeyInput+0x184>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000282:	492f      	ldr	r1, [pc, #188]	; (8000340 <getKeyInput+0x190>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800028a:	429a      	cmp	r2, r3
 800028c:	d029      	beq.n	80002e2 <getKeyInput+0x132>
				keyReg3[i]=keyReg2[i];//save signal
 800028e:	4a29      	ldr	r2, [pc, #164]	; (8000334 <getKeyInput+0x184>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000296:	492a      	ldr	r1, [pc, #168]	; (8000340 <getKeyInput+0x190>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(keyReg2[i]==PRESSED_STATE){
 800029e:	4a25      	ldr	r2, [pc, #148]	; (8000334 <getKeyInput+0x184>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d115      	bne.n	80002d6 <getKeyInput+0x126>
					//1->0
					if(!is3secondPressed[i]){
 80002aa:	4a26      	ldr	r2, [pc, #152]	; (8000344 <getKeyInput+0x194>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d106      	bne.n	80002c4 <getKeyInput+0x114>
						//Fist press
						timerForKey[i]=300;
 80002b6:	4a24      	ldr	r2, [pc, #144]	; (8000348 <getKeyInput+0x198>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002c2:	e004      	b.n	80002ce <getKeyInput+0x11e>
					}
					else{
						//Next press
						timerForKey[i]=100;
 80002c4:	4a20      	ldr	r2, [pc, #128]	; (8000348 <getKeyInput+0x198>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2164      	movs	r1, #100	; 0x64
 80002ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					//TODO
					//Turn on button flag
					subKeyProcess(i);
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f7ff ff44 	bl	800015c <subKeyProcess>
 80002d4:	e01e      	b.n	8000314 <getKeyInput+0x164>

				}
				else{
					//0->1
					is3secondPressed[i]=0;
 80002d6:	4a1b      	ldr	r2, [pc, #108]	; (8000344 <getKeyInput+0x194>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2100      	movs	r1, #0
 80002dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002e0:	e018      	b.n	8000314 <getKeyInput+0x164>
				}
			}
			//When signal doesn't change
			else{
				timerForKey[i]--;
 80002e2:	4a19      	ldr	r2, [pc, #100]	; (8000348 <getKeyInput+0x198>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ea:	1e5a      	subs	r2, r3, #1
 80002ec:	4916      	ldr	r1, [pc, #88]	; (8000348 <getKeyInput+0x198>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(timerForKey[i]==0){
 80002f4:	4a14      	ldr	r2, [pc, #80]	; (8000348 <getKeyInput+0x198>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d109      	bne.n	8000314 <getKeyInput+0x164>
					//Next cycle in press
					keyReg3[i]=NORMAL_STATE;
 8000300:	4a0f      	ldr	r2, [pc, #60]	; (8000340 <getKeyInput+0x190>)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2101      	movs	r1, #1
 8000306:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					is3secondPressed[i]=1;
 800030a:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <getKeyInput+0x194>)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2101      	movs	r1, #1
 8000310:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<4;i++){
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	3301      	adds	r3, #1
 8000318:	607b      	str	r3, [r7, #4]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2b03      	cmp	r3, #3
 800031e:	f77f af4d 	ble.w	80001bc <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000322:	bf00      	nop
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000010 	.word	0x20000010
 8000330:	20000000 	.word	0x20000000
 8000334:	20000020 	.word	0x20000020
 8000338:	40010800 	.word	0x40010800
 800033c:	40010c00 	.word	0x40010c00
 8000340:	20000030 	.word	0x20000030
 8000344:	20000114 	.word	0x20000114
 8000348:	20000040 	.word	0x20000040

0800034c <fsm_auto_processing>:
#include "output_display.h"
#include "software_timer.h"
#include "button.h"
#include "main.h"

void fsm_auto_processing(){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	switch (status) {
 8000350:	4ba1      	ldr	r3, [pc, #644]	; (80005d8 <fsm_auto_processing+0x28c>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	3b01      	subs	r3, #1
 8000356:	2b03      	cmp	r3, #3
 8000358:	f200 8133 	bhi.w	80005c2 <fsm_auto_processing+0x276>
 800035c:	a201      	add	r2, pc, #4	; (adr r2, 8000364 <fsm_auto_processing+0x18>)
 800035e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000362:	bf00      	nop
 8000364:	08000375 	.word	0x08000375
 8000368:	08000405 	.word	0x08000405
 800036c:	08000495 	.word	0x08000495
 8000370:	0800052b 	.word	0x0800052b
		case AUTO_RED_GREEN:
			//auto
			if(timer0_flag==1){
 8000374:	4b99      	ldr	r3, [pc, #612]	; (80005dc <fsm_auto_processing+0x290>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2b01      	cmp	r3, #1
 800037a:	d11e      	bne.n	80003ba <fsm_auto_processing+0x6e>
				setTimer0(1000);
 800037c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000380:	f000 feae 	bl	80010e0 <setTimer0>

				printNumber=redDuration-numberCounter;
 8000384:	4b96      	ldr	r3, [pc, #600]	; (80005e0 <fsm_auto_processing+0x294>)
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	4b96      	ldr	r3, [pc, #600]	; (80005e4 <fsm_auto_processing+0x298>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	1ad3      	subs	r3, r2, r3
 800038e:	4a96      	ldr	r2, [pc, #600]	; (80005e8 <fsm_auto_processing+0x29c>)
 8000390:	6013      	str	r3, [r2, #0]
				UART_Print();
 8000392:	f000 fae1 	bl	8000958 <UART_Print>


				if(++numberCounter == greenDuration){
 8000396:	4b93      	ldr	r3, [pc, #588]	; (80005e4 <fsm_auto_processing+0x298>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	3301      	adds	r3, #1
 800039c:	4a91      	ldr	r2, [pc, #580]	; (80005e4 <fsm_auto_processing+0x298>)
 800039e:	6013      	str	r3, [r2, #0]
 80003a0:	4b90      	ldr	r3, [pc, #576]	; (80005e4 <fsm_auto_processing+0x298>)
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	4b91      	ldr	r3, [pc, #580]	; (80005ec <fsm_auto_processing+0x2a0>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d102      	bne.n	80003b2 <fsm_auto_processing+0x66>
					status=	AUTO_RED_YELLOW;
 80003ac:	4b8a      	ldr	r3, [pc, #552]	; (80005d8 <fsm_auto_processing+0x28c>)
 80003ae:	2202      	movs	r2, #2
 80003b0:	601a      	str	r2, [r3, #0]
				}

//				turnOffAll();
//				turnOnOnlyRed(0);//ROAD 0
//				turnOnOnlyGreen(1);//ROAD 1
				turnOnRed1();
 80003b2:	f000 fd65 	bl	8000e80 <turnOnRed1>
				turnOnGreen2();
 80003b6:	f000 fdc3 	bl	8000f40 <turnOnGreen2>
			}
			//button 1
			if(isButtonPress(0)){
 80003ba:	2000      	movs	r0, #0
 80003bc:	f7ff fede 	bl	800017c <isButtonPress>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d00a      	beq.n	80003dc <fsm_auto_processing+0x90>
				status = MAN_RED;
 80003c6:	4b84      	ldr	r3, [pc, #528]	; (80005d8 <fsm_auto_processing+0x28c>)
 80003c8:	220c      	movs	r2, #12
 80003ca:	601a      	str	r2, [r3, #0]
				timer0_flag=1;//Reuse next status
 80003cc:	4b83      	ldr	r3, [pc, #524]	; (80005dc <fsm_auto_processing+0x290>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	601a      	str	r2, [r3, #0]
				setTimer1(timeOutMan);//Timeout 5s
 80003d2:	4b87      	ldr	r3, [pc, #540]	; (80005f0 <fsm_auto_processing+0x2a4>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 fe9c 	bl	8001114 <setTimer1>
			}
			//button 4
			if(isButtonPress(3)){
 80003dc:	2003      	movs	r0, #3
 80003de:	f7ff fecd 	bl	800017c <isButtonPress>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	f000 80ee 	beq.w	80005c6 <fsm_auto_processing+0x27a>
				status_ped=PED_GO;
 80003ea:	4b82      	ldr	r3, [pc, #520]	; (80005f4 <fsm_auto_processing+0x2a8>)
 80003ec:	2216      	movs	r2, #22
 80003ee:	601a      	str	r2, [r3, #0]
				setTimer1(4*redDuration*1000);//2 cycle
 80003f0:	4b7b      	ldr	r3, [pc, #492]	; (80005e0 <fsm_auto_processing+0x294>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80003f8:	fb02 f303 	mul.w	r3, r2, r3
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 fe89 	bl	8001114 <setTimer1>
			}
			break;
 8000402:	e0e0      	b.n	80005c6 <fsm_auto_processing+0x27a>
		case AUTO_RED_YELLOW:
			if(timer0_flag==1){
 8000404:	4b75      	ldr	r3, [pc, #468]	; (80005dc <fsm_auto_processing+0x290>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2b01      	cmp	r3, #1
 800040a:	d11e      	bne.n	800044a <fsm_auto_processing+0xfe>
				setTimer0(1000);
 800040c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000410:	f000 fe66 	bl	80010e0 <setTimer0>

				printNumber=redDuration-numberCounter;
 8000414:	4b72      	ldr	r3, [pc, #456]	; (80005e0 <fsm_auto_processing+0x294>)
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	4b72      	ldr	r3, [pc, #456]	; (80005e4 <fsm_auto_processing+0x298>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	1ad3      	subs	r3, r2, r3
 800041e:	4a72      	ldr	r2, [pc, #456]	; (80005e8 <fsm_auto_processing+0x29c>)
 8000420:	6013      	str	r3, [r2, #0]
				UART_Print();
 8000422:	f000 fa99 	bl	8000958 <UART_Print>

				if(++numberCounter == redDuration){
 8000426:	4b6f      	ldr	r3, [pc, #444]	; (80005e4 <fsm_auto_processing+0x298>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	3301      	adds	r3, #1
 800042c:	4a6d      	ldr	r2, [pc, #436]	; (80005e4 <fsm_auto_processing+0x298>)
 800042e:	6013      	str	r3, [r2, #0]
 8000430:	4b6c      	ldr	r3, [pc, #432]	; (80005e4 <fsm_auto_processing+0x298>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	4b6a      	ldr	r3, [pc, #424]	; (80005e0 <fsm_auto_processing+0x294>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	429a      	cmp	r2, r3
 800043a:	d102      	bne.n	8000442 <fsm_auto_processing+0xf6>
					status=	AUTO_GREEN_RED;
 800043c:	4b66      	ldr	r3, [pc, #408]	; (80005d8 <fsm_auto_processing+0x28c>)
 800043e:	2203      	movs	r2, #3
 8000440:	601a      	str	r2, [r3, #0]
				}

//				turnOffAll();
//				turnOnOnlyRed(0);
//				turnOnOnlyYellow(1);
				turnOnRed1();
 8000442:	f000 fd1d 	bl	8000e80 <turnOnRed1>
				turnOnYellow2();
 8000446:	f000 fd8b 	bl	8000f60 <turnOnYellow2>
			}
			//button 1
			if(isButtonPress(0)){
 800044a:	2000      	movs	r0, #0
 800044c:	f7ff fe96 	bl	800017c <isButtonPress>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d00a      	beq.n	800046c <fsm_auto_processing+0x120>
				status = MAN_RED;
 8000456:	4b60      	ldr	r3, [pc, #384]	; (80005d8 <fsm_auto_processing+0x28c>)
 8000458:	220c      	movs	r2, #12
 800045a:	601a      	str	r2, [r3, #0]
				timer0_flag=1;//Reuse next status
 800045c:	4b5f      	ldr	r3, [pc, #380]	; (80005dc <fsm_auto_processing+0x290>)
 800045e:	2201      	movs	r2, #1
 8000460:	601a      	str	r2, [r3, #0]
				setTimer1(timeOutMan);//Timeout 5s
 8000462:	4b63      	ldr	r3, [pc, #396]	; (80005f0 <fsm_auto_processing+0x2a4>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4618      	mov	r0, r3
 8000468:	f000 fe54 	bl	8001114 <setTimer1>
			}
			//button 4
			if(isButtonPress(3)){
 800046c:	2003      	movs	r0, #3
 800046e:	f7ff fe85 	bl	800017c <isButtonPress>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	f000 80a8 	beq.w	80005ca <fsm_auto_processing+0x27e>
				status_ped=PED_GO;
 800047a:	4b5e      	ldr	r3, [pc, #376]	; (80005f4 <fsm_auto_processing+0x2a8>)
 800047c:	2216      	movs	r2, #22
 800047e:	601a      	str	r2, [r3, #0]
				setTimer1(4*redDuration*1000);//2 cycle
 8000480:	4b57      	ldr	r3, [pc, #348]	; (80005e0 <fsm_auto_processing+0x294>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000488:	fb02 f303 	mul.w	r3, r2, r3
 800048c:	4618      	mov	r0, r3
 800048e:	f000 fe41 	bl	8001114 <setTimer1>
			}
			break;
 8000492:	e09a      	b.n	80005ca <fsm_auto_processing+0x27e>
		case AUTO_GREEN_RED:
			if(timer0_flag==1){
 8000494:	4b51      	ldr	r3, [pc, #324]	; (80005dc <fsm_auto_processing+0x290>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d122      	bne.n	80004e2 <fsm_auto_processing+0x196>
				setTimer0(1000);
 800049c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004a0:	f000 fe1e 	bl	80010e0 <setTimer0>

				printNumber=2*redDuration-numberCounter;
 80004a4:	4b4e      	ldr	r3, [pc, #312]	; (80005e0 <fsm_auto_processing+0x294>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	005a      	lsls	r2, r3, #1
 80004aa:	4b4e      	ldr	r3, [pc, #312]	; (80005e4 <fsm_auto_processing+0x298>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	1ad3      	subs	r3, r2, r3
 80004b0:	4a4d      	ldr	r2, [pc, #308]	; (80005e8 <fsm_auto_processing+0x29c>)
 80004b2:	6013      	str	r3, [r2, #0]
				UART_Print();
 80004b4:	f000 fa50 	bl	8000958 <UART_Print>

				if(++numberCounter == (redDuration+greenDuration)){
 80004b8:	4b4a      	ldr	r3, [pc, #296]	; (80005e4 <fsm_auto_processing+0x298>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	3301      	adds	r3, #1
 80004be:	4a49      	ldr	r2, [pc, #292]	; (80005e4 <fsm_auto_processing+0x298>)
 80004c0:	6013      	str	r3, [r2, #0]
 80004c2:	4b48      	ldr	r3, [pc, #288]	; (80005e4 <fsm_auto_processing+0x298>)
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	4b46      	ldr	r3, [pc, #280]	; (80005e0 <fsm_auto_processing+0x294>)
 80004c8:	6819      	ldr	r1, [r3, #0]
 80004ca:	4b48      	ldr	r3, [pc, #288]	; (80005ec <fsm_auto_processing+0x2a0>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	440b      	add	r3, r1
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d102      	bne.n	80004da <fsm_auto_processing+0x18e>
					status=	AUTO_YELLOW_RED;
 80004d4:	4b40      	ldr	r3, [pc, #256]	; (80005d8 <fsm_auto_processing+0x28c>)
 80004d6:	2204      	movs	r2, #4
 80004d8:	601a      	str	r2, [r3, #0]
				}

//				turnOffAll();
//				turnOnOnlyGreen(0);
//				turnOnOnlyRed(1);
				turnOnGreen1();
 80004da:	f000 fce5 	bl	8000ea8 <turnOnGreen1>
				turnOnRed2();
 80004de:	f000 fd1f 	bl	8000f20 <turnOnRed2>
			}
			//button 1
			if(isButtonPress(0)){
 80004e2:	2000      	movs	r0, #0
 80004e4:	f7ff fe4a 	bl	800017c <isButtonPress>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d00a      	beq.n	8000504 <fsm_auto_processing+0x1b8>
				status = MAN_RED;
 80004ee:	4b3a      	ldr	r3, [pc, #232]	; (80005d8 <fsm_auto_processing+0x28c>)
 80004f0:	220c      	movs	r2, #12
 80004f2:	601a      	str	r2, [r3, #0]
				timer0_flag=1;//Reuse next status
 80004f4:	4b39      	ldr	r3, [pc, #228]	; (80005dc <fsm_auto_processing+0x290>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	601a      	str	r2, [r3, #0]
				setTimer1(timeOutMan);//Timeout 5s
 80004fa:	4b3d      	ldr	r3, [pc, #244]	; (80005f0 <fsm_auto_processing+0x2a4>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fe08 	bl	8001114 <setTimer1>
			}
			//button 4
			if(isButtonPress(3)){
 8000504:	2003      	movs	r0, #3
 8000506:	f7ff fe39 	bl	800017c <isButtonPress>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d05e      	beq.n	80005ce <fsm_auto_processing+0x282>
				status_ped=PED_STOP;
 8000510:	4b38      	ldr	r3, [pc, #224]	; (80005f4 <fsm_auto_processing+0x2a8>)
 8000512:	2215      	movs	r2, #21
 8000514:	601a      	str	r2, [r3, #0]
				setTimer1(4*redDuration*1000);//2 cycle
 8000516:	4b32      	ldr	r3, [pc, #200]	; (80005e0 <fsm_auto_processing+0x294>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800051e:	fb02 f303 	mul.w	r3, r2, r3
 8000522:	4618      	mov	r0, r3
 8000524:	f000 fdf6 	bl	8001114 <setTimer1>
			}
			break;
 8000528:	e051      	b.n	80005ce <fsm_auto_processing+0x282>
		case AUTO_YELLOW_RED:
			if(timer0_flag==1){
 800052a:	4b2c      	ldr	r3, [pc, #176]	; (80005dc <fsm_auto_processing+0x290>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b01      	cmp	r3, #1
 8000530:	d123      	bne.n	800057a <fsm_auto_processing+0x22e>
				setTimer0(1000);
 8000532:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000536:	f000 fdd3 	bl	80010e0 <setTimer0>

				printNumber=2*redDuration-numberCounter;
 800053a:	4b29      	ldr	r3, [pc, #164]	; (80005e0 <fsm_auto_processing+0x294>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	005a      	lsls	r2, r3, #1
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <fsm_auto_processing+0x298>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	4a28      	ldr	r2, [pc, #160]	; (80005e8 <fsm_auto_processing+0x29c>)
 8000548:	6013      	str	r3, [r2, #0]
				UART_Print();
 800054a:	f000 fa05 	bl	8000958 <UART_Print>

				if(++numberCounter == (2*redDuration)){
 800054e:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <fsm_auto_processing+0x298>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	3301      	adds	r3, #1
 8000554:	4a23      	ldr	r2, [pc, #140]	; (80005e4 <fsm_auto_processing+0x298>)
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <fsm_auto_processing+0x298>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <fsm_auto_processing+0x294>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	429a      	cmp	r2, r3
 8000564:	d105      	bne.n	8000572 <fsm_auto_processing+0x226>
					status=	AUTO_RED_GREEN;
 8000566:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <fsm_auto_processing+0x28c>)
 8000568:	2201      	movs	r2, #1
 800056a:	601a      	str	r2, [r3, #0]
					numberCounter=0;
 800056c:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <fsm_auto_processing+0x298>)
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
				}

//				turnOffAll();
//				turnOnOnlyYellow(0);
//				turnOnOnlyRed(1);
				turnOnYellow1();
 8000572:	f000 fcad 	bl	8000ed0 <turnOnYellow1>
				turnOnRed2();
 8000576:	f000 fcd3 	bl	8000f20 <turnOnRed2>
			}
			//button 1
			if(isButtonPress(0)){
 800057a:	2000      	movs	r0, #0
 800057c:	f7ff fdfe 	bl	800017c <isButtonPress>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d00a      	beq.n	800059c <fsm_auto_processing+0x250>
				status = MAN_RED;
 8000586:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <fsm_auto_processing+0x28c>)
 8000588:	220c      	movs	r2, #12
 800058a:	601a      	str	r2, [r3, #0]
				timer0_flag=1;//Reuse next status
 800058c:	4b13      	ldr	r3, [pc, #76]	; (80005dc <fsm_auto_processing+0x290>)
 800058e:	2201      	movs	r2, #1
 8000590:	601a      	str	r2, [r3, #0]
				setTimer1(timeOutMan);//Timeout 5s
 8000592:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <fsm_auto_processing+0x2a4>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fdbc 	bl	8001114 <setTimer1>
			}
			//button 4
			if(isButtonPress(3)){
 800059c:	2003      	movs	r0, #3
 800059e:	f7ff fded 	bl	800017c <isButtonPress>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d014      	beq.n	80005d2 <fsm_auto_processing+0x286>
				status_ped=PED_STOP;
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <fsm_auto_processing+0x2a8>)
 80005aa:	2215      	movs	r2, #21
 80005ac:	601a      	str	r2, [r3, #0]
				setTimer1(4*redDuration*1000);//2 cycle
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <fsm_auto_processing+0x294>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80005b6:	fb02 f303 	mul.w	r3, r2, r3
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 fdaa 	bl	8001114 <setTimer1>
			}
			break;
 80005c0:	e007      	b.n	80005d2 <fsm_auto_processing+0x286>
		default:
			break;
 80005c2:	bf00      	nop
 80005c4:	e006      	b.n	80005d4 <fsm_auto_processing+0x288>
			break;
 80005c6:	bf00      	nop
 80005c8:	e004      	b.n	80005d4 <fsm_auto_processing+0x288>
			break;
 80005ca:	bf00      	nop
 80005cc:	e002      	b.n	80005d4 <fsm_auto_processing+0x288>
			break;
 80005ce:	bf00      	nop
 80005d0:	e000      	b.n	80005d4 <fsm_auto_processing+0x288>
			break;
 80005d2:	bf00      	nop
	}
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2000005c 	.word	0x2000005c
 80005dc:	2000013c 	.word	0x2000013c
 80005e0:	20000068 	.word	0x20000068
 80005e4:	20000138 	.word	0x20000138
 80005e8:	20000074 	.word	0x20000074
 80005ec:	2000006c 	.word	0x2000006c
 80005f0:	20000058 	.word	0x20000058
 80005f4:	20000060 	.word	0x20000060

080005f8 <fsm_manual_processing>:
#include "software_timer.h"
#include "button.h"

int timeOut = 10000;

void fsm_manual_processing(){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	switch (status) {
 80005fc:	4b8b      	ldr	r3, [pc, #556]	; (800082c <fsm_manual_processing+0x234>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b0e      	cmp	r3, #14
 8000602:	f000 80b3 	beq.w	800076c <fsm_manual_processing+0x174>
 8000606:	2b0e      	cmp	r3, #14
 8000608:	f300 8106 	bgt.w	8000818 <fsm_manual_processing+0x220>
 800060c:	2b0c      	cmp	r3, #12
 800060e:	d002      	beq.n	8000616 <fsm_manual_processing+0x1e>
 8000610:	2b0d      	cmp	r3, #13
 8000612:	d056      	beq.n	80006c2 <fsm_manual_processing+0xca>
//				blinkAllYellowLed();
				blinkAllYellow();
			}
			break;
		default:
			break;
 8000614:	e100      	b.n	8000818 <fsm_manual_processing+0x220>
			if(isButtonPress(0)){
 8000616:	2000      	movs	r0, #0
 8000618:	f7ff fdb0 	bl	800017c <isButtonPress>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d00a      	beq.n	8000638 <fsm_manual_processing+0x40>
				setTimer1(timeOut);
 8000622:	4b83      	ldr	r3, [pc, #524]	; (8000830 <fsm_manual_processing+0x238>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fd74 	bl	8001114 <setTimer1>
				status = MAN_GREEN;
 800062c:	4b7f      	ldr	r3, [pc, #508]	; (800082c <fsm_manual_processing+0x234>)
 800062e:	220d      	movs	r2, #13
 8000630:	601a      	str	r2, [r3, #0]
				timer0_flag=1;
 8000632:	4b80      	ldr	r3, [pc, #512]	; (8000834 <fsm_manual_processing+0x23c>)
 8000634:	2201      	movs	r2, #1
 8000636:	601a      	str	r2, [r3, #0]
			if(isButtonPress(1)){
 8000638:	2001      	movs	r0, #1
 800063a:	f7ff fd9f 	bl	800017c <isButtonPress>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d00f      	beq.n	8000664 <fsm_manual_processing+0x6c>
				setTimer1(timeOut);
 8000644:	4b7a      	ldr	r3, [pc, #488]	; (8000830 <fsm_manual_processing+0x238>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fd63 	bl	8001114 <setTimer1>
				redDuration++;
 800064e:	4b7a      	ldr	r3, [pc, #488]	; (8000838 <fsm_manual_processing+0x240>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	3301      	adds	r3, #1
 8000654:	4a78      	ldr	r2, [pc, #480]	; (8000838 <fsm_manual_processing+0x240>)
 8000656:	6013      	str	r3, [r2, #0]
				printNumber=redDuration;
 8000658:	4b77      	ldr	r3, [pc, #476]	; (8000838 <fsm_manual_processing+0x240>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a77      	ldr	r2, [pc, #476]	; (800083c <fsm_manual_processing+0x244>)
 800065e:	6013      	str	r3, [r2, #0]
				UART_Print();
 8000660:	f000 f97a 	bl	8000958 <UART_Print>
			if(isButtonPress(2)){
 8000664:	2002      	movs	r0, #2
 8000666:	f7ff fd89 	bl	800017c <isButtonPress>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d00f      	beq.n	8000690 <fsm_manual_processing+0x98>
				setTimer1(timeOut);
 8000670:	4b6f      	ldr	r3, [pc, #444]	; (8000830 <fsm_manual_processing+0x238>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fd4d 	bl	8001114 <setTimer1>
				redDuration--;
 800067a:	4b6f      	ldr	r3, [pc, #444]	; (8000838 <fsm_manual_processing+0x240>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	3b01      	subs	r3, #1
 8000680:	4a6d      	ldr	r2, [pc, #436]	; (8000838 <fsm_manual_processing+0x240>)
 8000682:	6013      	str	r3, [r2, #0]
				printNumber=redDuration;
 8000684:	4b6c      	ldr	r3, [pc, #432]	; (8000838 <fsm_manual_processing+0x240>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a6c      	ldr	r2, [pc, #432]	; (800083c <fsm_manual_processing+0x244>)
 800068a:	6013      	str	r3, [r2, #0]
				UART_Print();
 800068c:	f000 f964 	bl	8000958 <UART_Print>
			if(timer1_flag==1){
 8000690:	4b6b      	ldr	r3, [pc, #428]	; (8000840 <fsm_manual_processing+0x248>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d108      	bne.n	80006aa <fsm_manual_processing+0xb2>
				status = AUTO_RED_GREEN;
 8000698:	4b64      	ldr	r3, [pc, #400]	; (800082c <fsm_manual_processing+0x234>)
 800069a:	2201      	movs	r2, #1
 800069c:	601a      	str	r2, [r3, #0]
				numberCounter=0;
 800069e:	4b69      	ldr	r3, [pc, #420]	; (8000844 <fsm_manual_processing+0x24c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
				timer0_flag=1;
 80006a4:	4b63      	ldr	r3, [pc, #396]	; (8000834 <fsm_manual_processing+0x23c>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	601a      	str	r2, [r3, #0]
			if(timer0_flag==1){
 80006aa:	4b62      	ldr	r3, [pc, #392]	; (8000834 <fsm_manual_processing+0x23c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	f040 80b4 	bne.w	800081c <fsm_manual_processing+0x224>
				setTimer0(500);
 80006b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006b8:	f000 fd12 	bl	80010e0 <setTimer0>
				blinkAllRed();
 80006bc:	f000 fc70 	bl	8000fa0 <blinkAllRed>
			break;
 80006c0:	e0ac      	b.n	800081c <fsm_manual_processing+0x224>
			if(isButtonPress(0)){
 80006c2:	2000      	movs	r0, #0
 80006c4:	f7ff fd5a 	bl	800017c <isButtonPress>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d00a      	beq.n	80006e4 <fsm_manual_processing+0xec>
				setTimer1(timeOut);
 80006ce:	4b58      	ldr	r3, [pc, #352]	; (8000830 <fsm_manual_processing+0x238>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fd1e 	bl	8001114 <setTimer1>
				status = MAN_YELLOW;
 80006d8:	4b54      	ldr	r3, [pc, #336]	; (800082c <fsm_manual_processing+0x234>)
 80006da:	220e      	movs	r2, #14
 80006dc:	601a      	str	r2, [r3, #0]
				timer0_flag=1;
 80006de:	4b55      	ldr	r3, [pc, #340]	; (8000834 <fsm_manual_processing+0x23c>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	601a      	str	r2, [r3, #0]
			if(isButtonPress(1)){
 80006e4:	2001      	movs	r0, #1
 80006e6:	f7ff fd49 	bl	800017c <isButtonPress>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d00f      	beq.n	8000710 <fsm_manual_processing+0x118>
				setTimer1(timeOut);
 80006f0:	4b4f      	ldr	r3, [pc, #316]	; (8000830 <fsm_manual_processing+0x238>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fd0d 	bl	8001114 <setTimer1>
				greenDuration++;
 80006fa:	4b53      	ldr	r3, [pc, #332]	; (8000848 <fsm_manual_processing+0x250>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	3301      	adds	r3, #1
 8000700:	4a51      	ldr	r2, [pc, #324]	; (8000848 <fsm_manual_processing+0x250>)
 8000702:	6013      	str	r3, [r2, #0]
				printNumber=greenDuration;
 8000704:	4b50      	ldr	r3, [pc, #320]	; (8000848 <fsm_manual_processing+0x250>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a4c      	ldr	r2, [pc, #304]	; (800083c <fsm_manual_processing+0x244>)
 800070a:	6013      	str	r3, [r2, #0]
				UART_Print();
 800070c:	f000 f924 	bl	8000958 <UART_Print>
			if(isButtonPress(2)){
 8000710:	2002      	movs	r0, #2
 8000712:	f7ff fd33 	bl	800017c <isButtonPress>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d00f      	beq.n	800073c <fsm_manual_processing+0x144>
				setTimer1(timeOut);
 800071c:	4b44      	ldr	r3, [pc, #272]	; (8000830 <fsm_manual_processing+0x238>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4618      	mov	r0, r3
 8000722:	f000 fcf7 	bl	8001114 <setTimer1>
				greenDuration--;
 8000726:	4b48      	ldr	r3, [pc, #288]	; (8000848 <fsm_manual_processing+0x250>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	3b01      	subs	r3, #1
 800072c:	4a46      	ldr	r2, [pc, #280]	; (8000848 <fsm_manual_processing+0x250>)
 800072e:	6013      	str	r3, [r2, #0]
				printNumber=greenDuration;
 8000730:	4b45      	ldr	r3, [pc, #276]	; (8000848 <fsm_manual_processing+0x250>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a41      	ldr	r2, [pc, #260]	; (800083c <fsm_manual_processing+0x244>)
 8000736:	6013      	str	r3, [r2, #0]
				UART_Print();
 8000738:	f000 f90e 	bl	8000958 <UART_Print>
			if(timer1_flag==1){
 800073c:	4b40      	ldr	r3, [pc, #256]	; (8000840 <fsm_manual_processing+0x248>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d108      	bne.n	8000756 <fsm_manual_processing+0x15e>
				status = AUTO_RED_GREEN;
 8000744:	4b39      	ldr	r3, [pc, #228]	; (800082c <fsm_manual_processing+0x234>)
 8000746:	2201      	movs	r2, #1
 8000748:	601a      	str	r2, [r3, #0]
				numberCounter=0;
 800074a:	4b3e      	ldr	r3, [pc, #248]	; (8000844 <fsm_manual_processing+0x24c>)
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
				timer0_flag=1;
 8000750:	4b38      	ldr	r3, [pc, #224]	; (8000834 <fsm_manual_processing+0x23c>)
 8000752:	2201      	movs	r2, #1
 8000754:	601a      	str	r2, [r3, #0]
			if(timer0_flag==1){
 8000756:	4b37      	ldr	r3, [pc, #220]	; (8000834 <fsm_manual_processing+0x23c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d160      	bne.n	8000820 <fsm_manual_processing+0x228>
				setTimer0(500);
 800075e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000762:	f000 fcbd 	bl	80010e0 <setTimer0>
				blinkAllGreen();
 8000766:	f000 fc39 	bl	8000fdc <blinkAllGreen>
			break;
 800076a:	e059      	b.n	8000820 <fsm_manual_processing+0x228>
			if(isButtonPress(0)){
 800076c:	2000      	movs	r0, #0
 800076e:	f7ff fd05 	bl	800017c <isButtonPress>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d00b      	beq.n	8000790 <fsm_manual_processing+0x198>
				timer1_flag=1;
 8000778:	4b31      	ldr	r3, [pc, #196]	; (8000840 <fsm_manual_processing+0x248>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
				status = AUTO_RED_GREEN;
 800077e:	4b2b      	ldr	r3, [pc, #172]	; (800082c <fsm_manual_processing+0x234>)
 8000780:	2201      	movs	r2, #1
 8000782:	601a      	str	r2, [r3, #0]
				numberCounter=0;
 8000784:	4b2f      	ldr	r3, [pc, #188]	; (8000844 <fsm_manual_processing+0x24c>)
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
				timer0_flag=1;
 800078a:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <fsm_manual_processing+0x23c>)
 800078c:	2201      	movs	r2, #1
 800078e:	601a      	str	r2, [r3, #0]
			if(isButtonPress(1)){
 8000790:	2001      	movs	r0, #1
 8000792:	f7ff fcf3 	bl	800017c <isButtonPress>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d00f      	beq.n	80007bc <fsm_manual_processing+0x1c4>
				setTimer1(timeOut);
 800079c:	4b24      	ldr	r3, [pc, #144]	; (8000830 <fsm_manual_processing+0x238>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 fcb7 	bl	8001114 <setTimer1>
				yellowDuration++;
 80007a6:	4b29      	ldr	r3, [pc, #164]	; (800084c <fsm_manual_processing+0x254>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	3301      	adds	r3, #1
 80007ac:	4a27      	ldr	r2, [pc, #156]	; (800084c <fsm_manual_processing+0x254>)
 80007ae:	6013      	str	r3, [r2, #0]
				printNumber=yellowDuration;
 80007b0:	4b26      	ldr	r3, [pc, #152]	; (800084c <fsm_manual_processing+0x254>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a21      	ldr	r2, [pc, #132]	; (800083c <fsm_manual_processing+0x244>)
 80007b6:	6013      	str	r3, [r2, #0]
				UART_Print();
 80007b8:	f000 f8ce 	bl	8000958 <UART_Print>
			if(isButtonPress(2)){
 80007bc:	2002      	movs	r0, #2
 80007be:	f7ff fcdd 	bl	800017c <isButtonPress>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d00f      	beq.n	80007e8 <fsm_manual_processing+0x1f0>
				setTimer1(timeOut);
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <fsm_manual_processing+0x238>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 fca1 	bl	8001114 <setTimer1>
				yellowDuration--;
 80007d2:	4b1e      	ldr	r3, [pc, #120]	; (800084c <fsm_manual_processing+0x254>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	4a1c      	ldr	r2, [pc, #112]	; (800084c <fsm_manual_processing+0x254>)
 80007da:	6013      	str	r3, [r2, #0]
				printNumber=yellowDuration;
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <fsm_manual_processing+0x254>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a16      	ldr	r2, [pc, #88]	; (800083c <fsm_manual_processing+0x244>)
 80007e2:	6013      	str	r3, [r2, #0]
				UART_Print();
 80007e4:	f000 f8b8 	bl	8000958 <UART_Print>
			if(timer1_flag==1){
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <fsm_manual_processing+0x248>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d108      	bne.n	8000802 <fsm_manual_processing+0x20a>
				status = AUTO_RED_GREEN;
 80007f0:	4b0e      	ldr	r3, [pc, #56]	; (800082c <fsm_manual_processing+0x234>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	601a      	str	r2, [r3, #0]
				numberCounter=0;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <fsm_manual_processing+0x24c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
				timer0_flag=1;
 80007fc:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <fsm_manual_processing+0x23c>)
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]
			if(timer0_flag==1){
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <fsm_manual_processing+0x23c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d10c      	bne.n	8000824 <fsm_manual_processing+0x22c>
				setTimer0(500);
 800080a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800080e:	f000 fc67 	bl	80010e0 <setTimer0>
				blinkAllYellow();
 8000812:	f000 fc01 	bl	8001018 <blinkAllYellow>
			break;
 8000816:	e005      	b.n	8000824 <fsm_manual_processing+0x22c>
			break;
 8000818:	bf00      	nop
 800081a:	e004      	b.n	8000826 <fsm_manual_processing+0x22e>
			break;
 800081c:	bf00      	nop
 800081e:	e002      	b.n	8000826 <fsm_manual_processing+0x22e>
			break;
 8000820:	bf00      	nop
 8000822:	e000      	b.n	8000826 <fsm_manual_processing+0x22e>
			break;
 8000824:	bf00      	nop
	}
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000005c 	.word	0x2000005c
 8000830:	20000050 	.word	0x20000050
 8000834:	2000013c 	.word	0x2000013c
 8000838:	20000068 	.word	0x20000068
 800083c:	20000074 	.word	0x20000074
 8000840:	20000144 	.word	0x20000144
 8000844:	20000138 	.word	0x20000138
 8000848:	2000006c 	.word	0x2000006c
 800084c:	20000070 	.word	0x20000070

08000850 <fsm_pedestrian_processing>:
#include "software_timer.h"
#include "button.h"

int change = 1;

void fsm_pedestrian_processing(){
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	switch (status_ped) {
 8000854:	4b39      	ldr	r3, [pc, #228]	; (800093c <fsm_pedestrian_processing+0xec>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b16      	cmp	r3, #22
 800085a:	d037      	beq.n	80008cc <fsm_pedestrian_processing+0x7c>
 800085c:	2b16      	cmp	r3, #22
 800085e:	dc69      	bgt.n	8000934 <fsm_pedestrian_processing+0xe4>
 8000860:	2b14      	cmp	r3, #20
 8000862:	d061      	beq.n	8000928 <fsm_pedestrian_processing+0xd8>
 8000864:	2b15      	cmp	r3, #21
 8000866:	d165      	bne.n	8000934 <fsm_pedestrian_processing+0xe4>
		case PED_STOP:
			if(change==1){
 8000868:	4b35      	ldr	r3, [pc, #212]	; (8000940 <fsm_pedestrian_processing+0xf0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d107      	bne.n	8000880 <fsm_pedestrian_processing+0x30>
				pedStop();
 8000870:	f000 fbf0 	bl	8001054 <pedStop>
				status_buzzer=BUZ_OFF;
 8000874:	4b33      	ldr	r3, [pc, #204]	; (8000944 <fsm_pedestrian_processing+0xf4>)
 8000876:	221f      	movs	r2, #31
 8000878:	601a      	str	r2, [r3, #0]
				change=0;
 800087a:	4b31      	ldr	r3, [pc, #196]	; (8000940 <fsm_pedestrian_processing+0xf0>)
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
			}
			if(timer1_flag==1){
 8000880:	4b31      	ldr	r3, [pc, #196]	; (8000948 <fsm_pedestrian_processing+0xf8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d102      	bne.n	800088e <fsm_pedestrian_processing+0x3e>
				status_ped=UNABLE;
 8000888:	4b2c      	ldr	r3, [pc, #176]	; (800093c <fsm_pedestrian_processing+0xec>)
 800088a:	2214      	movs	r2, #20
 800088c:	601a      	str	r2, [r3, #0]
			}
			if(status<=4&&status>=1){
 800088e:	4b2f      	ldr	r3, [pc, #188]	; (800094c <fsm_pedestrian_processing+0xfc>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b04      	cmp	r3, #4
 8000894:	dc14      	bgt.n	80008c0 <fsm_pedestrian_processing+0x70>
 8000896:	4b2d      	ldr	r3, [pc, #180]	; (800094c <fsm_pedestrian_processing+0xfc>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	dd10      	ble.n	80008c0 <fsm_pedestrian_processing+0x70>
				if(numberCounter<=redDuration&&numberCounter>=1){
 800089e:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <fsm_pedestrian_processing+0x100>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	4b2c      	ldr	r3, [pc, #176]	; (8000954 <fsm_pedestrian_processing+0x104>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	dc0e      	bgt.n	80008c8 <fsm_pedestrian_processing+0x78>
 80008aa:	4b29      	ldr	r3, [pc, #164]	; (8000950 <fsm_pedestrian_processing+0x100>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	dd0a      	ble.n	80008c8 <fsm_pedestrian_processing+0x78>
					status_ped=PED_GO;
 80008b2:	4b22      	ldr	r3, [pc, #136]	; (800093c <fsm_pedestrian_processing+0xec>)
 80008b4:	2216      	movs	r2, #22
 80008b6:	601a      	str	r2, [r3, #0]
					change=1;
 80008b8:	4b21      	ldr	r3, [pc, #132]	; (8000940 <fsm_pedestrian_processing+0xf0>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	601a      	str	r2, [r3, #0]
				if(numberCounter<=redDuration&&numberCounter>=1){
 80008be:	e003      	b.n	80008c8 <fsm_pedestrian_processing+0x78>
				}
			}
			else{
				status_ped=UNABLE;
 80008c0:	4b1e      	ldr	r3, [pc, #120]	; (800093c <fsm_pedestrian_processing+0xec>)
 80008c2:	2214      	movs	r2, #20
 80008c4:	601a      	str	r2, [r3, #0]
			}

			break;
 80008c6:	e036      	b.n	8000936 <fsm_pedestrian_processing+0xe6>
				if(numberCounter<=redDuration&&numberCounter>=1){
 80008c8:	bf00      	nop
			break;
 80008ca:	e034      	b.n	8000936 <fsm_pedestrian_processing+0xe6>
		case PED_GO:
			if(change==1){
 80008cc:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <fsm_pedestrian_processing+0xf0>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d10a      	bne.n	80008ea <fsm_pedestrian_processing+0x9a>
				pedGo();
 80008d4:	f000 fbd2 	bl	800107c <pedGo>
				setTimer3(200);
 80008d8:	20c8      	movs	r0, #200	; 0xc8
 80008da:	f000 fc4f 	bl	800117c <setTimer3>
				status_buzzer=BUZ_ON;
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <fsm_pedestrian_processing+0xf4>)
 80008e0:	221e      	movs	r2, #30
 80008e2:	601a      	str	r2, [r3, #0]
				change=0;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <fsm_pedestrian_processing+0xf0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
			}
			if(status<=4&&status>=1){
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <fsm_pedestrian_processing+0xfc>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	dc14      	bgt.n	800091c <fsm_pedestrian_processing+0xcc>
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <fsm_pedestrian_processing+0xfc>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	dd10      	ble.n	800091c <fsm_pedestrian_processing+0xcc>
				if(numberCounter>=(redDuration+1)||numberCounter==0){
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <fsm_pedestrian_processing+0x104>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <fsm_pedestrian_processing+0x100>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	429a      	cmp	r2, r3
 8000904:	db03      	blt.n	800090e <fsm_pedestrian_processing+0xbe>
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <fsm_pedestrian_processing+0x100>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d10a      	bne.n	8000924 <fsm_pedestrian_processing+0xd4>
					status_ped=PED_STOP;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <fsm_pedestrian_processing+0xec>)
 8000910:	2215      	movs	r2, #21
 8000912:	601a      	str	r2, [r3, #0]
					change =1;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <fsm_pedestrian_processing+0xf0>)
 8000916:	2201      	movs	r2, #1
 8000918:	601a      	str	r2, [r3, #0]
				if(numberCounter>=(redDuration+1)||numberCounter==0){
 800091a:	e003      	b.n	8000924 <fsm_pedestrian_processing+0xd4>
				}
			}
			else{
				status_ped=UNABLE;
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <fsm_pedestrian_processing+0xec>)
 800091e:	2214      	movs	r2, #20
 8000920:	601a      	str	r2, [r3, #0]
			}

			break;
 8000922:	e008      	b.n	8000936 <fsm_pedestrian_processing+0xe6>
				if(numberCounter>=(redDuration+1)||numberCounter==0){
 8000924:	bf00      	nop
			break;
 8000926:	e006      	b.n	8000936 <fsm_pedestrian_processing+0xe6>
		case UNABLE:
			change=1;
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <fsm_pedestrian_processing+0xf0>)
 800092a:	2201      	movs	r2, #1
 800092c:	601a      	str	r2, [r3, #0]
			pedOff();
 800092e:	f000 fbb9 	bl	80010a4 <pedOff>
			break;
 8000932:	e000      	b.n	8000936 <fsm_pedestrian_processing+0xe6>
		default:
			break;
 8000934:	bf00      	nop
	}
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000060 	.word	0x20000060
 8000940:	20000054 	.word	0x20000054
 8000944:	20000064 	.word	0x20000064
 8000948:	20000144 	.word	0x20000144
 800094c:	2000005c 	.word	0x2000005c
 8000950:	20000138 	.word	0x20000138
 8000954:	20000068 	.word	0x20000068

08000958 <UART_Print>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

char str[15];		//buffer store data to send
void UART_Print()
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	sprintf(str, "!7SEG:%lu#\r\n", printNumber);
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <UART_Print+0x2c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4909      	ldr	r1, [pc, #36]	; (8000988 <UART_Print+0x30>)
 8000964:	4809      	ldr	r0, [pc, #36]	; (800098c <UART_Print+0x34>)
 8000966:	f002 fed5 	bl	8003714 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 2000);
 800096a:	4808      	ldr	r0, [pc, #32]	; (800098c <UART_Print+0x34>)
 800096c:	f7ff fbee 	bl	800014c <strlen>
 8000970:	4603      	mov	r3, r0
 8000972:	b29a      	uxth	r2, r3
 8000974:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000978:	4904      	ldr	r1, [pc, #16]	; (800098c <UART_Print+0x34>)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <UART_Print+0x38>)
 800097c:	f002 fd2d 	bl	80033da <HAL_UART_Transmit>
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000074 	.word	0x20000074
 8000988:	08003fa0 	.word	0x08003fa0
 800098c:	20000244 	.word	0x20000244
 8000990:	20000200 	.word	0x20000200

08000994 <fsm_buzzer_processing>:

void fsm_buzzer_processing(){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	switch (status_buzzer) {
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <fsm_buzzer_processing+0x94>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b1e      	cmp	r3, #30
 800099e:	d002      	beq.n	80009a6 <fsm_buzzer_processing+0x12>
 80009a0:	2b1f      	cmp	r3, #31
 80009a2:	d034      	beq.n	8000a0e <fsm_buzzer_processing+0x7a>
		case BUZ_OFF:
			dutyCycle=0;
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dutyCycle);
			break;
		default:
			break;
 80009a4:	e03d      	b.n	8000a22 <fsm_buzzer_processing+0x8e>
			if(timer3_flag==1){
 80009a6:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <fsm_buzzer_processing+0x98>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d138      	bne.n	8000a20 <fsm_buzzer_processing+0x8c>
				if(redDuration<=5){
 80009ae:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <fsm_buzzer_processing+0x9c>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b05      	cmp	r3, #5
 80009b4:	dc0d      	bgt.n	80009d2 <fsm_buzzer_processing+0x3e>
					setTimer3(200);
 80009b6:	20c8      	movs	r0, #200	; 0xc8
 80009b8:	f000 fbe0 	bl	800117c <setTimer3>
					dutyCycle+=40;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <fsm_buzzer_processing+0xa0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	3328      	adds	r3, #40	; 0x28
 80009c2:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <fsm_buzzer_processing+0xa0>)
 80009c4:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dutyCycle);
 80009c6:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <fsm_buzzer_processing+0xa0>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <fsm_buzzer_processing+0xa4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80009d0:	e026      	b.n	8000a20 <fsm_buzzer_processing+0x8c>
					if((redDuration-numberCounter)<=5){
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <fsm_buzzer_processing+0x9c>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <fsm_buzzer_processing+0xa8>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	2b05      	cmp	r3, #5
 80009de:	dc1f      	bgt.n	8000a20 <fsm_buzzer_processing+0x8c>
						setTimer3(200);
 80009e0:	20c8      	movs	r0, #200	; 0xc8
 80009e2:	f000 fbcb 	bl	800117c <setTimer3>
						dutyCycle+=40;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <fsm_buzzer_processing+0xa0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	3328      	adds	r3, #40	; 0x28
 80009ec:	4a11      	ldr	r2, [pc, #68]	; (8000a34 <fsm_buzzer_processing+0xa0>)
 80009ee:	6013      	str	r3, [r2, #0]
						if(dutyCycle>=1000) dutyCycle=900;
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <fsm_buzzer_processing+0xa0>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009f8:	db03      	blt.n	8000a02 <fsm_buzzer_processing+0x6e>
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <fsm_buzzer_processing+0xa0>)
 80009fc:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000a00:	601a      	str	r2, [r3, #0]
						__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dutyCycle);
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <fsm_buzzer_processing+0xa0>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <fsm_buzzer_processing+0xa4>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000a0c:	e008      	b.n	8000a20 <fsm_buzzer_processing+0x8c>
			dutyCycle=0;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <fsm_buzzer_processing+0xa0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dutyCycle);
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <fsm_buzzer_processing+0xa0>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <fsm_buzzer_processing+0xa4>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000a1e:	e000      	b.n	8000a22 <fsm_buzzer_processing+0x8e>
			break;
 8000a20:	bf00      	nop
	}
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000064 	.word	0x20000064
 8000a2c:	20000154 	.word	0x20000154
 8000a30:	20000068 	.word	0x20000068
 8000a34:	20000134 	.word	0x20000134
 8000a38:	20000170 	.word	0x20000170
 8000a3c:	20000138 	.word	0x20000138

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a44:	f000 fda6 	bl	8001594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a48:	f000 f83a 	bl	8000ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4c:	f000 f966 	bl	8000d1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a50:	f000 f93a 	bl	8000cc8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000a54:	f000 f8c2 	bl	8000bdc <MX_TIM3_Init>
  MX_TIM2_Init();
 8000a58:	f000 f874 	bl	8000b44 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000a5c:	4812      	ldr	r0, [pc, #72]	; (8000aa8 <main+0x68>)
 8000a5e:	f001 fd61 	bl	8002524 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a62:	2100      	movs	r1, #0
 8000a64:	4811      	ldr	r0, [pc, #68]	; (8000aac <main+0x6c>)
 8000a66:	f001 fe07 	bl	8002678 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  timer0_flag=1;//Led
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <main+0x70>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	601a      	str	r2, [r3, #0]
  timer1_flag=1;//timeOutMan || timeOutPed
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <main+0x74>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
  timer2_flag=1;//blink PA5
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <main+0x78>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	601a      	str	r2, [r3, #0]
  timer3_flag=1;//buzzer
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <main+0x7c>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_auto_processing();
 8000a82:	f7ff fc63 	bl	800034c <fsm_auto_processing>
	  fsm_manual_processing();
 8000a86:	f7ff fdb7 	bl	80005f8 <fsm_manual_processing>
	  fsm_pedestrian_processing();
 8000a8a:	f7ff fee1 	bl	8000850 <fsm_pedestrian_processing>
	  fsm_buzzer_processing();
 8000a8e:	f7ff ff81 	bl	8000994 <fsm_buzzer_processing>
	  if(timer2_flag==1){
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <main+0x78>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d1f3      	bne.n	8000a82 <main+0x42>
		  setTimer2(1000);
 8000a9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a9e:	f000 fb53 	bl	8001148 <setTimer2>
		  blinkPA51s();
 8000aa2:	f000 fb13 	bl	80010cc <blinkPA51s>
	  fsm_auto_processing();
 8000aa6:	e7ec      	b.n	8000a82 <main+0x42>
 8000aa8:	200001b8 	.word	0x200001b8
 8000aac:	20000170 	.word	0x20000170
 8000ab0:	2000013c 	.word	0x2000013c
 8000ab4:	20000144 	.word	0x20000144
 8000ab8:	2000014c 	.word	0x2000014c
 8000abc:	20000154 	.word	0x20000154

08000ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b090      	sub	sp, #64	; 0x40
 8000ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	f107 0318 	add.w	r3, r7, #24
 8000aca:	2228      	movs	r2, #40	; 0x28
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 fe18 	bl	8003704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aea:	2310      	movs	r3, #16
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aee:	2302      	movs	r3, #2
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000af2:	2300      	movs	r3, #0
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000af6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afc:	f107 0318 	add.w	r3, r7, #24
 8000b00:	4618      	mov	r0, r3
 8000b02:	f001 f8a5 	bl	8001c50 <HAL_RCC_OscConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b0c:	f000 f9b2 	bl	8000e74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b10:	230f      	movs	r3, #15
 8000b12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b14:	2302      	movs	r3, #2
 8000b16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2102      	movs	r1, #2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f001 fb10 	bl	8002150 <HAL_RCC_ClockConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b36:	f000 f99d 	bl	8000e74 <Error_Handler>
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3740      	adds	r7, #64	; 0x40
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4a:	f107 0308 	add.w	r3, r7, #8
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b58:	463b      	mov	r3, r7
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b60:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <MX_TIM2_Init+0x94>)
 8000b62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <MX_TIM2_Init+0x94>)
 8000b6a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000b6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <MX_TIM2_Init+0x94>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <MX_TIM2_Init+0x94>)
 8000b78:	220a      	movs	r2, #10
 8000b7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <MX_TIM2_Init+0x94>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <MX_TIM2_Init+0x94>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b88:	4813      	ldr	r0, [pc, #76]	; (8000bd8 <MX_TIM2_Init+0x94>)
 8000b8a:	f001 fc7b 	bl	8002484 <HAL_TIM_Base_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b94:	f000 f96e 	bl	8000e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <MX_TIM2_Init+0x94>)
 8000ba6:	f001 ffcf 	bl	8002b48 <HAL_TIM_ConfigClockSource>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bb0:	f000 f960 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_TIM2_Init+0x94>)
 8000bc2:	f002 fb4d 	bl	8003260 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bcc:	f000 f952 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200001b8 	.word	0x200001b8

08000bdc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08e      	sub	sp, #56	; 0x38
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	f107 0320 	add.w	r3, r7, #32
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
 8000c08:	615a      	str	r2, [r3, #20]
 8000c0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c0c:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <MX_TIM3_Init+0xe4>)
 8000c0e:	4a2d      	ldr	r2, [pc, #180]	; (8000cc4 <MX_TIM3_Init+0xe8>)
 8000c10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000c12:	4b2b      	ldr	r3, [pc, #172]	; (8000cc0 <MX_TIM3_Init+0xe4>)
 8000c14:	223f      	movs	r2, #63	; 0x3f
 8000c16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c18:	4b29      	ldr	r3, [pc, #164]	; (8000cc0 <MX_TIM3_Init+0xe4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c1e:	4b28      	ldr	r3, [pc, #160]	; (8000cc0 <MX_TIM3_Init+0xe4>)
 8000c20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c24:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c26:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <MX_TIM3_Init+0xe4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2c:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <MX_TIM3_Init+0xe4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c32:	4823      	ldr	r0, [pc, #140]	; (8000cc0 <MX_TIM3_Init+0xe4>)
 8000c34:	f001 fc26 	bl	8002484 <HAL_TIM_Base_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c3e:	f000 f919 	bl	8000e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	481c      	ldr	r0, [pc, #112]	; (8000cc0 <MX_TIM3_Init+0xe4>)
 8000c50:	f001 ff7a 	bl	8002b48 <HAL_TIM_ConfigClockSource>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c5a:	f000 f90b 	bl	8000e74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c5e:	4818      	ldr	r0, [pc, #96]	; (8000cc0 <MX_TIM3_Init+0xe4>)
 8000c60:	f001 fcb2 	bl	80025c8 <HAL_TIM_PWM_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c6a:	f000 f903 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c76:	f107 0320 	add.w	r3, r7, #32
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4810      	ldr	r0, [pc, #64]	; (8000cc0 <MX_TIM3_Init+0xe4>)
 8000c7e:	f002 faef 	bl	8003260 <HAL_TIMEx_MasterConfigSynchronization>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c88:	f000 f8f4 	bl	8000e74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c8c:	2360      	movs	r3, #96	; 0x60
 8000c8e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <MX_TIM3_Init+0xe4>)
 8000ca4:	f001 fe92 	bl	80029cc <HAL_TIM_PWM_ConfigChannel>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000cae:	f000 f8e1 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cb2:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <MX_TIM3_Init+0xe4>)
 8000cb4:	f000 fb58 	bl	8001368 <HAL_TIM_MspPostInit>

}
 8000cb8:	bf00      	nop
 8000cba:	3738      	adds	r7, #56	; 0x38
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000170 	.word	0x20000170
 8000cc4:	40000400 	.word	0x40000400

08000cc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <MX_USART2_UART_Init+0x50>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000d00:	f002 fb1e 	bl	8003340 <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d0a:	f000 f8b3 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000200 	.word	0x20000200
 8000d18:	40004400 	.word	0x40004400

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 0310 	add.w	r3, r7, #16
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d30:	4b45      	ldr	r3, [pc, #276]	; (8000e48 <MX_GPIO_Init+0x12c>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a44      	ldr	r2, [pc, #272]	; (8000e48 <MX_GPIO_Init+0x12c>)
 8000d36:	f043 0310 	orr.w	r3, r3, #16
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b42      	ldr	r3, [pc, #264]	; (8000e48 <MX_GPIO_Init+0x12c>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0310 	and.w	r3, r3, #16
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d48:	4b3f      	ldr	r3, [pc, #252]	; (8000e48 <MX_GPIO_Init+0x12c>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a3e      	ldr	r2, [pc, #248]	; (8000e48 <MX_GPIO_Init+0x12c>)
 8000d4e:	f043 0320 	orr.w	r3, r3, #32
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b3c      	ldr	r3, [pc, #240]	; (8000e48 <MX_GPIO_Init+0x12c>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0320 	and.w	r3, r3, #32
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	4b39      	ldr	r3, [pc, #228]	; (8000e48 <MX_GPIO_Init+0x12c>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a38      	ldr	r2, [pc, #224]	; (8000e48 <MX_GPIO_Init+0x12c>)
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <MX_GPIO_Init+0x12c>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0304 	and.w	r3, r3, #4
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	4b33      	ldr	r3, [pc, #204]	; (8000e48 <MX_GPIO_Init+0x12c>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a32      	ldr	r2, [pc, #200]	; (8000e48 <MX_GPIO_Init+0x12c>)
 8000d7e:	f043 0308 	orr.w	r3, r3, #8
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b30      	ldr	r3, [pc, #192]	; (8000e48 <MX_GPIO_Init+0x12c>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0308 	and.w	r3, r3, #8
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|PL_2_Pin|TL1_1_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000d96:	482d      	ldr	r0, [pc, #180]	; (8000e4c <MX_GPIO_Init+0x130>)
 8000d98:	f000 ff07 	bl	8001baa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PL_1_Pin|TL1_2_Pin|TL2_1_Pin|TL2_2_Pin, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000da2:	482b      	ldr	r0, [pc, #172]	; (8000e50 <MX_GPIO_Init+0x134>)
 8000da4:	f000 ff01 	bl	8001baa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000da8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dae:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <MX_GPIO_Init+0x138>)
 8000db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4826      	ldr	r0, [pc, #152]	; (8000e58 <MX_GPIO_Init+0x13c>)
 8000dbe:	f000 fd59 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_P_Pin Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_P_Pin|Button_1_Pin|Button_2_Pin;
 8000dc2:	2313      	movs	r3, #19
 8000dc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	481d      	ldr	r0, [pc, #116]	; (8000e4c <MX_GPIO_Init+0x130>)
 8000dd6:	f000 fd4d 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin PL_2_Pin TL1_1_Pin */
  GPIO_InitStruct.Pin = LED_Pin|PL_2_Pin|TL1_1_Pin;
 8000dda:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000dde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	4619      	mov	r1, r3
 8000df2:	4816      	ldr	r0, [pc, #88]	; (8000e4c <MX_GPIO_Init+0x130>)
 8000df4:	f000 fd3e 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4811      	ldr	r0, [pc, #68]	; (8000e50 <MX_GPIO_Init+0x134>)
 8000e0c:	f000 fd32 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PL_1_Pin TL1_2_Pin TL2_1_Pin TL2_2_Pin */
  GPIO_InitStruct.Pin = PL_1_Pin|TL1_2_Pin|TL2_1_Pin|TL2_2_Pin;
 8000e10:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4619      	mov	r1, r3
 8000e28:	4809      	ldr	r0, [pc, #36]	; (8000e50 <MX_GPIO_Init+0x134>)
 8000e2a:	f000 fd23 	bl	8001874 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	2028      	movs	r0, #40	; 0x28
 8000e34:	f000 fce7 	bl	8001806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e38:	2028      	movs	r0, #40	; 0x28
 8000e3a:	f000 fd00 	bl	800183e <HAL_NVIC_EnableIRQ>

}
 8000e3e:	bf00      	nop
 8000e40:	3720      	adds	r7, #32
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40010800 	.word	0x40010800
 8000e50:	40010c00 	.word	0x40010c00
 8000e54:	10110000 	.word	0x10110000
 8000e58:	40011000 	.word	0x40011000

08000e5c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8000e64:	f7ff f9a4 	bl	80001b0 <getKeyInput>
	runTimer();
 8000e68:	f000 f9a2 	bl	80011b0 <runTimer>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <Error_Handler+0x8>
	...

08000e80 <turnOnRed1>:

int ledR=1;
int ledY=1;
int ledG=1;

void turnOnRed1(){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1_1_GPIO_Port, TL1_1_Pin, 1);
 8000e84:	2201      	movs	r2, #1
 8000e86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <turnOnRed1+0x20>)
 8000e8c:	f000 fe8d 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1_2_GPIO_Port, TL1_2_Pin, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2108      	movs	r1, #8
 8000e94:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <turnOnRed1+0x24>)
 8000e96:	f000 fe88 	bl	8001baa <HAL_GPIO_WritePin>
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40010800 	.word	0x40010800
 8000ea4:	40010c00 	.word	0x40010c00

08000ea8 <turnOnGreen1>:
void turnOnGreen1(){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1_1_GPIO_Port, TL1_1_Pin, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <turnOnGreen1+0x20>)
 8000eb4:	f000 fe79 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1_2_GPIO_Port, TL1_2_Pin, 1);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2108      	movs	r1, #8
 8000ebc:	4803      	ldr	r0, [pc, #12]	; (8000ecc <turnOnGreen1+0x24>)
 8000ebe:	f000 fe74 	bl	8001baa <HAL_GPIO_WritePin>
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40010800 	.word	0x40010800
 8000ecc:	40010c00 	.word	0x40010c00

08000ed0 <turnOnYellow1>:
void turnOnYellow1(){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1_1_GPIO_Port, TL1_1_Pin, 1);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <turnOnYellow1+0x20>)
 8000edc:	f000 fe65 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1_2_GPIO_Port, TL1_2_Pin, 1);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <turnOnYellow1+0x24>)
 8000ee6:	f000 fe60 	bl	8001baa <HAL_GPIO_WritePin>
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40010800 	.word	0x40010800
 8000ef4:	40010c00 	.word	0x40010c00

08000ef8 <turnOff1>:
void turnOff1(){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1_1_GPIO_Port, TL1_1_Pin, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <turnOff1+0x20>)
 8000f04:	f000 fe51 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1_2_GPIO_Port, TL1_2_Pin, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2108      	movs	r1, #8
 8000f0c:	4803      	ldr	r0, [pc, #12]	; (8000f1c <turnOff1+0x24>)
 8000f0e:	f000 fe4c 	bl	8001baa <HAL_GPIO_WritePin>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40010800 	.word	0x40010800
 8000f1c:	40010c00 	.word	0x40010c00

08000f20 <turnOnRed2>:

void turnOnRed2(){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2_1_GPIO_Port, TL2_1_Pin, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2110      	movs	r1, #16
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <turnOnRed2+0x1c>)
 8000f2a:	f000 fe3e 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2_2_GPIO_Port, TL2_2_Pin, 1);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2120      	movs	r1, #32
 8000f32:	4802      	ldr	r0, [pc, #8]	; (8000f3c <turnOnRed2+0x1c>)
 8000f34:	f000 fe39 	bl	8001baa <HAL_GPIO_WritePin>
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40010c00 	.word	0x40010c00

08000f40 <turnOnGreen2>:
void turnOnGreen2(){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2_1_GPIO_Port, TL2_1_Pin, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2110      	movs	r1, #16
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <turnOnGreen2+0x1c>)
 8000f4a:	f000 fe2e 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2_2_GPIO_Port, TL2_2_Pin, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2120      	movs	r1, #32
 8000f52:	4802      	ldr	r0, [pc, #8]	; (8000f5c <turnOnGreen2+0x1c>)
 8000f54:	f000 fe29 	bl	8001baa <HAL_GPIO_WritePin>
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40010c00 	.word	0x40010c00

08000f60 <turnOnYellow2>:
void turnOnYellow2(){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2_1_GPIO_Port, TL2_1_Pin, 1);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2110      	movs	r1, #16
 8000f68:	4804      	ldr	r0, [pc, #16]	; (8000f7c <turnOnYellow2+0x1c>)
 8000f6a:	f000 fe1e 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2_2_GPIO_Port, TL2_2_Pin, 1);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2120      	movs	r1, #32
 8000f72:	4802      	ldr	r0, [pc, #8]	; (8000f7c <turnOnYellow2+0x1c>)
 8000f74:	f000 fe19 	bl	8001baa <HAL_GPIO_WritePin>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40010c00 	.word	0x40010c00

08000f80 <turnOff2>:
void turnOff2(){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2_1_GPIO_Port, TL2_1_Pin, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2110      	movs	r1, #16
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <turnOff2+0x1c>)
 8000f8a:	f000 fe0e 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2_2_GPIO_Port, TL2_2_Pin, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2120      	movs	r1, #32
 8000f92:	4802      	ldr	r0, [pc, #8]	; (8000f9c <turnOff2+0x1c>)
 8000f94:	f000 fe09 	bl	8001baa <HAL_GPIO_WritePin>
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40010c00 	.word	0x40010c00

08000fa0 <blinkAllRed>:

void blinkAllRed(){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	if(ledR==1){
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <blinkAllRed+0x38>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d104      	bne.n	8000fb6 <blinkAllRed+0x16>
		turnOnRed1();
 8000fac:	f7ff ff68 	bl	8000e80 <turnOnRed1>
		turnOnRed2();
 8000fb0:	f7ff ffb6 	bl	8000f20 <turnOnRed2>
 8000fb4:	e003      	b.n	8000fbe <blinkAllRed+0x1e>
	}
	else{
		turnOff1();
 8000fb6:	f7ff ff9f 	bl	8000ef8 <turnOff1>
		turnOff2();
 8000fba:	f7ff ffe1 	bl	8000f80 <turnOff2>
	}
	ledR=!ledR;
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <blinkAllRed+0x38>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	bf0c      	ite	eq
 8000fc6:	2301      	moveq	r3, #1
 8000fc8:	2300      	movne	r3, #0
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b02      	ldr	r3, [pc, #8]	; (8000fd8 <blinkAllRed+0x38>)
 8000fd0:	601a      	str	r2, [r3, #0]
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000078 	.word	0x20000078

08000fdc <blinkAllGreen>:
void blinkAllGreen(){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	if(ledG==1){
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <blinkAllGreen+0x38>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d104      	bne.n	8000ff2 <blinkAllGreen+0x16>
		turnOnGreen1();
 8000fe8:	f7ff ff5e 	bl	8000ea8 <turnOnGreen1>
		turnOnGreen2();
 8000fec:	f7ff ffa8 	bl	8000f40 <turnOnGreen2>
 8000ff0:	e003      	b.n	8000ffa <blinkAllGreen+0x1e>
	}
	else{
		turnOff1();
 8000ff2:	f7ff ff81 	bl	8000ef8 <turnOff1>
		turnOff2();
 8000ff6:	f7ff ffc3 	bl	8000f80 <turnOff2>
	}
	ledG=!ledG;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <blinkAllGreen+0x38>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	bf0c      	ite	eq
 8001002:	2301      	moveq	r3, #1
 8001004:	2300      	movne	r3, #0
 8001006:	b2db      	uxtb	r3, r3
 8001008:	461a      	mov	r2, r3
 800100a:	4b02      	ldr	r3, [pc, #8]	; (8001014 <blinkAllGreen+0x38>)
 800100c:	601a      	str	r2, [r3, #0]
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000080 	.word	0x20000080

08001018 <blinkAllYellow>:
void blinkAllYellow(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	if(ledY==1){
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <blinkAllYellow+0x38>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d104      	bne.n	800102e <blinkAllYellow+0x16>
		turnOnYellow1();
 8001024:	f7ff ff54 	bl	8000ed0 <turnOnYellow1>
		turnOnYellow2();
 8001028:	f7ff ff9a 	bl	8000f60 <turnOnYellow2>
 800102c:	e003      	b.n	8001036 <blinkAllYellow+0x1e>
	}
	else{
		turnOff1();
 800102e:	f7ff ff63 	bl	8000ef8 <turnOff1>
		turnOff2();
 8001032:	f7ff ffa5 	bl	8000f80 <turnOff2>
	}
	ledY=!ledY;
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <blinkAllYellow+0x38>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	bf0c      	ite	eq
 800103e:	2301      	moveq	r3, #1
 8001040:	2300      	movne	r3, #0
 8001042:	b2db      	uxtb	r3, r3
 8001044:	461a      	mov	r2, r3
 8001046:	4b02      	ldr	r3, [pc, #8]	; (8001050 <blinkAllYellow+0x38>)
 8001048:	601a      	str	r2, [r3, #0]
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000007c 	.word	0x2000007c

08001054 <pedStop>:
void pedStop(){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PL_1_GPIO_Port, PL_1_Pin, 1);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <pedStop+0x20>)
 8001060:	f000 fda3 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PL_2_GPIO_Port, PL_2_Pin, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106a:	4803      	ldr	r0, [pc, #12]	; (8001078 <pedStop+0x24>)
 800106c:	f000 fd9d 	bl	8001baa <HAL_GPIO_WritePin>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40010c00 	.word	0x40010c00
 8001078:	40010800 	.word	0x40010800

0800107c <pedGo>:
void pedGo(){
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PL_1_GPIO_Port, PL_1_Pin, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <pedGo+0x20>)
 8001088:	f000 fd8f 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PL_2_GPIO_Port, PL_2_Pin, 1);
 800108c:	2201      	movs	r2, #1
 800108e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001092:	4803      	ldr	r0, [pc, #12]	; (80010a0 <pedGo+0x24>)
 8001094:	f000 fd89 	bl	8001baa <HAL_GPIO_WritePin>

}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40010c00 	.word	0x40010c00
 80010a0:	40010800 	.word	0x40010800

080010a4 <pedOff>:
void pedOff(){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PL_1_GPIO_Port, PL_1_Pin, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <pedOff+0x20>)
 80010b0:	f000 fd7b 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PL_2_GPIO_Port, PL_2_Pin, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ba:	4803      	ldr	r0, [pc, #12]	; (80010c8 <pedOff+0x24>)
 80010bc:	f000 fd75 	bl	8001baa <HAL_GPIO_WritePin>
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40010c00 	.word	0x40010c00
 80010c8:	40010800 	.word	0x40010800

080010cc <blinkPA51s>:

void blinkPA51s(){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80010d0:	2120      	movs	r1, #32
 80010d2:	4802      	ldr	r0, [pc, #8]	; (80010dc <blinkPA51s+0x10>)
 80010d4:	f000 fd81 	bl	8001bda <HAL_GPIO_TogglePin>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40010800 	.word	0x40010800

080010e0 <setTimer0>:

//Timer0
int timer0_flag=0;
int timer0_counter=0;

void setTimer0(int duration){
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	timer0_counter=duration/TICK;
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <setTimer0+0x28>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80010f2:	4a06      	ldr	r2, [pc, #24]	; (800110c <setTimer0+0x2c>)
 80010f4:	6013      	str	r3, [r2, #0]
	timer0_flag=0;
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <setTimer0+0x30>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000084 	.word	0x20000084
 800110c:	20000140 	.word	0x20000140
 8001110:	2000013c 	.word	0x2000013c

08001114 <setTimer1>:

//Timer1
int timer1_flag=0;
int timer1_counter=0;

void setTimer1(int duration){
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	timer1_counter=duration/TICK;
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <setTimer1+0x28>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	fb92 f3f3 	sdiv	r3, r2, r3
 8001126:	4a06      	ldr	r2, [pc, #24]	; (8001140 <setTimer1+0x2c>)
 8001128:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <setTimer1+0x30>)
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000084 	.word	0x20000084
 8001140:	20000148 	.word	0x20000148
 8001144:	20000144 	.word	0x20000144

08001148 <setTimer2>:

//Timer2
int timer2_flag=0;
int timer2_counter=0;

void setTimer2(int duration){
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	timer2_counter=duration/TICK;
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <setTimer2+0x28>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	fb92 f3f3 	sdiv	r3, r2, r3
 800115a:	4a06      	ldr	r2, [pc, #24]	; (8001174 <setTimer2+0x2c>)
 800115c:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <setTimer2+0x30>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000084 	.word	0x20000084
 8001174:	20000150 	.word	0x20000150
 8001178:	2000014c 	.word	0x2000014c

0800117c <setTimer3>:

//Timer3
int timer3_flag=0;
int timer3_counter=0;

void setTimer3(int duration){
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	timer3_counter=duration/TICK;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <setTimer3+0x28>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	fb92 f3f3 	sdiv	r3, r2, r3
 800118e:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <setTimer3+0x2c>)
 8001190:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <setTimer3+0x30>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000084 	.word	0x20000084
 80011a8:	20000158 	.word	0x20000158
 80011ac:	20000154 	.word	0x20000154

080011b0 <runTimer>:
}

//Timer N

//Run Timer
void runTimer(){
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
	if(timer0_counter>0){
 80011b4:	4b29      	ldr	r3, [pc, #164]	; (800125c <runTimer+0xac>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dd0b      	ble.n	80011d4 <runTimer+0x24>
		timer0_counter--;
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <runTimer+0xac>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	4a26      	ldr	r2, [pc, #152]	; (800125c <runTimer+0xac>)
 80011c4:	6013      	str	r3, [r2, #0]
		if(timer0_counter==0) timer0_flag=1;
 80011c6:	4b25      	ldr	r3, [pc, #148]	; (800125c <runTimer+0xac>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d102      	bne.n	80011d4 <runTimer+0x24>
 80011ce:	4b24      	ldr	r3, [pc, #144]	; (8001260 <runTimer+0xb0>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	601a      	str	r2, [r3, #0]
	}
	if(timer1_counter>0){
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <runTimer+0xb4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	dd0b      	ble.n	80011f4 <runTimer+0x44>
		timer1_counter--;
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <runTimer+0xb4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	4a20      	ldr	r2, [pc, #128]	; (8001264 <runTimer+0xb4>)
 80011e4:	6013      	str	r3, [r2, #0]
		if(timer1_counter==0) timer1_flag=1;
 80011e6:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <runTimer+0xb4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d102      	bne.n	80011f4 <runTimer+0x44>
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <runTimer+0xb8>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter>0){
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <runTimer+0xbc>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	dd0b      	ble.n	8001214 <runTimer+0x64>
		timer2_counter--;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <runTimer+0xbc>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	3b01      	subs	r3, #1
 8001202:	4a1a      	ldr	r2, [pc, #104]	; (800126c <runTimer+0xbc>)
 8001204:	6013      	str	r3, [r2, #0]
		if(timer2_counter==0) timer2_flag=1;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <runTimer+0xbc>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <runTimer+0x64>
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <runTimer+0xc0>)
 8001210:	2201      	movs	r2, #1
 8001212:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter>0){
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <runTimer+0xc4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	dd0b      	ble.n	8001234 <runTimer+0x84>
		timer3_counter--;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <runTimer+0xc4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3b01      	subs	r3, #1
 8001222:	4a14      	ldr	r2, [pc, #80]	; (8001274 <runTimer+0xc4>)
 8001224:	6013      	str	r3, [r2, #0]
		if(timer3_counter==0) timer3_flag=1;
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <runTimer+0xc4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d102      	bne.n	8001234 <runTimer+0x84>
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <runTimer+0xc8>)
 8001230:	2201      	movs	r2, #1
 8001232:	601a      	str	r2, [r3, #0]
	}
	if(timer4_counter>0){
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <runTimer+0xcc>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	dd0b      	ble.n	8001254 <runTimer+0xa4>
		timer4_counter--;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <runTimer+0xcc>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3b01      	subs	r3, #1
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <runTimer+0xcc>)
 8001244:	6013      	str	r3, [r2, #0]
		if(timer4_counter==0) timer4_flag=1;
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <runTimer+0xcc>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d102      	bne.n	8001254 <runTimer+0xa4>
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <runTimer+0xd0>)
 8001250:	2201      	movs	r2, #1
 8001252:	601a      	str	r2, [r3, #0]
	}
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	20000140 	.word	0x20000140
 8001260:	2000013c 	.word	0x2000013c
 8001264:	20000148 	.word	0x20000148
 8001268:	20000144 	.word	0x20000144
 800126c:	20000150 	.word	0x20000150
 8001270:	2000014c 	.word	0x2000014c
 8001274:	20000158 	.word	0x20000158
 8001278:	20000154 	.word	0x20000154
 800127c:	20000160 	.word	0x20000160
 8001280:	2000015c 	.word	0x2000015c

08001284 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_MspInit+0x5c>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <HAL_MspInit+0x5c>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6193      	str	r3, [r2, #24]
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_MspInit+0x5c>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <HAL_MspInit+0x5c>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <HAL_MspInit+0x5c>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ac:	61d3      	str	r3, [r2, #28]
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <HAL_MspInit+0x5c>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_MspInit+0x60>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_MspInit+0x60>)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010000 	.word	0x40010000

080012e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f8:	d114      	bne.n	8001324 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <HAL_TIM_Base_MspInit+0x78>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a18      	ldr	r2, [pc, #96]	; (8001360 <HAL_TIM_Base_MspInit+0x78>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	61d3      	str	r3, [r2, #28]
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_TIM_Base_MspInit+0x78>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	201c      	movs	r0, #28
 8001318:	f000 fa75 	bl	8001806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800131c:	201c      	movs	r0, #28
 800131e:	f000 fa8e 	bl	800183e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001322:	e018      	b.n	8001356 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <HAL_TIM_Base_MspInit+0x7c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d113      	bne.n	8001356 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <HAL_TIM_Base_MspInit+0x78>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <HAL_TIM_Base_MspInit+0x78>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	61d3      	str	r3, [r2, #28]
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_TIM_Base_MspInit+0x78>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	201d      	movs	r0, #29
 800134c:	f000 fa5b 	bl	8001806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001350:	201d      	movs	r0, #29
 8001352:	f000 fa74 	bl	800183e <HAL_NVIC_EnableIRQ>
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000
 8001364:	40000400 	.word	0x40000400

08001368 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <HAL_TIM_MspPostInit+0x58>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d117      	bne.n	80013b8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_TIM_MspPostInit+0x5c>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <HAL_TIM_MspPostInit+0x5c>)
 800138e:	f043 0304 	orr.w	r3, r3, #4
 8001392:	6193      	str	r3, [r2, #24]
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_TIM_MspPostInit+0x5c>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PB_Pin;
 80013a0:	2340      	movs	r3, #64	; 0x40
 80013a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2302      	movs	r3, #2
 80013aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PB_GPIO_Port, &GPIO_InitStruct);
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	4619      	mov	r1, r3
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <HAL_TIM_MspPostInit+0x60>)
 80013b4:	f000 fa5e 	bl	8001874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013b8:	bf00      	nop
 80013ba:	3720      	adds	r7, #32
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40000400 	.word	0x40000400
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010800 	.word	0x40010800

080013cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a15      	ldr	r2, [pc, #84]	; (800143c <HAL_UART_MspInit+0x70>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d123      	bne.n	8001434 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <HAL_UART_MspInit+0x74>)
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	4a13      	ldr	r2, [pc, #76]	; (8001440 <HAL_UART_MspInit+0x74>)
 80013f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f6:	61d3      	str	r3, [r2, #28]
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <HAL_UART_MspInit+0x74>)
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <HAL_UART_MspInit+0x74>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <HAL_UART_MspInit+0x74>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_UART_MspInit+0x74>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800141c:	230c      	movs	r3, #12
 800141e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2302      	movs	r3, #2
 8001426:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	4619      	mov	r1, r3
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <HAL_UART_MspInit+0x78>)
 8001430:	f000 fa20 	bl	8001874 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001434:	bf00      	nop
 8001436:	3720      	adds	r7, #32
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40004400 	.word	0x40004400
 8001440:	40021000 	.word	0x40021000
 8001444:	40010800 	.word	0x40010800

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800144c:	e7fe      	b.n	800144c <NMI_Handler+0x4>

0800144e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <MemManage_Handler+0x4>

0800145a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <BusFault_Handler+0x4>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <UsageFault_Handler+0x4>

08001466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr

08001472 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr

0800147e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148e:	f000 f8c7 	bl	8001620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <TIM2_IRQHandler+0x10>)
 800149e:	f001 f98d 	bl	80027bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200001b8 	.word	0x200001b8

080014ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <TIM3_IRQHandler+0x10>)
 80014b2:	f001 f983 	bl	80027bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000170 	.word	0x20000170

080014c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80014c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014c8:	f000 fba0 	bl	8001c0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d8:	4a14      	ldr	r2, [pc, #80]	; (800152c <_sbrk+0x5c>)
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <_sbrk+0x60>)
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <_sbrk+0x64>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	; (8001538 <_sbrk+0x68>)
 80014f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d207      	bcs.n	8001510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001500:	f002 f8d6 	bl	80036b0 <__errno>
 8001504:	4603      	mov	r3, r0
 8001506:	220c      	movs	r2, #12
 8001508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	e009      	b.n	8001524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	4a05      	ldr	r2, [pc, #20]	; (8001534 <_sbrk+0x64>)
 8001520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20005000 	.word	0x20005000
 8001530:	00000400 	.word	0x00000400
 8001534:	20000164 	.word	0x20000164
 8001538:	20000268 	.word	0x20000268

0800153c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001548:	480c      	ldr	r0, [pc, #48]	; (800157c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800154a:	490d      	ldr	r1, [pc, #52]	; (8001580 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800154c:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001550:	e002      	b.n	8001558 <LoopCopyDataInit>

08001552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001556:	3304      	adds	r3, #4

08001558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800155c:	d3f9      	bcc.n	8001552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001560:	4c0a      	ldr	r4, [pc, #40]	; (800158c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001564:	e001      	b.n	800156a <LoopFillZerobss>

08001566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001568:	3204      	adds	r2, #4

0800156a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800156c:	d3fb      	bcc.n	8001566 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800156e:	f7ff ffe5 	bl	800153c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001572:	f002 f8a3 	bl	80036bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001576:	f7ff fa63 	bl	8000a40 <main>
  bx lr
 800157a:	4770      	bx	lr
  ldr r0, =_sdata
 800157c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001580:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8001584:	08004014 	.word	0x08004014
  ldr r2, =_sbss
 8001588:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 800158c:	20000268 	.word	0x20000268

08001590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001590:	e7fe      	b.n	8001590 <ADC1_2_IRQHandler>
	...

08001594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <HAL_Init+0x28>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a07      	ldr	r2, [pc, #28]	; (80015bc <HAL_Init+0x28>)
 800159e:	f043 0310 	orr.w	r3, r3, #16
 80015a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a4:	2003      	movs	r0, #3
 80015a6:	f000 f923 	bl	80017f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015aa:	2000      	movs	r0, #0
 80015ac:	f000 f808 	bl	80015c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b0:	f7ff fe68 	bl	8001284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40022000 	.word	0x40022000

080015c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_InitTick+0x54>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_InitTick+0x58>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015da:	fbb2 f3f3 	udiv	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f93b 	bl	800185a <HAL_SYSTICK_Config>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00e      	b.n	800160c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d80a      	bhi.n	800160a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f4:	2200      	movs	r2, #0
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f000 f903 	bl	8001806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001600:	4a06      	ldr	r2, [pc, #24]	; (800161c <HAL_InitTick+0x5c>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000088 	.word	0x20000088
 8001618:	20000090 	.word	0x20000090
 800161c:	2000008c 	.word	0x2000008c

08001620 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <HAL_IncTick+0x1c>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_IncTick+0x20>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	4a03      	ldr	r2, [pc, #12]	; (8001640 <HAL_IncTick+0x20>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	20000090 	.word	0x20000090
 8001640:	20000254 	.word	0x20000254

08001644 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return uwTick;
 8001648:	4b02      	ldr	r3, [pc, #8]	; (8001654 <HAL_GetTick+0x10>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	20000254 	.word	0x20000254

08001658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001674:	4013      	ands	r3, r2
 8001676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168a:	4a04      	ldr	r2, [pc, #16]	; (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	60d3      	str	r3, [r2, #12]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <__NVIC_GetPriorityGrouping+0x18>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	f003 0307 	and.w	r3, r3, #7
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	db0b      	blt.n	80016e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	f003 021f 	and.w	r2, r3, #31
 80016d4:	4906      	ldr	r1, [pc, #24]	; (80016f0 <__NVIC_EnableIRQ+0x34>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	095b      	lsrs	r3, r3, #5
 80016dc:	2001      	movs	r0, #1
 80016de:	fa00 f202 	lsl.w	r2, r0, r2
 80016e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	e000e100 	.word	0xe000e100

080016f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	6039      	str	r1, [r7, #0]
 80016fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	2b00      	cmp	r3, #0
 8001706:	db0a      	blt.n	800171e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	490c      	ldr	r1, [pc, #48]	; (8001740 <__NVIC_SetPriority+0x4c>)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	0112      	lsls	r2, r2, #4
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	440b      	add	r3, r1
 8001718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800171c:	e00a      	b.n	8001734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4908      	ldr	r1, [pc, #32]	; (8001744 <__NVIC_SetPriority+0x50>)
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	3b04      	subs	r3, #4
 800172c:	0112      	lsls	r2, r2, #4
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	440b      	add	r3, r1
 8001732:	761a      	strb	r2, [r3, #24]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000e100 	.word	0xe000e100
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f1c3 0307 	rsb	r3, r3, #7
 8001762:	2b04      	cmp	r3, #4
 8001764:	bf28      	it	cs
 8001766:	2304      	movcs	r3, #4
 8001768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3304      	adds	r3, #4
 800176e:	2b06      	cmp	r3, #6
 8001770:	d902      	bls.n	8001778 <NVIC_EncodePriority+0x30>
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3b03      	subs	r3, #3
 8001776:	e000      	b.n	800177a <NVIC_EncodePriority+0x32>
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	f04f 32ff 	mov.w	r2, #4294967295
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43da      	mvns	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	401a      	ands	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	43d9      	mvns	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	4313      	orrs	r3, r2
         );
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3724      	adds	r7, #36	; 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017bc:	d301      	bcc.n	80017c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017be:	2301      	movs	r3, #1
 80017c0:	e00f      	b.n	80017e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <SysTick_Config+0x40>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ca:	210f      	movs	r1, #15
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295
 80017d0:	f7ff ff90 	bl	80016f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <SysTick_Config+0x40>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <SysTick_Config+0x40>)
 80017dc:	2207      	movs	r2, #7
 80017de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	e000e010 	.word	0xe000e010

080017f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff2d 	bl	8001658 <__NVIC_SetPriorityGrouping>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001818:	f7ff ff42 	bl	80016a0 <__NVIC_GetPriorityGrouping>
 800181c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	6978      	ldr	r0, [r7, #20]
 8001824:	f7ff ff90 	bl	8001748 <NVIC_EncodePriority>
 8001828:	4602      	mov	r2, r0
 800182a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff5f 	bl	80016f4 <__NVIC_SetPriority>
}
 8001836:	bf00      	nop
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff35 	bl	80016bc <__NVIC_EnableIRQ>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffa2 	bl	80017ac <SysTick_Config>
 8001868:	4603      	mov	r3, r0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001874:	b480      	push	{r7}
 8001876:	b08b      	sub	sp, #44	; 0x2c
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001886:	e169      	b.n	8001b5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001888:	2201      	movs	r2, #1
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	f040 8158 	bne.w	8001b56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4a9a      	ldr	r2, [pc, #616]	; (8001b14 <HAL_GPIO_Init+0x2a0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d05e      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018b0:	4a98      	ldr	r2, [pc, #608]	; (8001b14 <HAL_GPIO_Init+0x2a0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d875      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018b6:	4a98      	ldr	r2, [pc, #608]	; (8001b18 <HAL_GPIO_Init+0x2a4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d058      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018bc:	4a96      	ldr	r2, [pc, #600]	; (8001b18 <HAL_GPIO_Init+0x2a4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d86f      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018c2:	4a96      	ldr	r2, [pc, #600]	; (8001b1c <HAL_GPIO_Init+0x2a8>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d052      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018c8:	4a94      	ldr	r2, [pc, #592]	; (8001b1c <HAL_GPIO_Init+0x2a8>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d869      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018ce:	4a94      	ldr	r2, [pc, #592]	; (8001b20 <HAL_GPIO_Init+0x2ac>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d04c      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018d4:	4a92      	ldr	r2, [pc, #584]	; (8001b20 <HAL_GPIO_Init+0x2ac>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d863      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018da:	4a92      	ldr	r2, [pc, #584]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d046      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018e0:	4a90      	ldr	r2, [pc, #576]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d85d      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018e6:	2b12      	cmp	r3, #18
 80018e8:	d82a      	bhi.n	8001940 <HAL_GPIO_Init+0xcc>
 80018ea:	2b12      	cmp	r3, #18
 80018ec:	d859      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018ee:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <HAL_GPIO_Init+0x80>)
 80018f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f4:	0800196f 	.word	0x0800196f
 80018f8:	08001949 	.word	0x08001949
 80018fc:	0800195b 	.word	0x0800195b
 8001900:	0800199d 	.word	0x0800199d
 8001904:	080019a3 	.word	0x080019a3
 8001908:	080019a3 	.word	0x080019a3
 800190c:	080019a3 	.word	0x080019a3
 8001910:	080019a3 	.word	0x080019a3
 8001914:	080019a3 	.word	0x080019a3
 8001918:	080019a3 	.word	0x080019a3
 800191c:	080019a3 	.word	0x080019a3
 8001920:	080019a3 	.word	0x080019a3
 8001924:	080019a3 	.word	0x080019a3
 8001928:	080019a3 	.word	0x080019a3
 800192c:	080019a3 	.word	0x080019a3
 8001930:	080019a3 	.word	0x080019a3
 8001934:	080019a3 	.word	0x080019a3
 8001938:	08001951 	.word	0x08001951
 800193c:	08001965 	.word	0x08001965
 8001940:	4a79      	ldr	r2, [pc, #484]	; (8001b28 <HAL_GPIO_Init+0x2b4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001946:	e02c      	b.n	80019a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	623b      	str	r3, [r7, #32]
          break;
 800194e:	e029      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	3304      	adds	r3, #4
 8001956:	623b      	str	r3, [r7, #32]
          break;
 8001958:	e024      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	3308      	adds	r3, #8
 8001960:	623b      	str	r3, [r7, #32]
          break;
 8001962:	e01f      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	330c      	adds	r3, #12
 800196a:	623b      	str	r3, [r7, #32]
          break;
 800196c:	e01a      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d102      	bne.n	800197c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001976:	2304      	movs	r3, #4
 8001978:	623b      	str	r3, [r7, #32]
          break;
 800197a:	e013      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d105      	bne.n	8001990 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001984:	2308      	movs	r3, #8
 8001986:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	611a      	str	r2, [r3, #16]
          break;
 800198e:	e009      	b.n	80019a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001990:	2308      	movs	r3, #8
 8001992:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	615a      	str	r2, [r3, #20]
          break;
 800199a:	e003      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
          break;
 80019a0:	e000      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          break;
 80019a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	2bff      	cmp	r3, #255	; 0xff
 80019a8:	d801      	bhi.n	80019ae <HAL_GPIO_Init+0x13a>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	e001      	b.n	80019b2 <HAL_GPIO_Init+0x13e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3304      	adds	r3, #4
 80019b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	2bff      	cmp	r3, #255	; 0xff
 80019b8:	d802      	bhi.n	80019c0 <HAL_GPIO_Init+0x14c>
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	e002      	b.n	80019c6 <HAL_GPIO_Init+0x152>
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	3b08      	subs	r3, #8
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	210f      	movs	r1, #15
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	401a      	ands	r2, r3
 80019d8:	6a39      	ldr	r1, [r7, #32]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	431a      	orrs	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 80b1 	beq.w	8001b56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019f4:	4b4d      	ldr	r3, [pc, #308]	; (8001b2c <HAL_GPIO_Init+0x2b8>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	4a4c      	ldr	r2, [pc, #304]	; (8001b2c <HAL_GPIO_Init+0x2b8>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b4a      	ldr	r3, [pc, #296]	; (8001b2c <HAL_GPIO_Init+0x2b8>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a0c:	4a48      	ldr	r2, [pc, #288]	; (8001b30 <HAL_GPIO_Init+0x2bc>)
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	089b      	lsrs	r3, r3, #2
 8001a12:	3302      	adds	r3, #2
 8001a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	220f      	movs	r2, #15
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a40      	ldr	r2, [pc, #256]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d013      	beq.n	8001a60 <HAL_GPIO_Init+0x1ec>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a3f      	ldr	r2, [pc, #252]	; (8001b38 <HAL_GPIO_Init+0x2c4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d00d      	beq.n	8001a5c <HAL_GPIO_Init+0x1e8>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a3e      	ldr	r2, [pc, #248]	; (8001b3c <HAL_GPIO_Init+0x2c8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d007      	beq.n	8001a58 <HAL_GPIO_Init+0x1e4>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a3d      	ldr	r2, [pc, #244]	; (8001b40 <HAL_GPIO_Init+0x2cc>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d101      	bne.n	8001a54 <HAL_GPIO_Init+0x1e0>
 8001a50:	2303      	movs	r3, #3
 8001a52:	e006      	b.n	8001a62 <HAL_GPIO_Init+0x1ee>
 8001a54:	2304      	movs	r3, #4
 8001a56:	e004      	b.n	8001a62 <HAL_GPIO_Init+0x1ee>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e002      	b.n	8001a62 <HAL_GPIO_Init+0x1ee>
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e000      	b.n	8001a62 <HAL_GPIO_Init+0x1ee>
 8001a60:	2300      	movs	r3, #0
 8001a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a64:	f002 0203 	and.w	r2, r2, #3
 8001a68:	0092      	lsls	r2, r2, #2
 8001a6a:	4093      	lsls	r3, r2
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a72:	492f      	ldr	r1, [pc, #188]	; (8001b30 <HAL_GPIO_Init+0x2bc>)
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	089b      	lsrs	r3, r3, #2
 8001a78:	3302      	adds	r3, #2
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d006      	beq.n	8001a9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	492c      	ldr	r1, [pc, #176]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	600b      	str	r3, [r1, #0]
 8001a98:	e006      	b.n	8001aa8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a9a:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	4928      	ldr	r1, [pc, #160]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d006      	beq.n	8001ac2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ab4:	4b23      	ldr	r3, [pc, #140]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	4922      	ldr	r1, [pc, #136]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ac2:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	491e      	ldr	r1, [pc, #120]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	4918      	ldr	r1, [pc, #96]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	4914      	ldr	r1, [pc, #80]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d021      	beq.n	8001b48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	490e      	ldr	r1, [pc, #56]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60cb      	str	r3, [r1, #12]
 8001b10:	e021      	b.n	8001b56 <HAL_GPIO_Init+0x2e2>
 8001b12:	bf00      	nop
 8001b14:	10320000 	.word	0x10320000
 8001b18:	10310000 	.word	0x10310000
 8001b1c:	10220000 	.word	0x10220000
 8001b20:	10210000 	.word	0x10210000
 8001b24:	10120000 	.word	0x10120000
 8001b28:	10110000 	.word	0x10110000
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010000 	.word	0x40010000
 8001b34:	40010800 	.word	0x40010800
 8001b38:	40010c00 	.word	0x40010c00
 8001b3c:	40011000 	.word	0x40011000
 8001b40:	40011400 	.word	0x40011400
 8001b44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_GPIO_Init+0x304>)
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	4909      	ldr	r1, [pc, #36]	; (8001b78 <HAL_GPIO_Init+0x304>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	3301      	adds	r3, #1
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	fa22 f303 	lsr.w	r3, r2, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f47f ae8e 	bne.w	8001888 <HAL_GPIO_Init+0x14>
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	372c      	adds	r7, #44	; 0x2c
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	40010400 	.word	0x40010400

08001b7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	887b      	ldrh	r3, [r7, #2]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d002      	beq.n	8001b9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	e001      	b.n	8001b9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	807b      	strh	r3, [r7, #2]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bba:	787b      	ldrb	r3, [r7, #1]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc0:	887a      	ldrh	r2, [r7, #2]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bc6:	e003      	b.n	8001bd0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bc8:	887b      	ldrh	r3, [r7, #2]
 8001bca:	041a      	lsls	r2, r3, #16
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	611a      	str	r2, [r3, #16]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr

08001bda <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b085      	sub	sp, #20
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	460b      	mov	r3, r1
 8001be4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bec:	887a      	ldrh	r2, [r7, #2]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	041a      	lsls	r2, r3, #16
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	43d9      	mvns	r1, r3
 8001bf8:	887b      	ldrh	r3, [r7, #2]
 8001bfa:	400b      	ands	r3, r1
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	611a      	str	r2, [r3, #16]
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c18:	695a      	ldr	r2, [r3, #20]
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d006      	beq.n	8001c30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c22:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c28:	88fb      	ldrh	r3, [r7, #6]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 f806 	bl	8001c3c <HAL_GPIO_EXTI_Callback>
  }
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40010400 	.word	0x40010400

08001c3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e26c      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8087 	beq.w	8001d7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c70:	4b92      	ldr	r3, [pc, #584]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d00c      	beq.n	8001c96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c7c:	4b8f      	ldr	r3, [pc, #572]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d112      	bne.n	8001cae <HAL_RCC_OscConfig+0x5e>
 8001c88:	4b8c      	ldr	r3, [pc, #560]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c94:	d10b      	bne.n	8001cae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c96:	4b89      	ldr	r3, [pc, #548]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d06c      	beq.n	8001d7c <HAL_RCC_OscConfig+0x12c>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d168      	bne.n	8001d7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e246      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x76>
 8001cb8:	4b80      	ldr	r3, [pc, #512]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a7f      	ldr	r2, [pc, #508]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	e02e      	b.n	8001d24 <HAL_RCC_OscConfig+0xd4>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x98>
 8001cce:	4b7b      	ldr	r3, [pc, #492]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a7a      	ldr	r2, [pc, #488]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	4b78      	ldr	r3, [pc, #480]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a77      	ldr	r2, [pc, #476]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e01d      	b.n	8001d24 <HAL_RCC_OscConfig+0xd4>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0xbc>
 8001cf2:	4b72      	ldr	r3, [pc, #456]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a71      	ldr	r2, [pc, #452]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	4b6f      	ldr	r3, [pc, #444]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a6e      	ldr	r2, [pc, #440]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e00b      	b.n	8001d24 <HAL_RCC_OscConfig+0xd4>
 8001d0c:	4b6b      	ldr	r3, [pc, #428]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a6a      	ldr	r2, [pc, #424]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b68      	ldr	r3, [pc, #416]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a67      	ldr	r2, [pc, #412]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d013      	beq.n	8001d54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2c:	f7ff fc8a 	bl	8001644 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d34:	f7ff fc86 	bl	8001644 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e1fa      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	4b5d      	ldr	r3, [pc, #372]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0xe4>
 8001d52:	e014      	b.n	8001d7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff fc76 	bl	8001644 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff fc72 	bl	8001644 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e1e6      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6e:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x10c>
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d063      	beq.n	8001e52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d8a:	4b4c      	ldr	r3, [pc, #304]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00b      	beq.n	8001dae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d96:	4b49      	ldr	r3, [pc, #292]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d11c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x18c>
 8001da2:	4b46      	ldr	r3, [pc, #280]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d116      	bne.n	8001ddc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dae:	4b43      	ldr	r3, [pc, #268]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x176>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e1ba      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4939      	ldr	r1, [pc, #228]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dda:	e03a      	b.n	8001e52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d020      	beq.n	8001e26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de4:	4b36      	ldr	r3, [pc, #216]	; (8001ec0 <HAL_RCC_OscConfig+0x270>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7ff fc2b 	bl	8001644 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df2:	f7ff fc27 	bl	8001644 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e19b      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e04:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e10:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4927      	ldr	r1, [pc, #156]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	600b      	str	r3, [r1, #0]
 8001e24:	e015      	b.n	8001e52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e26:	4b26      	ldr	r3, [pc, #152]	; (8001ec0 <HAL_RCC_OscConfig+0x270>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fc0a 	bl	8001644 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e34:	f7ff fc06 	bl	8001644 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e17a      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e46:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d03a      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d019      	beq.n	8001e9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e66:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x274>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6c:	f7ff fbea 	bl	8001644 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e74:	f7ff fbe6 	bl	8001644 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e15a      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e86:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e92:	2001      	movs	r0, #1
 8001e94:	f000 fad8 	bl	8002448 <RCC_Delay>
 8001e98:	e01c      	b.n	8001ed4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x274>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea0:	f7ff fbd0 	bl	8001644 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea6:	e00f      	b.n	8001ec8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea8:	f7ff fbcc 	bl	8001644 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d908      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e140      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	42420000 	.word	0x42420000
 8001ec4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec8:	4b9e      	ldr	r3, [pc, #632]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1e9      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80a6 	beq.w	800202e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee6:	4b97      	ldr	r3, [pc, #604]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10d      	bne.n	8001f0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	4b94      	ldr	r3, [pc, #592]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4a93      	ldr	r2, [pc, #588]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efc:	61d3      	str	r3, [r2, #28]
 8001efe:	4b91      	ldr	r3, [pc, #580]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0e:	4b8e      	ldr	r3, [pc, #568]	; (8002148 <HAL_RCC_OscConfig+0x4f8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d118      	bne.n	8001f4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f1a:	4b8b      	ldr	r3, [pc, #556]	; (8002148 <HAL_RCC_OscConfig+0x4f8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a8a      	ldr	r2, [pc, #552]	; (8002148 <HAL_RCC_OscConfig+0x4f8>)
 8001f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f26:	f7ff fb8d 	bl	8001644 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2e:	f7ff fb89 	bl	8001644 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b64      	cmp	r3, #100	; 0x64
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e0fd      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f40:	4b81      	ldr	r3, [pc, #516]	; (8002148 <HAL_RCC_OscConfig+0x4f8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d106      	bne.n	8001f62 <HAL_RCC_OscConfig+0x312>
 8001f54:	4b7b      	ldr	r3, [pc, #492]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	4a7a      	ldr	r2, [pc, #488]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6213      	str	r3, [r2, #32]
 8001f60:	e02d      	b.n	8001fbe <HAL_RCC_OscConfig+0x36e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x334>
 8001f6a:	4b76      	ldr	r3, [pc, #472]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a75      	ldr	r2, [pc, #468]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	f023 0301 	bic.w	r3, r3, #1
 8001f74:	6213      	str	r3, [r2, #32]
 8001f76:	4b73      	ldr	r3, [pc, #460]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4a72      	ldr	r2, [pc, #456]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	f023 0304 	bic.w	r3, r3, #4
 8001f80:	6213      	str	r3, [r2, #32]
 8001f82:	e01c      	b.n	8001fbe <HAL_RCC_OscConfig+0x36e>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2b05      	cmp	r3, #5
 8001f8a:	d10c      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x356>
 8001f8c:	4b6d      	ldr	r3, [pc, #436]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4a6c      	ldr	r2, [pc, #432]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	6213      	str	r3, [r2, #32]
 8001f98:	4b6a      	ldr	r3, [pc, #424]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4a69      	ldr	r2, [pc, #420]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6213      	str	r3, [r2, #32]
 8001fa4:	e00b      	b.n	8001fbe <HAL_RCC_OscConfig+0x36e>
 8001fa6:	4b67      	ldr	r3, [pc, #412]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4a66      	ldr	r2, [pc, #408]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001fac:	f023 0301 	bic.w	r3, r3, #1
 8001fb0:	6213      	str	r3, [r2, #32]
 8001fb2:	4b64      	ldr	r3, [pc, #400]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4a63      	ldr	r2, [pc, #396]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	f023 0304 	bic.w	r3, r3, #4
 8001fbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d015      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc6:	f7ff fb3d 	bl	8001644 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fcc:	e00a      	b.n	8001fe4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f7ff fb39 	bl	8001644 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e0ab      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe4:	4b57      	ldr	r3, [pc, #348]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0ee      	beq.n	8001fce <HAL_RCC_OscConfig+0x37e>
 8001ff0:	e014      	b.n	800201c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff fb27 	bl	8001644 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff8:	e00a      	b.n	8002010 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffa:	f7ff fb23 	bl	8001644 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	f241 3288 	movw	r2, #5000	; 0x1388
 8002008:	4293      	cmp	r3, r2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e095      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002010:	4b4c      	ldr	r3, [pc, #304]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1ee      	bne.n	8001ffa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800201c:	7dfb      	ldrb	r3, [r7, #23]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d105      	bne.n	800202e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002022:	4b48      	ldr	r3, [pc, #288]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	4a47      	ldr	r2, [pc, #284]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8002028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800202c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 8081 	beq.w	800213a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002038:	4b42      	ldr	r3, [pc, #264]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 030c 	and.w	r3, r3, #12
 8002040:	2b08      	cmp	r3, #8
 8002042:	d061      	beq.n	8002108 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	2b02      	cmp	r3, #2
 800204a:	d146      	bne.n	80020da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204c:	4b3f      	ldr	r3, [pc, #252]	; (800214c <HAL_RCC_OscConfig+0x4fc>)
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7ff faf7 	bl	8001644 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205a:	f7ff faf3 	bl	8001644 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e067      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206c:	4b35      	ldr	r3, [pc, #212]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f0      	bne.n	800205a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002080:	d108      	bne.n	8002094 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002082:	4b30      	ldr	r3, [pc, #192]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	492d      	ldr	r1, [pc, #180]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8002090:	4313      	orrs	r3, r2
 8002092:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002094:	4b2b      	ldr	r3, [pc, #172]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a19      	ldr	r1, [r3, #32]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	430b      	orrs	r3, r1
 80020a6:	4927      	ldr	r1, [pc, #156]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ac:	4b27      	ldr	r3, [pc, #156]	; (800214c <HAL_RCC_OscConfig+0x4fc>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b2:	f7ff fac7 	bl	8001644 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ba:	f7ff fac3 	bl	8001644 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e037      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x46a>
 80020d8:	e02f      	b.n	800213a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020da:	4b1c      	ldr	r3, [pc, #112]	; (800214c <HAL_RCC_OscConfig+0x4fc>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff fab0 	bl	8001644 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e8:	f7ff faac 	bl	8001644 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e020      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x498>
 8002106:	e018      	b.n	800213a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e013      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	429a      	cmp	r2, r3
 8002126:	d106      	bne.n	8002136 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002132:	429a      	cmp	r2, r3
 8002134:	d001      	beq.n	800213a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000
 8002148:	40007000 	.word	0x40007000
 800214c:	42420060 	.word	0x42420060

08002150 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0d0      	b.n	8002306 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002164:	4b6a      	ldr	r3, [pc, #424]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d910      	bls.n	8002194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b67      	ldr	r3, [pc, #412]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 0207 	bic.w	r2, r3, #7
 800217a:	4965      	ldr	r1, [pc, #404]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b63      	ldr	r3, [pc, #396]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d001      	beq.n	8002194 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0b8      	b.n	8002306 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d020      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021ac:	4b59      	ldr	r3, [pc, #356]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4a58      	ldr	r2, [pc, #352]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021c4:	4b53      	ldr	r3, [pc, #332]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	4a52      	ldr	r2, [pc, #328]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d0:	4b50      	ldr	r3, [pc, #320]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	494d      	ldr	r1, [pc, #308]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d040      	beq.n	8002270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	4b47      	ldr	r3, [pc, #284]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d115      	bne.n	800222e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e07f      	b.n	8002306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d107      	bne.n	800221e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220e:	4b41      	ldr	r3, [pc, #260]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d109      	bne.n	800222e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e073      	b.n	8002306 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221e:	4b3d      	ldr	r3, [pc, #244]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e06b      	b.n	8002306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800222e:	4b39      	ldr	r3, [pc, #228]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f023 0203 	bic.w	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4936      	ldr	r1, [pc, #216]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002240:	f7ff fa00 	bl	8001644 <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002246:	e00a      	b.n	800225e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002248:	f7ff f9fc 	bl	8001644 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f241 3288 	movw	r2, #5000	; 0x1388
 8002256:	4293      	cmp	r3, r2
 8002258:	d901      	bls.n	800225e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e053      	b.n	8002306 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225e:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 020c 	and.w	r2, r3, #12
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	429a      	cmp	r2, r3
 800226e:	d1eb      	bne.n	8002248 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002270:	4b27      	ldr	r3, [pc, #156]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d210      	bcs.n	80022a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 0207 	bic.w	r2, r3, #7
 8002286:	4922      	ldr	r1, [pc, #136]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228e:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e032      	b.n	8002306 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4916      	ldr	r1, [pc, #88]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d009      	beq.n	80022de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ca:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	490e      	ldr	r1, [pc, #56]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022de:	f000 f821 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 80022e2:	4602      	mov	r2, r0
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	490a      	ldr	r1, [pc, #40]	; (8002318 <HAL_RCC_ClockConfig+0x1c8>)
 80022f0:	5ccb      	ldrb	r3, [r1, r3]
 80022f2:	fa22 f303 	lsr.w	r3, r2, r3
 80022f6:	4a09      	ldr	r2, [pc, #36]	; (800231c <HAL_RCC_ClockConfig+0x1cc>)
 80022f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_RCC_ClockConfig+0x1d0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff f95e 	bl	80015c0 <HAL_InitTick>

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40022000 	.word	0x40022000
 8002314:	40021000 	.word	0x40021000
 8002318:	08003fc0 	.word	0x08003fc0
 800231c:	20000088 	.word	0x20000088
 8002320:	2000008c 	.word	0x2000008c

08002324 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002324:	b490      	push	{r4, r7}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800232a:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800232c:	1d3c      	adds	r4, r7, #4
 800232e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002330:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002334:	f240 2301 	movw	r3, #513	; 0x201
 8002338:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800234e:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	2b04      	cmp	r3, #4
 800235c:	d002      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0x40>
 800235e:	2b08      	cmp	r3, #8
 8002360:	d003      	beq.n	800236a <HAL_RCC_GetSysClockFreq+0x46>
 8002362:	e02d      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002364:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002366:	623b      	str	r3, [r7, #32]
      break;
 8002368:	e02d      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	0c9b      	lsrs	r3, r3, #18
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002376:	4413      	add	r3, r2
 8002378:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800237c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d013      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	0c5b      	lsrs	r3, r3, #17
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002396:	4413      	add	r3, r2
 8002398:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800239c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a2:	fb02 f203 	mul.w	r2, r2, r3
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
 80023ae:	e004      	b.n	80023ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	4a0b      	ldr	r2, [pc, #44]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023b4:	fb02 f303 	mul.w	r3, r2, r3
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	623b      	str	r3, [r7, #32]
      break;
 80023be:	e002      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c2:	623b      	str	r3, [r7, #32]
      break;
 80023c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023c6:	6a3b      	ldr	r3, [r7, #32]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3728      	adds	r7, #40	; 0x28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc90      	pop	{r4, r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	08003fb0 	.word	0x08003fb0
 80023d8:	40021000 	.word	0x40021000
 80023dc:	007a1200 	.word	0x007a1200
 80023e0:	003d0900 	.word	0x003d0900

080023e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e8:	4b02      	ldr	r3, [pc, #8]	; (80023f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	20000088 	.word	0x20000088

080023f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023fc:	f7ff fff2 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 8002400:	4602      	mov	r2, r0
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	4903      	ldr	r1, [pc, #12]	; (800241c <HAL_RCC_GetPCLK1Freq+0x24>)
 800240e:	5ccb      	ldrb	r3, [r1, r3]
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002414:	4618      	mov	r0, r3
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40021000 	.word	0x40021000
 800241c:	08003fd0 	.word	0x08003fd0

08002420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002424:	f7ff ffde 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 8002428:	4602      	mov	r2, r0
 800242a:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	0adb      	lsrs	r3, r3, #11
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	4903      	ldr	r1, [pc, #12]	; (8002444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002436:	5ccb      	ldrb	r3, [r1, r3]
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800243c:	4618      	mov	r0, r3
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40021000 	.word	0x40021000
 8002444:	08003fd0 	.word	0x08003fd0

08002448 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <RCC_Delay+0x34>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <RCC_Delay+0x38>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	0a5b      	lsrs	r3, r3, #9
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002464:	bf00      	nop
  }
  while (Delay --);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1e5a      	subs	r2, r3, #1
 800246a:	60fa      	str	r2, [r7, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f9      	bne.n	8002464 <RCC_Delay+0x1c>
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr
 800247c:	20000088 	.word	0x20000088
 8002480:	10624dd3 	.word	0x10624dd3

08002484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e041      	b.n	800251a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe ff1c 	bl	80012e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3304      	adds	r3, #4
 80024c0:	4619      	mov	r1, r3
 80024c2:	4610      	mov	r0, r2
 80024c4:	f000 fc28 	bl	8002d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d001      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e03a      	b.n	80025b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a18      	ldr	r2, [pc, #96]	; (80025bc <HAL_TIM_Base_Start_IT+0x98>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d00e      	beq.n	800257c <HAL_TIM_Base_Start_IT+0x58>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002566:	d009      	beq.n	800257c <HAL_TIM_Base_Start_IT+0x58>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a14      	ldr	r2, [pc, #80]	; (80025c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d004      	beq.n	800257c <HAL_TIM_Base_Start_IT+0x58>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d111      	bne.n	80025a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b06      	cmp	r3, #6
 800258c:	d010      	beq.n	80025b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 0201 	orr.w	r2, r2, #1
 800259c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800259e:	e007      	b.n	80025b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	40012c00 	.word	0x40012c00
 80025c0:	40000400 	.word	0x40000400
 80025c4:	40000800 	.word	0x40000800

080025c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e041      	b.n	800265e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f839 	bl	8002666 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3304      	adds	r3, #4
 8002604:	4619      	mov	r1, r3
 8002606:	4610      	mov	r0, r2
 8002608:	f000 fb86 	bl	8002d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <HAL_TIM_PWM_Start+0x24>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	bf14      	ite	ne
 8002694:	2301      	movne	r3, #1
 8002696:	2300      	moveq	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	e022      	b.n	80026e2 <HAL_TIM_PWM_Start+0x6a>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d109      	bne.n	80026b6 <HAL_TIM_PWM_Start+0x3e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	bf14      	ite	ne
 80026ae:	2301      	movne	r3, #1
 80026b0:	2300      	moveq	r3, #0
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	e015      	b.n	80026e2 <HAL_TIM_PWM_Start+0x6a>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d109      	bne.n	80026d0 <HAL_TIM_PWM_Start+0x58>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	bf14      	ite	ne
 80026c8:	2301      	movne	r3, #1
 80026ca:	2300      	moveq	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	e008      	b.n	80026e2 <HAL_TIM_PWM_Start+0x6a>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b01      	cmp	r3, #1
 80026da:	bf14      	ite	ne
 80026dc:	2301      	movne	r3, #1
 80026de:	2300      	moveq	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e05e      	b.n	80027a8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d104      	bne.n	80026fa <HAL_TIM_PWM_Start+0x82>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026f8:	e013      	b.n	8002722 <HAL_TIM_PWM_Start+0xaa>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d104      	bne.n	800270a <HAL_TIM_PWM_Start+0x92>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002708:	e00b      	b.n	8002722 <HAL_TIM_PWM_Start+0xaa>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b08      	cmp	r3, #8
 800270e:	d104      	bne.n	800271a <HAL_TIM_PWM_Start+0xa2>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002718:	e003      	b.n	8002722 <HAL_TIM_PWM_Start+0xaa>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2202      	movs	r2, #2
 800271e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2201      	movs	r2, #1
 8002728:	6839      	ldr	r1, [r7, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f000 fd74 	bl	8003218 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a1e      	ldr	r2, [pc, #120]	; (80027b0 <HAL_TIM_PWM_Start+0x138>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d107      	bne.n	800274a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002748:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a18      	ldr	r2, [pc, #96]	; (80027b0 <HAL_TIM_PWM_Start+0x138>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d00e      	beq.n	8002772 <HAL_TIM_PWM_Start+0xfa>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275c:	d009      	beq.n	8002772 <HAL_TIM_PWM_Start+0xfa>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <HAL_TIM_PWM_Start+0x13c>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d004      	beq.n	8002772 <HAL_TIM_PWM_Start+0xfa>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <HAL_TIM_PWM_Start+0x140>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d111      	bne.n	8002796 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b06      	cmp	r3, #6
 8002782:	d010      	beq.n	80027a6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0201 	orr.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002794:	e007      	b.n	80027a6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0201 	orr.w	r2, r2, #1
 80027a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40012c00 	.word	0x40012c00
 80027b4:	40000400 	.word	0x40000400
 80027b8:	40000800 	.word	0x40000800

080027bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d122      	bne.n	8002818 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d11b      	bne.n	8002818 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0202 	mvn.w	r2, #2
 80027e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fa6f 	bl	8002ce2 <HAL_TIM_IC_CaptureCallback>
 8002804:	e005      	b.n	8002812 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fa62 	bl	8002cd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 fa71 	bl	8002cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b04      	cmp	r3, #4
 8002824:	d122      	bne.n	800286c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b04      	cmp	r3, #4
 8002832:	d11b      	bne.n	800286c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0204 	mvn.w	r2, #4
 800283c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2202      	movs	r2, #2
 8002842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fa45 	bl	8002ce2 <HAL_TIM_IC_CaptureCallback>
 8002858:	e005      	b.n	8002866 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fa38 	bl	8002cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 fa47 	bl	8002cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b08      	cmp	r3, #8
 8002878:	d122      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b08      	cmp	r3, #8
 8002886:	d11b      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0208 	mvn.w	r2, #8
 8002890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2204      	movs	r2, #4
 8002896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fa1b 	bl	8002ce2 <HAL_TIM_IC_CaptureCallback>
 80028ac:	e005      	b.n	80028ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 fa0e 	bl	8002cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 fa1d 	bl	8002cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b10      	cmp	r3, #16
 80028cc:	d122      	bne.n	8002914 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	2b10      	cmp	r3, #16
 80028da:	d11b      	bne.n	8002914 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0210 	mvn.w	r2, #16
 80028e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2208      	movs	r2, #8
 80028ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f9f1 	bl	8002ce2 <HAL_TIM_IC_CaptureCallback>
 8002900:	e005      	b.n	800290e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f9e4 	bl	8002cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f9f3 	bl	8002cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b01      	cmp	r3, #1
 8002920:	d10e      	bne.n	8002940 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b01      	cmp	r3, #1
 800292e:	d107      	bne.n	8002940 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0201 	mvn.w	r2, #1
 8002938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe fa8e 	bl	8000e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294a:	2b80      	cmp	r3, #128	; 0x80
 800294c:	d10e      	bne.n	800296c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002958:	2b80      	cmp	r3, #128	; 0x80
 800295a:	d107      	bne.n	800296c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fce1 	bl	800332e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	2b40      	cmp	r3, #64	; 0x40
 8002978:	d10e      	bne.n	8002998 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002984:	2b40      	cmp	r3, #64	; 0x40
 8002986:	d107      	bne.n	8002998 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f9b7 	bl	8002d06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	2b20      	cmp	r3, #32
 80029a4:	d10e      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f003 0320 	and.w	r3, r3, #32
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	d107      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f06f 0220 	mvn.w	r2, #32
 80029bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fcac 	bl	800331c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e0ac      	b.n	8002b40 <HAL_TIM_PWM_ConfigChannel+0x174>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b0c      	cmp	r3, #12
 80029f2:	f200 809f 	bhi.w	8002b34 <HAL_TIM_PWM_ConfigChannel+0x168>
 80029f6:	a201      	add	r2, pc, #4	; (adr r2, 80029fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80029f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fc:	08002a31 	.word	0x08002a31
 8002a00:	08002b35 	.word	0x08002b35
 8002a04:	08002b35 	.word	0x08002b35
 8002a08:	08002b35 	.word	0x08002b35
 8002a0c:	08002a71 	.word	0x08002a71
 8002a10:	08002b35 	.word	0x08002b35
 8002a14:	08002b35 	.word	0x08002b35
 8002a18:	08002b35 	.word	0x08002b35
 8002a1c:	08002ab3 	.word	0x08002ab3
 8002a20:	08002b35 	.word	0x08002b35
 8002a24:	08002b35 	.word	0x08002b35
 8002a28:	08002b35 	.word	0x08002b35
 8002a2c:	08002af3 	.word	0x08002af3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 f9d0 	bl	8002ddc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699a      	ldr	r2, [r3, #24]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0208 	orr.w	r2, r2, #8
 8002a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0204 	bic.w	r2, r2, #4
 8002a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6999      	ldr	r1, [r3, #24]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	691a      	ldr	r2, [r3, #16]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	619a      	str	r2, [r3, #24]
      break;
 8002a6e:	e062      	b.n	8002b36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 fa16 	bl	8002ea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6999      	ldr	r1, [r3, #24]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	021a      	lsls	r2, r3, #8
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	619a      	str	r2, [r3, #24]
      break;
 8002ab0:	e041      	b.n	8002b36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68b9      	ldr	r1, [r7, #8]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 fa5f 	bl	8002f7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	69da      	ldr	r2, [r3, #28]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0208 	orr.w	r2, r2, #8
 8002acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	69da      	ldr	r2, [r3, #28]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0204 	bic.w	r2, r2, #4
 8002adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	69d9      	ldr	r1, [r3, #28]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	61da      	str	r2, [r3, #28]
      break;
 8002af0:	e021      	b.n	8002b36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68b9      	ldr	r1, [r7, #8]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 faa9 	bl	8003050 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69da      	ldr	r2, [r3, #28]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	69d9      	ldr	r1, [r3, #28]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	021a      	lsls	r2, r3, #8
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	61da      	str	r2, [r3, #28]
      break;
 8002b32:	e000      	b.n	8002b36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002b34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_TIM_ConfigClockSource+0x18>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e0b3      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x180>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b98:	d03e      	beq.n	8002c18 <HAL_TIM_ConfigClockSource+0xd0>
 8002b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b9e:	f200 8087 	bhi.w	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba6:	f000 8085 	beq.w	8002cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8002baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bae:	d87f      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002bb0:	2b70      	cmp	r3, #112	; 0x70
 8002bb2:	d01a      	beq.n	8002bea <HAL_TIM_ConfigClockSource+0xa2>
 8002bb4:	2b70      	cmp	r3, #112	; 0x70
 8002bb6:	d87b      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002bb8:	2b60      	cmp	r3, #96	; 0x60
 8002bba:	d050      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x116>
 8002bbc:	2b60      	cmp	r3, #96	; 0x60
 8002bbe:	d877      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002bc0:	2b50      	cmp	r3, #80	; 0x50
 8002bc2:	d03c      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0xf6>
 8002bc4:	2b50      	cmp	r3, #80	; 0x50
 8002bc6:	d873      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002bc8:	2b40      	cmp	r3, #64	; 0x40
 8002bca:	d058      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x136>
 8002bcc:	2b40      	cmp	r3, #64	; 0x40
 8002bce:	d86f      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002bd0:	2b30      	cmp	r3, #48	; 0x30
 8002bd2:	d064      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x156>
 8002bd4:	2b30      	cmp	r3, #48	; 0x30
 8002bd6:	d86b      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d060      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x156>
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d867      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d05c      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x156>
 8002be4:	2b10      	cmp	r3, #16
 8002be6:	d05a      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002be8:	e062      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	6899      	ldr	r1, [r3, #8]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f000 faee 	bl	80031da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	609a      	str	r2, [r3, #8]
      break;
 8002c16:	e04e      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6899      	ldr	r1, [r3, #8]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f000 fad7 	bl	80031da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c3a:	609a      	str	r2, [r3, #8]
      break;
 8002c3c:	e03b      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6859      	ldr	r1, [r3, #4]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f000 fa4e 	bl	80030ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2150      	movs	r1, #80	; 0x50
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 faa5 	bl	80031a6 <TIM_ITRx_SetConfig>
      break;
 8002c5c:	e02b      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6859      	ldr	r1, [r3, #4]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f000 fa6c 	bl	8003148 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2160      	movs	r1, #96	; 0x60
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fa95 	bl	80031a6 <TIM_ITRx_SetConfig>
      break;
 8002c7c:	e01b      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6859      	ldr	r1, [r3, #4]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f000 fa2e 	bl	80030ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2140      	movs	r1, #64	; 0x40
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 fa85 	bl	80031a6 <TIM_ITRx_SetConfig>
      break;
 8002c9c:	e00b      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4610      	mov	r0, r2
 8002caa:	f000 fa7c 	bl	80031a6 <TIM_ITRx_SetConfig>
        break;
 8002cae:	e002      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cb0:	bf00      	nop
 8002cb2:	e000      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cb4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr

08002d06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a29      	ldr	r2, [pc, #164]	; (8002dd0 <TIM_Base_SetConfig+0xb8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00b      	beq.n	8002d48 <TIM_Base_SetConfig+0x30>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d36:	d007      	beq.n	8002d48 <TIM_Base_SetConfig+0x30>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a26      	ldr	r2, [pc, #152]	; (8002dd4 <TIM_Base_SetConfig+0xbc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d003      	beq.n	8002d48 <TIM_Base_SetConfig+0x30>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a25      	ldr	r2, [pc, #148]	; (8002dd8 <TIM_Base_SetConfig+0xc0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d108      	bne.n	8002d5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a1c      	ldr	r2, [pc, #112]	; (8002dd0 <TIM_Base_SetConfig+0xb8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00b      	beq.n	8002d7a <TIM_Base_SetConfig+0x62>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d68:	d007      	beq.n	8002d7a <TIM_Base_SetConfig+0x62>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a19      	ldr	r2, [pc, #100]	; (8002dd4 <TIM_Base_SetConfig+0xbc>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d003      	beq.n	8002d7a <TIM_Base_SetConfig+0x62>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a18      	ldr	r2, [pc, #96]	; (8002dd8 <TIM_Base_SetConfig+0xc0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d108      	bne.n	8002d8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <TIM_Base_SetConfig+0xb8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d103      	bne.n	8002dc0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	615a      	str	r2, [r3, #20]
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr
 8002dd0:	40012c00 	.word	0x40012c00
 8002dd4:	40000400 	.word	0x40000400
 8002dd8:	40000800 	.word	0x40000800

08002ddc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	f023 0201 	bic.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 0303 	bic.w	r3, r3, #3
 8002e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f023 0302 	bic.w	r3, r3, #2
 8002e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a1c      	ldr	r2, [pc, #112]	; (8002ea4 <TIM_OC1_SetConfig+0xc8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d10c      	bne.n	8002e52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f023 0308 	bic.w	r3, r3, #8
 8002e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f023 0304 	bic.w	r3, r3, #4
 8002e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a13      	ldr	r2, [pc, #76]	; (8002ea4 <TIM_OC1_SetConfig+0xc8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d111      	bne.n	8002e7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	621a      	str	r2, [r3, #32]
}
 8002e98:	bf00      	nop
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40012c00 	.word	0x40012c00

08002ea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f023 0210 	bic.w	r2, r3, #16
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f023 0320 	bic.w	r3, r3, #32
 8002ef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <TIM_OC2_SetConfig+0xd0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d10d      	bne.n	8002f24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a14      	ldr	r2, [pc, #80]	; (8002f78 <TIM_OC2_SetConfig+0xd0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d113      	bne.n	8002f54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	621a      	str	r2, [r3, #32]
}
 8002f6e:	bf00      	nop
 8002f70:	371c      	adds	r7, #28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	40012c00 	.word	0x40012c00

08002f7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 0303 	bic.w	r3, r3, #3
 8002fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	021b      	lsls	r3, r3, #8
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a1d      	ldr	r2, [pc, #116]	; (800304c <TIM_OC3_SetConfig+0xd0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d10d      	bne.n	8002ff6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a14      	ldr	r2, [pc, #80]	; (800304c <TIM_OC3_SetConfig+0xd0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d113      	bne.n	8003026 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800300c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	621a      	str	r2, [r3, #32]
}
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40012c00 	.word	0x40012c00

08003050 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800307e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800309a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	031b      	lsls	r3, r3, #12
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a0f      	ldr	r2, [pc, #60]	; (80030e8 <TIM_OC4_SetConfig+0x98>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d109      	bne.n	80030c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	019b      	lsls	r3, r3, #6
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	621a      	str	r2, [r3, #32]
}
 80030de:	bf00      	nop
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr
 80030e8:	40012c00 	.word	0x40012c00

080030ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	f023 0201 	bic.w	r2, r3, #1
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f023 030a 	bic.w	r3, r3, #10
 8003128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	621a      	str	r2, [r3, #32]
}
 800313e:	bf00      	nop
 8003140:	371c      	adds	r7, #28
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	f023 0210 	bic.w	r2, r3, #16
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003172:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	031b      	lsls	r3, r3, #12
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003184:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	621a      	str	r2, [r3, #32]
}
 800319c:	bf00      	nop
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr

080031a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b085      	sub	sp, #20
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f043 0307 	orr.w	r3, r3, #7
 80031c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	609a      	str	r2, [r3, #8]
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr

080031da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031da:	b480      	push	{r7}
 80031dc:	b087      	sub	sp, #28
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
 80031e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	021a      	lsls	r2, r3, #8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	431a      	orrs	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4313      	orrs	r3, r2
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	609a      	str	r2, [r3, #8]
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr

08003218 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2201      	movs	r2, #1
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a1a      	ldr	r2, [r3, #32]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	43db      	mvns	r3, r3
 800323a:	401a      	ands	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a1a      	ldr	r2, [r3, #32]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f003 031f 	and.w	r3, r3, #31
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	fa01 f303 	lsl.w	r3, r1, r3
 8003250:	431a      	orrs	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	621a      	str	r2, [r3, #32]
}
 8003256:	bf00      	nop
 8003258:	371c      	adds	r7, #28
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003274:	2302      	movs	r3, #2
 8003276:	e046      	b.n	8003306 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a16      	ldr	r2, [pc, #88]	; (8003310 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00e      	beq.n	80032da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c4:	d009      	beq.n	80032da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a12      	ldr	r2, [pc, #72]	; (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d004      	beq.n	80032da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a10      	ldr	r2, [pc, #64]	; (8003318 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d10c      	bne.n	80032f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr
 8003310:	40012c00 	.word	0x40012c00
 8003314:	40000400 	.word	0x40000400
 8003318:	40000800 	.word	0x40000800

0800331c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e03f      	b.n	80033d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fe f830 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2224      	movs	r2, #36	; 0x24
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f905 	bl	8003594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695a      	ldr	r2, [r3, #20]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b08a      	sub	sp, #40	; 0x28
 80033de:	af02      	add	r7, sp, #8
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	603b      	str	r3, [r7, #0]
 80033e6:	4613      	mov	r3, r2
 80033e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d17c      	bne.n	80034f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <HAL_UART_Transmit+0x2c>
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e075      	b.n	80034f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_UART_Transmit+0x3e>
 8003414:	2302      	movs	r3, #2
 8003416:	e06e      	b.n	80034f6 <HAL_UART_Transmit+0x11c>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2221      	movs	r2, #33	; 0x21
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800342e:	f7fe f909 	bl	8001644 <HAL_GetTick>
 8003432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	88fa      	ldrh	r2, [r7, #6]
 8003438:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	88fa      	ldrh	r2, [r7, #6]
 800343e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003448:	d108      	bne.n	800345c <HAL_UART_Transmit+0x82>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d104      	bne.n	800345c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	e003      	b.n	8003464 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003460:	2300      	movs	r3, #0
 8003462:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800346c:	e02a      	b.n	80034c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2200      	movs	r2, #0
 8003476:	2180      	movs	r1, #128	; 0x80
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 f840 	bl	80034fe <UART_WaitOnFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e036      	b.n	80034f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10b      	bne.n	80034a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	461a      	mov	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800349c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	3302      	adds	r3, #2
 80034a2:	61bb      	str	r3, [r7, #24]
 80034a4:	e007      	b.n	80034b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	781a      	ldrb	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	3301      	adds	r3, #1
 80034b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1cf      	bne.n	800346e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2200      	movs	r2, #0
 80034d6:	2140      	movs	r1, #64	; 0x40
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f810 	bl	80034fe <UART_WaitOnFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e006      	b.n	80034f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	e000      	b.n	80034f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034f4:	2302      	movs	r3, #2
  }
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3720      	adds	r7, #32
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	603b      	str	r3, [r7, #0]
 800350a:	4613      	mov	r3, r2
 800350c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800350e:	e02c      	b.n	800356a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003516:	d028      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d007      	beq.n	800352e <UART_WaitOnFlagUntilTimeout+0x30>
 800351e:	f7fe f891 	bl	8001644 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	429a      	cmp	r2, r3
 800352c:	d21d      	bcs.n	800356a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800353c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695a      	ldr	r2, [r3, #20]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0201 	bic.w	r2, r2, #1
 800354c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e00f      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4013      	ands	r3, r2
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	429a      	cmp	r2, r3
 8003578:	bf0c      	ite	eq
 800357a:	2301      	moveq	r3, #1
 800357c:	2300      	movne	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	429a      	cmp	r2, r3
 8003586:	d0c3      	beq.n	8003510 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035ce:	f023 030c 	bic.w	r3, r3, #12
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6812      	ldr	r2, [r2, #0]
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	430b      	orrs	r3, r1
 80035da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699a      	ldr	r2, [r3, #24]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a2c      	ldr	r2, [pc, #176]	; (80036a8 <UART_SetConfig+0x114>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d103      	bne.n	8003604 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035fc:	f7fe ff10 	bl	8002420 <HAL_RCC_GetPCLK2Freq>
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	e002      	b.n	800360a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003604:	f7fe fef8 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8003608:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	009a      	lsls	r2, r3, #2
 8003614:	441a      	add	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003620:	4a22      	ldr	r2, [pc, #136]	; (80036ac <UART_SetConfig+0x118>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	0119      	lsls	r1, r3, #4
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	009a      	lsls	r2, r3, #2
 8003634:	441a      	add	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003640:	4b1a      	ldr	r3, [pc, #104]	; (80036ac <UART_SetConfig+0x118>)
 8003642:	fba3 0302 	umull	r0, r3, r3, r2
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	2064      	movs	r0, #100	; 0x64
 800364a:	fb00 f303 	mul.w	r3, r0, r3
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	3332      	adds	r3, #50	; 0x32
 8003654:	4a15      	ldr	r2, [pc, #84]	; (80036ac <UART_SetConfig+0x118>)
 8003656:	fba2 2303 	umull	r2, r3, r2, r3
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003660:	4419      	add	r1, r3
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	009a      	lsls	r2, r3, #2
 800366c:	441a      	add	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	fbb2 f2f3 	udiv	r2, r2, r3
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <UART_SetConfig+0x118>)
 800367a:	fba3 0302 	umull	r0, r3, r3, r2
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	2064      	movs	r0, #100	; 0x64
 8003682:	fb00 f303 	mul.w	r3, r0, r3
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	3332      	adds	r3, #50	; 0x32
 800368c:	4a07      	ldr	r2, [pc, #28]	; (80036ac <UART_SetConfig+0x118>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	095b      	lsrs	r3, r3, #5
 8003694:	f003 020f 	and.w	r2, r3, #15
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	440a      	add	r2, r1
 800369e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036a0:	bf00      	nop
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40013800 	.word	0x40013800
 80036ac:	51eb851f 	.word	0x51eb851f

080036b0 <__errno>:
 80036b0:	4b01      	ldr	r3, [pc, #4]	; (80036b8 <__errno+0x8>)
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000094 	.word	0x20000094

080036bc <__libc_init_array>:
 80036bc:	b570      	push	{r4, r5, r6, lr}
 80036be:	2600      	movs	r6, #0
 80036c0:	4d0c      	ldr	r5, [pc, #48]	; (80036f4 <__libc_init_array+0x38>)
 80036c2:	4c0d      	ldr	r4, [pc, #52]	; (80036f8 <__libc_init_array+0x3c>)
 80036c4:	1b64      	subs	r4, r4, r5
 80036c6:	10a4      	asrs	r4, r4, #2
 80036c8:	42a6      	cmp	r6, r4
 80036ca:	d109      	bne.n	80036e0 <__libc_init_array+0x24>
 80036cc:	f000 fc5c 	bl	8003f88 <_init>
 80036d0:	2600      	movs	r6, #0
 80036d2:	4d0a      	ldr	r5, [pc, #40]	; (80036fc <__libc_init_array+0x40>)
 80036d4:	4c0a      	ldr	r4, [pc, #40]	; (8003700 <__libc_init_array+0x44>)
 80036d6:	1b64      	subs	r4, r4, r5
 80036d8:	10a4      	asrs	r4, r4, #2
 80036da:	42a6      	cmp	r6, r4
 80036dc:	d105      	bne.n	80036ea <__libc_init_array+0x2e>
 80036de:	bd70      	pop	{r4, r5, r6, pc}
 80036e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e4:	4798      	blx	r3
 80036e6:	3601      	adds	r6, #1
 80036e8:	e7ee      	b.n	80036c8 <__libc_init_array+0xc>
 80036ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ee:	4798      	blx	r3
 80036f0:	3601      	adds	r6, #1
 80036f2:	e7f2      	b.n	80036da <__libc_init_array+0x1e>
 80036f4:	0800400c 	.word	0x0800400c
 80036f8:	0800400c 	.word	0x0800400c
 80036fc:	0800400c 	.word	0x0800400c
 8003700:	08004010 	.word	0x08004010

08003704 <memset>:
 8003704:	4603      	mov	r3, r0
 8003706:	4402      	add	r2, r0
 8003708:	4293      	cmp	r3, r2
 800370a:	d100      	bne.n	800370e <memset+0xa>
 800370c:	4770      	bx	lr
 800370e:	f803 1b01 	strb.w	r1, [r3], #1
 8003712:	e7f9      	b.n	8003708 <memset+0x4>

08003714 <siprintf>:
 8003714:	b40e      	push	{r1, r2, r3}
 8003716:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800371a:	b500      	push	{lr}
 800371c:	b09c      	sub	sp, #112	; 0x70
 800371e:	ab1d      	add	r3, sp, #116	; 0x74
 8003720:	9002      	str	r0, [sp, #8]
 8003722:	9006      	str	r0, [sp, #24]
 8003724:	9107      	str	r1, [sp, #28]
 8003726:	9104      	str	r1, [sp, #16]
 8003728:	4808      	ldr	r0, [pc, #32]	; (800374c <siprintf+0x38>)
 800372a:	4909      	ldr	r1, [pc, #36]	; (8003750 <siprintf+0x3c>)
 800372c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003730:	9105      	str	r1, [sp, #20]
 8003732:	6800      	ldr	r0, [r0, #0]
 8003734:	a902      	add	r1, sp, #8
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	f000 f868 	bl	800380c <_svfiprintf_r>
 800373c:	2200      	movs	r2, #0
 800373e:	9b02      	ldr	r3, [sp, #8]
 8003740:	701a      	strb	r2, [r3, #0]
 8003742:	b01c      	add	sp, #112	; 0x70
 8003744:	f85d eb04 	ldr.w	lr, [sp], #4
 8003748:	b003      	add	sp, #12
 800374a:	4770      	bx	lr
 800374c:	20000094 	.word	0x20000094
 8003750:	ffff0208 	.word	0xffff0208

08003754 <__ssputs_r>:
 8003754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003758:	688e      	ldr	r6, [r1, #8]
 800375a:	4682      	mov	sl, r0
 800375c:	429e      	cmp	r6, r3
 800375e:	460c      	mov	r4, r1
 8003760:	4690      	mov	r8, r2
 8003762:	461f      	mov	r7, r3
 8003764:	d838      	bhi.n	80037d8 <__ssputs_r+0x84>
 8003766:	898a      	ldrh	r2, [r1, #12]
 8003768:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800376c:	d032      	beq.n	80037d4 <__ssputs_r+0x80>
 800376e:	6825      	ldr	r5, [r4, #0]
 8003770:	6909      	ldr	r1, [r1, #16]
 8003772:	3301      	adds	r3, #1
 8003774:	eba5 0901 	sub.w	r9, r5, r1
 8003778:	6965      	ldr	r5, [r4, #20]
 800377a:	444b      	add	r3, r9
 800377c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003780:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003784:	106d      	asrs	r5, r5, #1
 8003786:	429d      	cmp	r5, r3
 8003788:	bf38      	it	cc
 800378a:	461d      	movcc	r5, r3
 800378c:	0553      	lsls	r3, r2, #21
 800378e:	d531      	bpl.n	80037f4 <__ssputs_r+0xa0>
 8003790:	4629      	mov	r1, r5
 8003792:	f000 fb53 	bl	8003e3c <_malloc_r>
 8003796:	4606      	mov	r6, r0
 8003798:	b950      	cbnz	r0, 80037b0 <__ssputs_r+0x5c>
 800379a:	230c      	movs	r3, #12
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	f8ca 3000 	str.w	r3, [sl]
 80037a4:	89a3      	ldrh	r3, [r4, #12]
 80037a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037aa:	81a3      	strh	r3, [r4, #12]
 80037ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b0:	464a      	mov	r2, r9
 80037b2:	6921      	ldr	r1, [r4, #16]
 80037b4:	f000 face 	bl	8003d54 <memcpy>
 80037b8:	89a3      	ldrh	r3, [r4, #12]
 80037ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80037be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c2:	81a3      	strh	r3, [r4, #12]
 80037c4:	6126      	str	r6, [r4, #16]
 80037c6:	444e      	add	r6, r9
 80037c8:	6026      	str	r6, [r4, #0]
 80037ca:	463e      	mov	r6, r7
 80037cc:	6165      	str	r5, [r4, #20]
 80037ce:	eba5 0509 	sub.w	r5, r5, r9
 80037d2:	60a5      	str	r5, [r4, #8]
 80037d4:	42be      	cmp	r6, r7
 80037d6:	d900      	bls.n	80037da <__ssputs_r+0x86>
 80037d8:	463e      	mov	r6, r7
 80037da:	4632      	mov	r2, r6
 80037dc:	4641      	mov	r1, r8
 80037de:	6820      	ldr	r0, [r4, #0]
 80037e0:	f000 fac6 	bl	8003d70 <memmove>
 80037e4:	68a3      	ldr	r3, [r4, #8]
 80037e6:	6822      	ldr	r2, [r4, #0]
 80037e8:	1b9b      	subs	r3, r3, r6
 80037ea:	4432      	add	r2, r6
 80037ec:	2000      	movs	r0, #0
 80037ee:	60a3      	str	r3, [r4, #8]
 80037f0:	6022      	str	r2, [r4, #0]
 80037f2:	e7db      	b.n	80037ac <__ssputs_r+0x58>
 80037f4:	462a      	mov	r2, r5
 80037f6:	f000 fb7b 	bl	8003ef0 <_realloc_r>
 80037fa:	4606      	mov	r6, r0
 80037fc:	2800      	cmp	r0, #0
 80037fe:	d1e1      	bne.n	80037c4 <__ssputs_r+0x70>
 8003800:	4650      	mov	r0, sl
 8003802:	6921      	ldr	r1, [r4, #16]
 8003804:	f000 face 	bl	8003da4 <_free_r>
 8003808:	e7c7      	b.n	800379a <__ssputs_r+0x46>
	...

0800380c <_svfiprintf_r>:
 800380c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003810:	4698      	mov	r8, r3
 8003812:	898b      	ldrh	r3, [r1, #12]
 8003814:	4607      	mov	r7, r0
 8003816:	061b      	lsls	r3, r3, #24
 8003818:	460d      	mov	r5, r1
 800381a:	4614      	mov	r4, r2
 800381c:	b09d      	sub	sp, #116	; 0x74
 800381e:	d50e      	bpl.n	800383e <_svfiprintf_r+0x32>
 8003820:	690b      	ldr	r3, [r1, #16]
 8003822:	b963      	cbnz	r3, 800383e <_svfiprintf_r+0x32>
 8003824:	2140      	movs	r1, #64	; 0x40
 8003826:	f000 fb09 	bl	8003e3c <_malloc_r>
 800382a:	6028      	str	r0, [r5, #0]
 800382c:	6128      	str	r0, [r5, #16]
 800382e:	b920      	cbnz	r0, 800383a <_svfiprintf_r+0x2e>
 8003830:	230c      	movs	r3, #12
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	f04f 30ff 	mov.w	r0, #4294967295
 8003838:	e0d1      	b.n	80039de <_svfiprintf_r+0x1d2>
 800383a:	2340      	movs	r3, #64	; 0x40
 800383c:	616b      	str	r3, [r5, #20]
 800383e:	2300      	movs	r3, #0
 8003840:	9309      	str	r3, [sp, #36]	; 0x24
 8003842:	2320      	movs	r3, #32
 8003844:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003848:	2330      	movs	r3, #48	; 0x30
 800384a:	f04f 0901 	mov.w	r9, #1
 800384e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003852:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80039f8 <_svfiprintf_r+0x1ec>
 8003856:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800385a:	4623      	mov	r3, r4
 800385c:	469a      	mov	sl, r3
 800385e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003862:	b10a      	cbz	r2, 8003868 <_svfiprintf_r+0x5c>
 8003864:	2a25      	cmp	r2, #37	; 0x25
 8003866:	d1f9      	bne.n	800385c <_svfiprintf_r+0x50>
 8003868:	ebba 0b04 	subs.w	fp, sl, r4
 800386c:	d00b      	beq.n	8003886 <_svfiprintf_r+0x7a>
 800386e:	465b      	mov	r3, fp
 8003870:	4622      	mov	r2, r4
 8003872:	4629      	mov	r1, r5
 8003874:	4638      	mov	r0, r7
 8003876:	f7ff ff6d 	bl	8003754 <__ssputs_r>
 800387a:	3001      	adds	r0, #1
 800387c:	f000 80aa 	beq.w	80039d4 <_svfiprintf_r+0x1c8>
 8003880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003882:	445a      	add	r2, fp
 8003884:	9209      	str	r2, [sp, #36]	; 0x24
 8003886:	f89a 3000 	ldrb.w	r3, [sl]
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 80a2 	beq.w	80039d4 <_svfiprintf_r+0x1c8>
 8003890:	2300      	movs	r3, #0
 8003892:	f04f 32ff 	mov.w	r2, #4294967295
 8003896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800389a:	f10a 0a01 	add.w	sl, sl, #1
 800389e:	9304      	str	r3, [sp, #16]
 80038a0:	9307      	str	r3, [sp, #28]
 80038a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038a6:	931a      	str	r3, [sp, #104]	; 0x68
 80038a8:	4654      	mov	r4, sl
 80038aa:	2205      	movs	r2, #5
 80038ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038b0:	4851      	ldr	r0, [pc, #324]	; (80039f8 <_svfiprintf_r+0x1ec>)
 80038b2:	f000 fa41 	bl	8003d38 <memchr>
 80038b6:	9a04      	ldr	r2, [sp, #16]
 80038b8:	b9d8      	cbnz	r0, 80038f2 <_svfiprintf_r+0xe6>
 80038ba:	06d0      	lsls	r0, r2, #27
 80038bc:	bf44      	itt	mi
 80038be:	2320      	movmi	r3, #32
 80038c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038c4:	0711      	lsls	r1, r2, #28
 80038c6:	bf44      	itt	mi
 80038c8:	232b      	movmi	r3, #43	; 0x2b
 80038ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038ce:	f89a 3000 	ldrb.w	r3, [sl]
 80038d2:	2b2a      	cmp	r3, #42	; 0x2a
 80038d4:	d015      	beq.n	8003902 <_svfiprintf_r+0xf6>
 80038d6:	4654      	mov	r4, sl
 80038d8:	2000      	movs	r0, #0
 80038da:	f04f 0c0a 	mov.w	ip, #10
 80038de:	9a07      	ldr	r2, [sp, #28]
 80038e0:	4621      	mov	r1, r4
 80038e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038e6:	3b30      	subs	r3, #48	; 0x30
 80038e8:	2b09      	cmp	r3, #9
 80038ea:	d94e      	bls.n	800398a <_svfiprintf_r+0x17e>
 80038ec:	b1b0      	cbz	r0, 800391c <_svfiprintf_r+0x110>
 80038ee:	9207      	str	r2, [sp, #28]
 80038f0:	e014      	b.n	800391c <_svfiprintf_r+0x110>
 80038f2:	eba0 0308 	sub.w	r3, r0, r8
 80038f6:	fa09 f303 	lsl.w	r3, r9, r3
 80038fa:	4313      	orrs	r3, r2
 80038fc:	46a2      	mov	sl, r4
 80038fe:	9304      	str	r3, [sp, #16]
 8003900:	e7d2      	b.n	80038a8 <_svfiprintf_r+0x9c>
 8003902:	9b03      	ldr	r3, [sp, #12]
 8003904:	1d19      	adds	r1, r3, #4
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	9103      	str	r1, [sp, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	bfbb      	ittet	lt
 800390e:	425b      	neglt	r3, r3
 8003910:	f042 0202 	orrlt.w	r2, r2, #2
 8003914:	9307      	strge	r3, [sp, #28]
 8003916:	9307      	strlt	r3, [sp, #28]
 8003918:	bfb8      	it	lt
 800391a:	9204      	strlt	r2, [sp, #16]
 800391c:	7823      	ldrb	r3, [r4, #0]
 800391e:	2b2e      	cmp	r3, #46	; 0x2e
 8003920:	d10c      	bne.n	800393c <_svfiprintf_r+0x130>
 8003922:	7863      	ldrb	r3, [r4, #1]
 8003924:	2b2a      	cmp	r3, #42	; 0x2a
 8003926:	d135      	bne.n	8003994 <_svfiprintf_r+0x188>
 8003928:	9b03      	ldr	r3, [sp, #12]
 800392a:	3402      	adds	r4, #2
 800392c:	1d1a      	adds	r2, r3, #4
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	9203      	str	r2, [sp, #12]
 8003932:	2b00      	cmp	r3, #0
 8003934:	bfb8      	it	lt
 8003936:	f04f 33ff 	movlt.w	r3, #4294967295
 800393a:	9305      	str	r3, [sp, #20]
 800393c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003a08 <_svfiprintf_r+0x1fc>
 8003940:	2203      	movs	r2, #3
 8003942:	4650      	mov	r0, sl
 8003944:	7821      	ldrb	r1, [r4, #0]
 8003946:	f000 f9f7 	bl	8003d38 <memchr>
 800394a:	b140      	cbz	r0, 800395e <_svfiprintf_r+0x152>
 800394c:	2340      	movs	r3, #64	; 0x40
 800394e:	eba0 000a 	sub.w	r0, r0, sl
 8003952:	fa03 f000 	lsl.w	r0, r3, r0
 8003956:	9b04      	ldr	r3, [sp, #16]
 8003958:	3401      	adds	r4, #1
 800395a:	4303      	orrs	r3, r0
 800395c:	9304      	str	r3, [sp, #16]
 800395e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003962:	2206      	movs	r2, #6
 8003964:	4825      	ldr	r0, [pc, #148]	; (80039fc <_svfiprintf_r+0x1f0>)
 8003966:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800396a:	f000 f9e5 	bl	8003d38 <memchr>
 800396e:	2800      	cmp	r0, #0
 8003970:	d038      	beq.n	80039e4 <_svfiprintf_r+0x1d8>
 8003972:	4b23      	ldr	r3, [pc, #140]	; (8003a00 <_svfiprintf_r+0x1f4>)
 8003974:	bb1b      	cbnz	r3, 80039be <_svfiprintf_r+0x1b2>
 8003976:	9b03      	ldr	r3, [sp, #12]
 8003978:	3307      	adds	r3, #7
 800397a:	f023 0307 	bic.w	r3, r3, #7
 800397e:	3308      	adds	r3, #8
 8003980:	9303      	str	r3, [sp, #12]
 8003982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003984:	4433      	add	r3, r6
 8003986:	9309      	str	r3, [sp, #36]	; 0x24
 8003988:	e767      	b.n	800385a <_svfiprintf_r+0x4e>
 800398a:	460c      	mov	r4, r1
 800398c:	2001      	movs	r0, #1
 800398e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003992:	e7a5      	b.n	80038e0 <_svfiprintf_r+0xd4>
 8003994:	2300      	movs	r3, #0
 8003996:	f04f 0c0a 	mov.w	ip, #10
 800399a:	4619      	mov	r1, r3
 800399c:	3401      	adds	r4, #1
 800399e:	9305      	str	r3, [sp, #20]
 80039a0:	4620      	mov	r0, r4
 80039a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039a6:	3a30      	subs	r2, #48	; 0x30
 80039a8:	2a09      	cmp	r2, #9
 80039aa:	d903      	bls.n	80039b4 <_svfiprintf_r+0x1a8>
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0c5      	beq.n	800393c <_svfiprintf_r+0x130>
 80039b0:	9105      	str	r1, [sp, #20]
 80039b2:	e7c3      	b.n	800393c <_svfiprintf_r+0x130>
 80039b4:	4604      	mov	r4, r0
 80039b6:	2301      	movs	r3, #1
 80039b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80039bc:	e7f0      	b.n	80039a0 <_svfiprintf_r+0x194>
 80039be:	ab03      	add	r3, sp, #12
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	462a      	mov	r2, r5
 80039c4:	4638      	mov	r0, r7
 80039c6:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <_svfiprintf_r+0x1f8>)
 80039c8:	a904      	add	r1, sp, #16
 80039ca:	f3af 8000 	nop.w
 80039ce:	1c42      	adds	r2, r0, #1
 80039d0:	4606      	mov	r6, r0
 80039d2:	d1d6      	bne.n	8003982 <_svfiprintf_r+0x176>
 80039d4:	89ab      	ldrh	r3, [r5, #12]
 80039d6:	065b      	lsls	r3, r3, #25
 80039d8:	f53f af2c 	bmi.w	8003834 <_svfiprintf_r+0x28>
 80039dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039de:	b01d      	add	sp, #116	; 0x74
 80039e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039e4:	ab03      	add	r3, sp, #12
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	462a      	mov	r2, r5
 80039ea:	4638      	mov	r0, r7
 80039ec:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <_svfiprintf_r+0x1f8>)
 80039ee:	a904      	add	r1, sp, #16
 80039f0:	f000 f87c 	bl	8003aec <_printf_i>
 80039f4:	e7eb      	b.n	80039ce <_svfiprintf_r+0x1c2>
 80039f6:	bf00      	nop
 80039f8:	08003fd8 	.word	0x08003fd8
 80039fc:	08003fe2 	.word	0x08003fe2
 8003a00:	00000000 	.word	0x00000000
 8003a04:	08003755 	.word	0x08003755
 8003a08:	08003fde 	.word	0x08003fde

08003a0c <_printf_common>:
 8003a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a10:	4616      	mov	r6, r2
 8003a12:	4699      	mov	r9, r3
 8003a14:	688a      	ldr	r2, [r1, #8]
 8003a16:	690b      	ldr	r3, [r1, #16]
 8003a18:	4607      	mov	r7, r0
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	bfb8      	it	lt
 8003a1e:	4613      	movlt	r3, r2
 8003a20:	6033      	str	r3, [r6, #0]
 8003a22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a26:	460c      	mov	r4, r1
 8003a28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a2c:	b10a      	cbz	r2, 8003a32 <_printf_common+0x26>
 8003a2e:	3301      	adds	r3, #1
 8003a30:	6033      	str	r3, [r6, #0]
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	0699      	lsls	r1, r3, #26
 8003a36:	bf42      	ittt	mi
 8003a38:	6833      	ldrmi	r3, [r6, #0]
 8003a3a:	3302      	addmi	r3, #2
 8003a3c:	6033      	strmi	r3, [r6, #0]
 8003a3e:	6825      	ldr	r5, [r4, #0]
 8003a40:	f015 0506 	ands.w	r5, r5, #6
 8003a44:	d106      	bne.n	8003a54 <_printf_common+0x48>
 8003a46:	f104 0a19 	add.w	sl, r4, #25
 8003a4a:	68e3      	ldr	r3, [r4, #12]
 8003a4c:	6832      	ldr	r2, [r6, #0]
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	42ab      	cmp	r3, r5
 8003a52:	dc28      	bgt.n	8003aa6 <_printf_common+0x9a>
 8003a54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a58:	1e13      	subs	r3, r2, #0
 8003a5a:	6822      	ldr	r2, [r4, #0]
 8003a5c:	bf18      	it	ne
 8003a5e:	2301      	movne	r3, #1
 8003a60:	0692      	lsls	r2, r2, #26
 8003a62:	d42d      	bmi.n	8003ac0 <_printf_common+0xb4>
 8003a64:	4649      	mov	r1, r9
 8003a66:	4638      	mov	r0, r7
 8003a68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a6c:	47c0      	blx	r8
 8003a6e:	3001      	adds	r0, #1
 8003a70:	d020      	beq.n	8003ab4 <_printf_common+0xa8>
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	68e5      	ldr	r5, [r4, #12]
 8003a76:	f003 0306 	and.w	r3, r3, #6
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	bf18      	it	ne
 8003a7e:	2500      	movne	r5, #0
 8003a80:	6832      	ldr	r2, [r6, #0]
 8003a82:	f04f 0600 	mov.w	r6, #0
 8003a86:	68a3      	ldr	r3, [r4, #8]
 8003a88:	bf08      	it	eq
 8003a8a:	1aad      	subeq	r5, r5, r2
 8003a8c:	6922      	ldr	r2, [r4, #16]
 8003a8e:	bf08      	it	eq
 8003a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a94:	4293      	cmp	r3, r2
 8003a96:	bfc4      	itt	gt
 8003a98:	1a9b      	subgt	r3, r3, r2
 8003a9a:	18ed      	addgt	r5, r5, r3
 8003a9c:	341a      	adds	r4, #26
 8003a9e:	42b5      	cmp	r5, r6
 8003aa0:	d11a      	bne.n	8003ad8 <_printf_common+0xcc>
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	e008      	b.n	8003ab8 <_printf_common+0xac>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	4652      	mov	r2, sl
 8003aaa:	4649      	mov	r1, r9
 8003aac:	4638      	mov	r0, r7
 8003aae:	47c0      	blx	r8
 8003ab0:	3001      	adds	r0, #1
 8003ab2:	d103      	bne.n	8003abc <_printf_common+0xb0>
 8003ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003abc:	3501      	adds	r5, #1
 8003abe:	e7c4      	b.n	8003a4a <_printf_common+0x3e>
 8003ac0:	2030      	movs	r0, #48	; 0x30
 8003ac2:	18e1      	adds	r1, r4, r3
 8003ac4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ace:	4422      	add	r2, r4
 8003ad0:	3302      	adds	r3, #2
 8003ad2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ad6:	e7c5      	b.n	8003a64 <_printf_common+0x58>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	4622      	mov	r2, r4
 8003adc:	4649      	mov	r1, r9
 8003ade:	4638      	mov	r0, r7
 8003ae0:	47c0      	blx	r8
 8003ae2:	3001      	adds	r0, #1
 8003ae4:	d0e6      	beq.n	8003ab4 <_printf_common+0xa8>
 8003ae6:	3601      	adds	r6, #1
 8003ae8:	e7d9      	b.n	8003a9e <_printf_common+0x92>
	...

08003aec <_printf_i>:
 8003aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003af0:	460c      	mov	r4, r1
 8003af2:	7e27      	ldrb	r7, [r4, #24]
 8003af4:	4691      	mov	r9, r2
 8003af6:	2f78      	cmp	r7, #120	; 0x78
 8003af8:	4680      	mov	r8, r0
 8003afa:	469a      	mov	sl, r3
 8003afc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003afe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b02:	d807      	bhi.n	8003b14 <_printf_i+0x28>
 8003b04:	2f62      	cmp	r7, #98	; 0x62
 8003b06:	d80a      	bhi.n	8003b1e <_printf_i+0x32>
 8003b08:	2f00      	cmp	r7, #0
 8003b0a:	f000 80d9 	beq.w	8003cc0 <_printf_i+0x1d4>
 8003b0e:	2f58      	cmp	r7, #88	; 0x58
 8003b10:	f000 80a4 	beq.w	8003c5c <_printf_i+0x170>
 8003b14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b1c:	e03a      	b.n	8003b94 <_printf_i+0xa8>
 8003b1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b22:	2b15      	cmp	r3, #21
 8003b24:	d8f6      	bhi.n	8003b14 <_printf_i+0x28>
 8003b26:	a001      	add	r0, pc, #4	; (adr r0, 8003b2c <_printf_i+0x40>)
 8003b28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003b2c:	08003b85 	.word	0x08003b85
 8003b30:	08003b99 	.word	0x08003b99
 8003b34:	08003b15 	.word	0x08003b15
 8003b38:	08003b15 	.word	0x08003b15
 8003b3c:	08003b15 	.word	0x08003b15
 8003b40:	08003b15 	.word	0x08003b15
 8003b44:	08003b99 	.word	0x08003b99
 8003b48:	08003b15 	.word	0x08003b15
 8003b4c:	08003b15 	.word	0x08003b15
 8003b50:	08003b15 	.word	0x08003b15
 8003b54:	08003b15 	.word	0x08003b15
 8003b58:	08003ca7 	.word	0x08003ca7
 8003b5c:	08003bc9 	.word	0x08003bc9
 8003b60:	08003c89 	.word	0x08003c89
 8003b64:	08003b15 	.word	0x08003b15
 8003b68:	08003b15 	.word	0x08003b15
 8003b6c:	08003cc9 	.word	0x08003cc9
 8003b70:	08003b15 	.word	0x08003b15
 8003b74:	08003bc9 	.word	0x08003bc9
 8003b78:	08003b15 	.word	0x08003b15
 8003b7c:	08003b15 	.word	0x08003b15
 8003b80:	08003c91 	.word	0x08003c91
 8003b84:	680b      	ldr	r3, [r1, #0]
 8003b86:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b8a:	1d1a      	adds	r2, r3, #4
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	600a      	str	r2, [r1, #0]
 8003b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0a4      	b.n	8003ce2 <_printf_i+0x1f6>
 8003b98:	6825      	ldr	r5, [r4, #0]
 8003b9a:	6808      	ldr	r0, [r1, #0]
 8003b9c:	062e      	lsls	r6, r5, #24
 8003b9e:	f100 0304 	add.w	r3, r0, #4
 8003ba2:	d50a      	bpl.n	8003bba <_printf_i+0xce>
 8003ba4:	6805      	ldr	r5, [r0, #0]
 8003ba6:	600b      	str	r3, [r1, #0]
 8003ba8:	2d00      	cmp	r5, #0
 8003baa:	da03      	bge.n	8003bb4 <_printf_i+0xc8>
 8003bac:	232d      	movs	r3, #45	; 0x2d
 8003bae:	426d      	negs	r5, r5
 8003bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bb4:	230a      	movs	r3, #10
 8003bb6:	485e      	ldr	r0, [pc, #376]	; (8003d30 <_printf_i+0x244>)
 8003bb8:	e019      	b.n	8003bee <_printf_i+0x102>
 8003bba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003bbe:	6805      	ldr	r5, [r0, #0]
 8003bc0:	600b      	str	r3, [r1, #0]
 8003bc2:	bf18      	it	ne
 8003bc4:	b22d      	sxthne	r5, r5
 8003bc6:	e7ef      	b.n	8003ba8 <_printf_i+0xbc>
 8003bc8:	680b      	ldr	r3, [r1, #0]
 8003bca:	6825      	ldr	r5, [r4, #0]
 8003bcc:	1d18      	adds	r0, r3, #4
 8003bce:	6008      	str	r0, [r1, #0]
 8003bd0:	0628      	lsls	r0, r5, #24
 8003bd2:	d501      	bpl.n	8003bd8 <_printf_i+0xec>
 8003bd4:	681d      	ldr	r5, [r3, #0]
 8003bd6:	e002      	b.n	8003bde <_printf_i+0xf2>
 8003bd8:	0669      	lsls	r1, r5, #25
 8003bda:	d5fb      	bpl.n	8003bd4 <_printf_i+0xe8>
 8003bdc:	881d      	ldrh	r5, [r3, #0]
 8003bde:	2f6f      	cmp	r7, #111	; 0x6f
 8003be0:	bf0c      	ite	eq
 8003be2:	2308      	moveq	r3, #8
 8003be4:	230a      	movne	r3, #10
 8003be6:	4852      	ldr	r0, [pc, #328]	; (8003d30 <_printf_i+0x244>)
 8003be8:	2100      	movs	r1, #0
 8003bea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bee:	6866      	ldr	r6, [r4, #4]
 8003bf0:	2e00      	cmp	r6, #0
 8003bf2:	bfa8      	it	ge
 8003bf4:	6821      	ldrge	r1, [r4, #0]
 8003bf6:	60a6      	str	r6, [r4, #8]
 8003bf8:	bfa4      	itt	ge
 8003bfa:	f021 0104 	bicge.w	r1, r1, #4
 8003bfe:	6021      	strge	r1, [r4, #0]
 8003c00:	b90d      	cbnz	r5, 8003c06 <_printf_i+0x11a>
 8003c02:	2e00      	cmp	r6, #0
 8003c04:	d04d      	beq.n	8003ca2 <_printf_i+0x1b6>
 8003c06:	4616      	mov	r6, r2
 8003c08:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c0c:	fb03 5711 	mls	r7, r3, r1, r5
 8003c10:	5dc7      	ldrb	r7, [r0, r7]
 8003c12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c16:	462f      	mov	r7, r5
 8003c18:	42bb      	cmp	r3, r7
 8003c1a:	460d      	mov	r5, r1
 8003c1c:	d9f4      	bls.n	8003c08 <_printf_i+0x11c>
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d10b      	bne.n	8003c3a <_printf_i+0x14e>
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	07df      	lsls	r7, r3, #31
 8003c26:	d508      	bpl.n	8003c3a <_printf_i+0x14e>
 8003c28:	6923      	ldr	r3, [r4, #16]
 8003c2a:	6861      	ldr	r1, [r4, #4]
 8003c2c:	4299      	cmp	r1, r3
 8003c2e:	bfde      	ittt	le
 8003c30:	2330      	movle	r3, #48	; 0x30
 8003c32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c36:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c3a:	1b92      	subs	r2, r2, r6
 8003c3c:	6122      	str	r2, [r4, #16]
 8003c3e:	464b      	mov	r3, r9
 8003c40:	4621      	mov	r1, r4
 8003c42:	4640      	mov	r0, r8
 8003c44:	f8cd a000 	str.w	sl, [sp]
 8003c48:	aa03      	add	r2, sp, #12
 8003c4a:	f7ff fedf 	bl	8003a0c <_printf_common>
 8003c4e:	3001      	adds	r0, #1
 8003c50:	d14c      	bne.n	8003cec <_printf_i+0x200>
 8003c52:	f04f 30ff 	mov.w	r0, #4294967295
 8003c56:	b004      	add	sp, #16
 8003c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c5c:	4834      	ldr	r0, [pc, #208]	; (8003d30 <_printf_i+0x244>)
 8003c5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c62:	680e      	ldr	r6, [r1, #0]
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	f856 5b04 	ldr.w	r5, [r6], #4
 8003c6a:	061f      	lsls	r7, r3, #24
 8003c6c:	600e      	str	r6, [r1, #0]
 8003c6e:	d514      	bpl.n	8003c9a <_printf_i+0x1ae>
 8003c70:	07d9      	lsls	r1, r3, #31
 8003c72:	bf44      	itt	mi
 8003c74:	f043 0320 	orrmi.w	r3, r3, #32
 8003c78:	6023      	strmi	r3, [r4, #0]
 8003c7a:	b91d      	cbnz	r5, 8003c84 <_printf_i+0x198>
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	f023 0320 	bic.w	r3, r3, #32
 8003c82:	6023      	str	r3, [r4, #0]
 8003c84:	2310      	movs	r3, #16
 8003c86:	e7af      	b.n	8003be8 <_printf_i+0xfc>
 8003c88:	6823      	ldr	r3, [r4, #0]
 8003c8a:	f043 0320 	orr.w	r3, r3, #32
 8003c8e:	6023      	str	r3, [r4, #0]
 8003c90:	2378      	movs	r3, #120	; 0x78
 8003c92:	4828      	ldr	r0, [pc, #160]	; (8003d34 <_printf_i+0x248>)
 8003c94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c98:	e7e3      	b.n	8003c62 <_printf_i+0x176>
 8003c9a:	065e      	lsls	r6, r3, #25
 8003c9c:	bf48      	it	mi
 8003c9e:	b2ad      	uxthmi	r5, r5
 8003ca0:	e7e6      	b.n	8003c70 <_printf_i+0x184>
 8003ca2:	4616      	mov	r6, r2
 8003ca4:	e7bb      	b.n	8003c1e <_printf_i+0x132>
 8003ca6:	680b      	ldr	r3, [r1, #0]
 8003ca8:	6826      	ldr	r6, [r4, #0]
 8003caa:	1d1d      	adds	r5, r3, #4
 8003cac:	6960      	ldr	r0, [r4, #20]
 8003cae:	600d      	str	r5, [r1, #0]
 8003cb0:	0635      	lsls	r5, r6, #24
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	d501      	bpl.n	8003cba <_printf_i+0x1ce>
 8003cb6:	6018      	str	r0, [r3, #0]
 8003cb8:	e002      	b.n	8003cc0 <_printf_i+0x1d4>
 8003cba:	0671      	lsls	r1, r6, #25
 8003cbc:	d5fb      	bpl.n	8003cb6 <_printf_i+0x1ca>
 8003cbe:	8018      	strh	r0, [r3, #0]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	4616      	mov	r6, r2
 8003cc4:	6123      	str	r3, [r4, #16]
 8003cc6:	e7ba      	b.n	8003c3e <_printf_i+0x152>
 8003cc8:	680b      	ldr	r3, [r1, #0]
 8003cca:	1d1a      	adds	r2, r3, #4
 8003ccc:	600a      	str	r2, [r1, #0]
 8003cce:	681e      	ldr	r6, [r3, #0]
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4630      	mov	r0, r6
 8003cd4:	6862      	ldr	r2, [r4, #4]
 8003cd6:	f000 f82f 	bl	8003d38 <memchr>
 8003cda:	b108      	cbz	r0, 8003ce0 <_printf_i+0x1f4>
 8003cdc:	1b80      	subs	r0, r0, r6
 8003cde:	6060      	str	r0, [r4, #4]
 8003ce0:	6863      	ldr	r3, [r4, #4]
 8003ce2:	6123      	str	r3, [r4, #16]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cea:	e7a8      	b.n	8003c3e <_printf_i+0x152>
 8003cec:	4632      	mov	r2, r6
 8003cee:	4649      	mov	r1, r9
 8003cf0:	4640      	mov	r0, r8
 8003cf2:	6923      	ldr	r3, [r4, #16]
 8003cf4:	47d0      	blx	sl
 8003cf6:	3001      	adds	r0, #1
 8003cf8:	d0ab      	beq.n	8003c52 <_printf_i+0x166>
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	079b      	lsls	r3, r3, #30
 8003cfe:	d413      	bmi.n	8003d28 <_printf_i+0x23c>
 8003d00:	68e0      	ldr	r0, [r4, #12]
 8003d02:	9b03      	ldr	r3, [sp, #12]
 8003d04:	4298      	cmp	r0, r3
 8003d06:	bfb8      	it	lt
 8003d08:	4618      	movlt	r0, r3
 8003d0a:	e7a4      	b.n	8003c56 <_printf_i+0x16a>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	4632      	mov	r2, r6
 8003d10:	4649      	mov	r1, r9
 8003d12:	4640      	mov	r0, r8
 8003d14:	47d0      	blx	sl
 8003d16:	3001      	adds	r0, #1
 8003d18:	d09b      	beq.n	8003c52 <_printf_i+0x166>
 8003d1a:	3501      	adds	r5, #1
 8003d1c:	68e3      	ldr	r3, [r4, #12]
 8003d1e:	9903      	ldr	r1, [sp, #12]
 8003d20:	1a5b      	subs	r3, r3, r1
 8003d22:	42ab      	cmp	r3, r5
 8003d24:	dcf2      	bgt.n	8003d0c <_printf_i+0x220>
 8003d26:	e7eb      	b.n	8003d00 <_printf_i+0x214>
 8003d28:	2500      	movs	r5, #0
 8003d2a:	f104 0619 	add.w	r6, r4, #25
 8003d2e:	e7f5      	b.n	8003d1c <_printf_i+0x230>
 8003d30:	08003fe9 	.word	0x08003fe9
 8003d34:	08003ffa 	.word	0x08003ffa

08003d38 <memchr>:
 8003d38:	4603      	mov	r3, r0
 8003d3a:	b510      	push	{r4, lr}
 8003d3c:	b2c9      	uxtb	r1, r1
 8003d3e:	4402      	add	r2, r0
 8003d40:	4293      	cmp	r3, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	d101      	bne.n	8003d4a <memchr+0x12>
 8003d46:	2000      	movs	r0, #0
 8003d48:	e003      	b.n	8003d52 <memchr+0x1a>
 8003d4a:	7804      	ldrb	r4, [r0, #0]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	428c      	cmp	r4, r1
 8003d50:	d1f6      	bne.n	8003d40 <memchr+0x8>
 8003d52:	bd10      	pop	{r4, pc}

08003d54 <memcpy>:
 8003d54:	440a      	add	r2, r1
 8003d56:	4291      	cmp	r1, r2
 8003d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d5c:	d100      	bne.n	8003d60 <memcpy+0xc>
 8003d5e:	4770      	bx	lr
 8003d60:	b510      	push	{r4, lr}
 8003d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d66:	4291      	cmp	r1, r2
 8003d68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d6c:	d1f9      	bne.n	8003d62 <memcpy+0xe>
 8003d6e:	bd10      	pop	{r4, pc}

08003d70 <memmove>:
 8003d70:	4288      	cmp	r0, r1
 8003d72:	b510      	push	{r4, lr}
 8003d74:	eb01 0402 	add.w	r4, r1, r2
 8003d78:	d902      	bls.n	8003d80 <memmove+0x10>
 8003d7a:	4284      	cmp	r4, r0
 8003d7c:	4623      	mov	r3, r4
 8003d7e:	d807      	bhi.n	8003d90 <memmove+0x20>
 8003d80:	1e43      	subs	r3, r0, #1
 8003d82:	42a1      	cmp	r1, r4
 8003d84:	d008      	beq.n	8003d98 <memmove+0x28>
 8003d86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d8e:	e7f8      	b.n	8003d82 <memmove+0x12>
 8003d90:	4601      	mov	r1, r0
 8003d92:	4402      	add	r2, r0
 8003d94:	428a      	cmp	r2, r1
 8003d96:	d100      	bne.n	8003d9a <memmove+0x2a>
 8003d98:	bd10      	pop	{r4, pc}
 8003d9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003da2:	e7f7      	b.n	8003d94 <memmove+0x24>

08003da4 <_free_r>:
 8003da4:	b538      	push	{r3, r4, r5, lr}
 8003da6:	4605      	mov	r5, r0
 8003da8:	2900      	cmp	r1, #0
 8003daa:	d043      	beq.n	8003e34 <_free_r+0x90>
 8003dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003db0:	1f0c      	subs	r4, r1, #4
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	bfb8      	it	lt
 8003db6:	18e4      	addlt	r4, r4, r3
 8003db8:	f000 f8d0 	bl	8003f5c <__malloc_lock>
 8003dbc:	4a1e      	ldr	r2, [pc, #120]	; (8003e38 <_free_r+0x94>)
 8003dbe:	6813      	ldr	r3, [r2, #0]
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	b933      	cbnz	r3, 8003dd2 <_free_r+0x2e>
 8003dc4:	6063      	str	r3, [r4, #4]
 8003dc6:	6014      	str	r4, [r2, #0]
 8003dc8:	4628      	mov	r0, r5
 8003dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dce:	f000 b8cb 	b.w	8003f68 <__malloc_unlock>
 8003dd2:	42a3      	cmp	r3, r4
 8003dd4:	d90a      	bls.n	8003dec <_free_r+0x48>
 8003dd6:	6821      	ldr	r1, [r4, #0]
 8003dd8:	1862      	adds	r2, r4, r1
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	bf01      	itttt	eq
 8003dde:	681a      	ldreq	r2, [r3, #0]
 8003de0:	685b      	ldreq	r3, [r3, #4]
 8003de2:	1852      	addeq	r2, r2, r1
 8003de4:	6022      	streq	r2, [r4, #0]
 8003de6:	6063      	str	r3, [r4, #4]
 8003de8:	6004      	str	r4, [r0, #0]
 8003dea:	e7ed      	b.n	8003dc8 <_free_r+0x24>
 8003dec:	461a      	mov	r2, r3
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	b10b      	cbz	r3, 8003df6 <_free_r+0x52>
 8003df2:	42a3      	cmp	r3, r4
 8003df4:	d9fa      	bls.n	8003dec <_free_r+0x48>
 8003df6:	6811      	ldr	r1, [r2, #0]
 8003df8:	1850      	adds	r0, r2, r1
 8003dfa:	42a0      	cmp	r0, r4
 8003dfc:	d10b      	bne.n	8003e16 <_free_r+0x72>
 8003dfe:	6820      	ldr	r0, [r4, #0]
 8003e00:	4401      	add	r1, r0
 8003e02:	1850      	adds	r0, r2, r1
 8003e04:	4283      	cmp	r3, r0
 8003e06:	6011      	str	r1, [r2, #0]
 8003e08:	d1de      	bne.n	8003dc8 <_free_r+0x24>
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	4401      	add	r1, r0
 8003e10:	6011      	str	r1, [r2, #0]
 8003e12:	6053      	str	r3, [r2, #4]
 8003e14:	e7d8      	b.n	8003dc8 <_free_r+0x24>
 8003e16:	d902      	bls.n	8003e1e <_free_r+0x7a>
 8003e18:	230c      	movs	r3, #12
 8003e1a:	602b      	str	r3, [r5, #0]
 8003e1c:	e7d4      	b.n	8003dc8 <_free_r+0x24>
 8003e1e:	6820      	ldr	r0, [r4, #0]
 8003e20:	1821      	adds	r1, r4, r0
 8003e22:	428b      	cmp	r3, r1
 8003e24:	bf01      	itttt	eq
 8003e26:	6819      	ldreq	r1, [r3, #0]
 8003e28:	685b      	ldreq	r3, [r3, #4]
 8003e2a:	1809      	addeq	r1, r1, r0
 8003e2c:	6021      	streq	r1, [r4, #0]
 8003e2e:	6063      	str	r3, [r4, #4]
 8003e30:	6054      	str	r4, [r2, #4]
 8003e32:	e7c9      	b.n	8003dc8 <_free_r+0x24>
 8003e34:	bd38      	pop	{r3, r4, r5, pc}
 8003e36:	bf00      	nop
 8003e38:	20000168 	.word	0x20000168

08003e3c <_malloc_r>:
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	1ccd      	adds	r5, r1, #3
 8003e40:	f025 0503 	bic.w	r5, r5, #3
 8003e44:	3508      	adds	r5, #8
 8003e46:	2d0c      	cmp	r5, #12
 8003e48:	bf38      	it	cc
 8003e4a:	250c      	movcc	r5, #12
 8003e4c:	2d00      	cmp	r5, #0
 8003e4e:	4606      	mov	r6, r0
 8003e50:	db01      	blt.n	8003e56 <_malloc_r+0x1a>
 8003e52:	42a9      	cmp	r1, r5
 8003e54:	d903      	bls.n	8003e5e <_malloc_r+0x22>
 8003e56:	230c      	movs	r3, #12
 8003e58:	6033      	str	r3, [r6, #0]
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e5e:	f000 f87d 	bl	8003f5c <__malloc_lock>
 8003e62:	4921      	ldr	r1, [pc, #132]	; (8003ee8 <_malloc_r+0xac>)
 8003e64:	680a      	ldr	r2, [r1, #0]
 8003e66:	4614      	mov	r4, r2
 8003e68:	b99c      	cbnz	r4, 8003e92 <_malloc_r+0x56>
 8003e6a:	4f20      	ldr	r7, [pc, #128]	; (8003eec <_malloc_r+0xb0>)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	b923      	cbnz	r3, 8003e7a <_malloc_r+0x3e>
 8003e70:	4621      	mov	r1, r4
 8003e72:	4630      	mov	r0, r6
 8003e74:	f000 f862 	bl	8003f3c <_sbrk_r>
 8003e78:	6038      	str	r0, [r7, #0]
 8003e7a:	4629      	mov	r1, r5
 8003e7c:	4630      	mov	r0, r6
 8003e7e:	f000 f85d 	bl	8003f3c <_sbrk_r>
 8003e82:	1c43      	adds	r3, r0, #1
 8003e84:	d123      	bne.n	8003ece <_malloc_r+0x92>
 8003e86:	230c      	movs	r3, #12
 8003e88:	4630      	mov	r0, r6
 8003e8a:	6033      	str	r3, [r6, #0]
 8003e8c:	f000 f86c 	bl	8003f68 <__malloc_unlock>
 8003e90:	e7e3      	b.n	8003e5a <_malloc_r+0x1e>
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	1b5b      	subs	r3, r3, r5
 8003e96:	d417      	bmi.n	8003ec8 <_malloc_r+0x8c>
 8003e98:	2b0b      	cmp	r3, #11
 8003e9a:	d903      	bls.n	8003ea4 <_malloc_r+0x68>
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	441c      	add	r4, r3
 8003ea0:	6025      	str	r5, [r4, #0]
 8003ea2:	e004      	b.n	8003eae <_malloc_r+0x72>
 8003ea4:	6863      	ldr	r3, [r4, #4]
 8003ea6:	42a2      	cmp	r2, r4
 8003ea8:	bf0c      	ite	eq
 8003eaa:	600b      	streq	r3, [r1, #0]
 8003eac:	6053      	strne	r3, [r2, #4]
 8003eae:	4630      	mov	r0, r6
 8003eb0:	f000 f85a 	bl	8003f68 <__malloc_unlock>
 8003eb4:	f104 000b 	add.w	r0, r4, #11
 8003eb8:	1d23      	adds	r3, r4, #4
 8003eba:	f020 0007 	bic.w	r0, r0, #7
 8003ebe:	1ac2      	subs	r2, r0, r3
 8003ec0:	d0cc      	beq.n	8003e5c <_malloc_r+0x20>
 8003ec2:	1a1b      	subs	r3, r3, r0
 8003ec4:	50a3      	str	r3, [r4, r2]
 8003ec6:	e7c9      	b.n	8003e5c <_malloc_r+0x20>
 8003ec8:	4622      	mov	r2, r4
 8003eca:	6864      	ldr	r4, [r4, #4]
 8003ecc:	e7cc      	b.n	8003e68 <_malloc_r+0x2c>
 8003ece:	1cc4      	adds	r4, r0, #3
 8003ed0:	f024 0403 	bic.w	r4, r4, #3
 8003ed4:	42a0      	cmp	r0, r4
 8003ed6:	d0e3      	beq.n	8003ea0 <_malloc_r+0x64>
 8003ed8:	1a21      	subs	r1, r4, r0
 8003eda:	4630      	mov	r0, r6
 8003edc:	f000 f82e 	bl	8003f3c <_sbrk_r>
 8003ee0:	3001      	adds	r0, #1
 8003ee2:	d1dd      	bne.n	8003ea0 <_malloc_r+0x64>
 8003ee4:	e7cf      	b.n	8003e86 <_malloc_r+0x4a>
 8003ee6:	bf00      	nop
 8003ee8:	20000168 	.word	0x20000168
 8003eec:	2000016c 	.word	0x2000016c

08003ef0 <_realloc_r>:
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef2:	4607      	mov	r7, r0
 8003ef4:	4614      	mov	r4, r2
 8003ef6:	460e      	mov	r6, r1
 8003ef8:	b921      	cbnz	r1, 8003f04 <_realloc_r+0x14>
 8003efa:	4611      	mov	r1, r2
 8003efc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f00:	f7ff bf9c 	b.w	8003e3c <_malloc_r>
 8003f04:	b922      	cbnz	r2, 8003f10 <_realloc_r+0x20>
 8003f06:	f7ff ff4d 	bl	8003da4 <_free_r>
 8003f0a:	4625      	mov	r5, r4
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f10:	f000 f830 	bl	8003f74 <_malloc_usable_size_r>
 8003f14:	42a0      	cmp	r0, r4
 8003f16:	d20f      	bcs.n	8003f38 <_realloc_r+0x48>
 8003f18:	4621      	mov	r1, r4
 8003f1a:	4638      	mov	r0, r7
 8003f1c:	f7ff ff8e 	bl	8003e3c <_malloc_r>
 8003f20:	4605      	mov	r5, r0
 8003f22:	2800      	cmp	r0, #0
 8003f24:	d0f2      	beq.n	8003f0c <_realloc_r+0x1c>
 8003f26:	4631      	mov	r1, r6
 8003f28:	4622      	mov	r2, r4
 8003f2a:	f7ff ff13 	bl	8003d54 <memcpy>
 8003f2e:	4631      	mov	r1, r6
 8003f30:	4638      	mov	r0, r7
 8003f32:	f7ff ff37 	bl	8003da4 <_free_r>
 8003f36:	e7e9      	b.n	8003f0c <_realloc_r+0x1c>
 8003f38:	4635      	mov	r5, r6
 8003f3a:	e7e7      	b.n	8003f0c <_realloc_r+0x1c>

08003f3c <_sbrk_r>:
 8003f3c:	b538      	push	{r3, r4, r5, lr}
 8003f3e:	2300      	movs	r3, #0
 8003f40:	4d05      	ldr	r5, [pc, #20]	; (8003f58 <_sbrk_r+0x1c>)
 8003f42:	4604      	mov	r4, r0
 8003f44:	4608      	mov	r0, r1
 8003f46:	602b      	str	r3, [r5, #0]
 8003f48:	f7fd fac2 	bl	80014d0 <_sbrk>
 8003f4c:	1c43      	adds	r3, r0, #1
 8003f4e:	d102      	bne.n	8003f56 <_sbrk_r+0x1a>
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	b103      	cbz	r3, 8003f56 <_sbrk_r+0x1a>
 8003f54:	6023      	str	r3, [r4, #0]
 8003f56:	bd38      	pop	{r3, r4, r5, pc}
 8003f58:	20000258 	.word	0x20000258

08003f5c <__malloc_lock>:
 8003f5c:	4801      	ldr	r0, [pc, #4]	; (8003f64 <__malloc_lock+0x8>)
 8003f5e:	f000 b811 	b.w	8003f84 <__retarget_lock_acquire_recursive>
 8003f62:	bf00      	nop
 8003f64:	20000260 	.word	0x20000260

08003f68 <__malloc_unlock>:
 8003f68:	4801      	ldr	r0, [pc, #4]	; (8003f70 <__malloc_unlock+0x8>)
 8003f6a:	f000 b80c 	b.w	8003f86 <__retarget_lock_release_recursive>
 8003f6e:	bf00      	nop
 8003f70:	20000260 	.word	0x20000260

08003f74 <_malloc_usable_size_r>:
 8003f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f78:	1f18      	subs	r0, r3, #4
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bfbc      	itt	lt
 8003f7e:	580b      	ldrlt	r3, [r1, r0]
 8003f80:	18c0      	addlt	r0, r0, r3
 8003f82:	4770      	bx	lr

08003f84 <__retarget_lock_acquire_recursive>:
 8003f84:	4770      	bx	lr

08003f86 <__retarget_lock_release_recursive>:
 8003f86:	4770      	bx	lr

08003f88 <_init>:
 8003f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8a:	bf00      	nop
 8003f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8e:	bc08      	pop	{r3}
 8003f90:	469e      	mov	lr, r3
 8003f92:	4770      	bx	lr

08003f94 <_fini>:
 8003f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f96:	bf00      	nop
 8003f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9a:	bc08      	pop	{r3}
 8003f9c:	469e      	mov	lr, r3
 8003f9e:	4770      	bx	lr
