
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003308  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003414  08003414  00013414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800343c  0800343c  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800343c  0800343c  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800343c  0800343c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800343c  0800343c  0001343c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003440  08003440  00013440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000090  080034d4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  080034d4  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af69  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d4a  00000000  00000000  0002b022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  0002cd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  0002da60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017020  00000000  00000000  0002e650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c650  00000000  00000000  00045670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086a1f  00000000  00000000  00051cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d86df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003394  00000000  00000000  000d8734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	080033fc 	.word	0x080033fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	080033fc 	.word	0x080033fc

0800014c <subKeyProcess>:

int is3secondPressed[4]={0,0,0,0};

int button_flag[4]={0,0,0,0};

void subKeyProcess(int i){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	button_flag[i]=1;
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <subKeyProcess+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2101      	movs	r1, #1
 800015a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800015e:	bf00      	nop
 8000160:	370c      	adds	r7, #12
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	200000bc 	.word	0x200000bc

0800016c <isButtonPress>:

int isButtonPress(int i){
 800016c:	b480      	push	{r7}
 800016e:	b083      	sub	sp, #12
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
	if(button_flag[i]==1){
 8000174:	4a09      	ldr	r2, [pc, #36]	; (800019c <isButtonPress+0x30>)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d106      	bne.n	800018e <isButtonPress+0x22>
		button_flag[i]=0;
 8000180:	4a06      	ldr	r2, [pc, #24]	; (800019c <isButtonPress+0x30>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800018a:	2301      	movs	r3, #1
 800018c:	e000      	b.n	8000190 <isButtonPress+0x24>
	}
	return 0;
 800018e:	2300      	movs	r3, #0
}
 8000190:	4618      	mov	r0, r3
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	200000bc 	.word	0x200000bc

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0

	for(int i=0;i<4;i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e0ae      	b.n	800030a <getKeyInput+0x16a>
		keyReg0[i] = keyReg1[i];
 80001ac:	4a5b      	ldr	r2, [pc, #364]	; (800031c <getKeyInput+0x17c>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	495a      	ldr	r1, [pc, #360]	; (8000320 <getKeyInput+0x180>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 80001bc:	4a59      	ldr	r2, [pc, #356]	; (8000324 <getKeyInput+0x184>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4955      	ldr	r1, [pc, #340]	; (800031c <getKeyInput+0x17c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b03      	cmp	r3, #3
 80001d0:	d836      	bhi.n	8000240 <getKeyInput+0xa0>
 80001d2:	a201      	add	r2, pc, #4	; (adr r2, 80001d8 <getKeyInput+0x38>)
 80001d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001d8:	080001e9 	.word	0x080001e9
 80001dc:	080001ff 	.word	0x080001ff
 80001e0:	08000215 	.word	0x08000215
 80001e4:	0800022b 	.word	0x0800022b
		switch (i) {
			case 0:
				keyReg2[i] = HAL_GPIO_ReadPin(Button_1_GPIO_Port,Button_1_Pin);
 80001e8:	2102      	movs	r1, #2
 80001ea:	484f      	ldr	r0, [pc, #316]	; (8000328 <getKeyInput+0x188>)
 80001ec:	f001 fc1c 	bl	8001a28 <HAL_GPIO_ReadPin>
 80001f0:	4603      	mov	r3, r0
 80001f2:	4619      	mov	r1, r3
 80001f4:	4a4b      	ldr	r2, [pc, #300]	; (8000324 <getKeyInput+0x184>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 80001fc:	e021      	b.n	8000242 <getKeyInput+0xa2>
			case 1:
				keyReg2[i] = HAL_GPIO_ReadPin(Button_2_GPIO_Port,Button_2_Pin);
 80001fe:	2110      	movs	r1, #16
 8000200:	4849      	ldr	r0, [pc, #292]	; (8000328 <getKeyInput+0x188>)
 8000202:	f001 fc11 	bl	8001a28 <HAL_GPIO_ReadPin>
 8000206:	4603      	mov	r3, r0
 8000208:	4619      	mov	r1, r3
 800020a:	4a46      	ldr	r2, [pc, #280]	; (8000324 <getKeyInput+0x184>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000212:	e016      	b.n	8000242 <getKeyInput+0xa2>
			case 2:
				keyReg2[i] = HAL_GPIO_ReadPin(Button_3_GPIO_Port,Button_3_Pin);
 8000214:	2101      	movs	r1, #1
 8000216:	4845      	ldr	r0, [pc, #276]	; (800032c <getKeyInput+0x18c>)
 8000218:	f001 fc06 	bl	8001a28 <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	4619      	mov	r1, r3
 8000220:	4a40      	ldr	r2, [pc, #256]	; (8000324 <getKeyInput+0x184>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000228:	e00b      	b.n	8000242 <getKeyInput+0xa2>
			case 3:
				keyReg2[i] = HAL_GPIO_ReadPin(Button_P_GPIO_Port,Button_P_Pin);
 800022a:	2101      	movs	r1, #1
 800022c:	483e      	ldr	r0, [pc, #248]	; (8000328 <getKeyInput+0x188>)
 800022e:	f001 fbfb 	bl	8001a28 <HAL_GPIO_ReadPin>
 8000232:	4603      	mov	r3, r0
 8000234:	4619      	mov	r1, r3
 8000236:	4a3b      	ldr	r2, [pc, #236]	; (8000324 <getKeyInput+0x184>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800023e:	e000      	b.n	8000242 <getKeyInput+0xa2>
			default:
				break;
 8000240:	bf00      	nop
		}
		//Stability Signal
		if((keyReg0[i]==keyReg1[i])&&(keyReg1[i]==keyReg2[i])){
 8000242:	4a37      	ldr	r2, [pc, #220]	; (8000320 <getKeyInput+0x180>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024a:	4934      	ldr	r1, [pc, #208]	; (800031c <getKeyInput+0x17c>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000252:	429a      	cmp	r2, r3
 8000254:	d156      	bne.n	8000304 <getKeyInput+0x164>
 8000256:	4a31      	ldr	r2, [pc, #196]	; (800031c <getKeyInput+0x17c>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025e:	4931      	ldr	r1, [pc, #196]	; (8000324 <getKeyInput+0x184>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000266:	429a      	cmp	r2, r3
 8000268:	d14c      	bne.n	8000304 <getKeyInput+0x164>
			//When signal change
			if(keyReg2[i]!=keyReg3[i]){
 800026a:	4a2e      	ldr	r2, [pc, #184]	; (8000324 <getKeyInput+0x184>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000272:	492f      	ldr	r1, [pc, #188]	; (8000330 <getKeyInput+0x190>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800027a:	429a      	cmp	r2, r3
 800027c:	d029      	beq.n	80002d2 <getKeyInput+0x132>
				keyReg3[i]=keyReg2[i];//save signal
 800027e:	4a29      	ldr	r2, [pc, #164]	; (8000324 <getKeyInput+0x184>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000286:	492a      	ldr	r1, [pc, #168]	; (8000330 <getKeyInput+0x190>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(keyReg2[i]==PRESSED_STATE){
 800028e:	4a25      	ldr	r2, [pc, #148]	; (8000324 <getKeyInput+0x184>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d115      	bne.n	80002c6 <getKeyInput+0x126>
					//1->0
					if(!is3secondPressed[i]){
 800029a:	4a26      	ldr	r2, [pc, #152]	; (8000334 <getKeyInput+0x194>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d106      	bne.n	80002b4 <getKeyInput+0x114>
						//Fist press
						timerForKey[i]=300;
 80002a6:	4a24      	ldr	r2, [pc, #144]	; (8000338 <getKeyInput+0x198>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002b2:	e004      	b.n	80002be <getKeyInput+0x11e>
					}
					else{
						//Next press
						timerForKey[i]=100;
 80002b4:	4a20      	ldr	r2, [pc, #128]	; (8000338 <getKeyInput+0x198>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2164      	movs	r1, #100	; 0x64
 80002ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					//TODO
					//Turn on button flag
					subKeyProcess(i);
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	f7ff ff44 	bl	800014c <subKeyProcess>
 80002c4:	e01e      	b.n	8000304 <getKeyInput+0x164>

				}
				else{
					//0->1
					is3secondPressed[i]=0;
 80002c6:	4a1b      	ldr	r2, [pc, #108]	; (8000334 <getKeyInput+0x194>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2100      	movs	r1, #0
 80002cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002d0:	e018      	b.n	8000304 <getKeyInput+0x164>
				}
			}
			//When signal doesn't change
			else{
				timerForKey[i]--;
 80002d2:	4a19      	ldr	r2, [pc, #100]	; (8000338 <getKeyInput+0x198>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002da:	1e5a      	subs	r2, r3, #1
 80002dc:	4916      	ldr	r1, [pc, #88]	; (8000338 <getKeyInput+0x198>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(timerForKey[i]==0){
 80002e4:	4a14      	ldr	r2, [pc, #80]	; (8000338 <getKeyInput+0x198>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d109      	bne.n	8000304 <getKeyInput+0x164>
					//Next cycle in press
					keyReg3[i]=NORMAL_STATE;
 80002f0:	4a0f      	ldr	r2, [pc, #60]	; (8000330 <getKeyInput+0x190>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2101      	movs	r1, #1
 80002f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					is3secondPressed[i]=1;
 80002fa:	4a0e      	ldr	r2, [pc, #56]	; (8000334 <getKeyInput+0x194>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2101      	movs	r1, #1
 8000300:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<4;i++){
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	3301      	adds	r3, #1
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2b03      	cmp	r3, #3
 800030e:	f77f af4d 	ble.w	80001ac <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000312:	bf00      	nop
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000010 	.word	0x20000010
 8000320:	20000000 	.word	0x20000000
 8000324:	20000020 	.word	0x20000020
 8000328:	40010800 	.word	0x40010800
 800032c:	40010c00 	.word	0x40010c00
 8000330:	20000030 	.word	0x20000030
 8000334:	200000ac 	.word	0x200000ac
 8000338:	20000040 	.word	0x20000040

0800033c <fsm_auto_processing>:
#include "global.h"
#include "output_display.h"
#include "software_timer.h"
#include "button.h"

void fsm_auto_processing(){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	switch (status) {
 8000340:	4b8e      	ldr	r3, [pc, #568]	; (800057c <fsm_auto_processing+0x240>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	3b01      	subs	r3, #1
 8000346:	2b03      	cmp	r3, #3
 8000348:	f200 810d 	bhi.w	8000566 <fsm_auto_processing+0x22a>
 800034c:	a201      	add	r2, pc, #4	; (adr r2, 8000354 <fsm_auto_processing+0x18>)
 800034e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000352:	bf00      	nop
 8000354:	08000365 	.word	0x08000365
 8000358:	080003e3 	.word	0x080003e3
 800035c:	08000461 	.word	0x08000461
 8000360:	080004e3 	.word	0x080004e3
		case AUTO_RED_GREEN:
			//auto
			if(timer0_flag==1){
 8000364:	4b86      	ldr	r3, [pc, #536]	; (8000580 <fsm_auto_processing+0x244>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d115      	bne.n	8000398 <fsm_auto_processing+0x5c>
				setTimer0(1000);
 800036c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000370:	f000 fe42 	bl	8000ff8 <setTimer0>
				if(++numberCounter == greenDuration){
 8000374:	4b83      	ldr	r3, [pc, #524]	; (8000584 <fsm_auto_processing+0x248>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	3301      	adds	r3, #1
 800037a:	4a82      	ldr	r2, [pc, #520]	; (8000584 <fsm_auto_processing+0x248>)
 800037c:	6013      	str	r3, [r2, #0]
 800037e:	4b81      	ldr	r3, [pc, #516]	; (8000584 <fsm_auto_processing+0x248>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	4b81      	ldr	r3, [pc, #516]	; (8000588 <fsm_auto_processing+0x24c>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	429a      	cmp	r2, r3
 8000388:	d102      	bne.n	8000390 <fsm_auto_processing+0x54>
					status=	AUTO_RED_YELLOW;
 800038a:	4b7c      	ldr	r3, [pc, #496]	; (800057c <fsm_auto_processing+0x240>)
 800038c:	2202      	movs	r2, #2
 800038e:	601a      	str	r2, [r3, #0]
				}

//				turnOffAll();
//				turnOnOnlyRed(0);//ROAD 0
//				turnOnOnlyGreen(1);//ROAD 1
				turnOnRed1();
 8000390:	f000 fd02 	bl	8000d98 <turnOnRed1>
				turnOnGreen2();
 8000394:	f000 fd60 	bl	8000e58 <turnOnGreen2>
			}
			//button 1
			if(isButtonPress(0)){
 8000398:	2000      	movs	r0, #0
 800039a:	f7ff fee7 	bl	800016c <isButtonPress>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d00a      	beq.n	80003ba <fsm_auto_processing+0x7e>
				status = MAN_RED;
 80003a4:	4b75      	ldr	r3, [pc, #468]	; (800057c <fsm_auto_processing+0x240>)
 80003a6:	220c      	movs	r2, #12
 80003a8:	601a      	str	r2, [r3, #0]
				timer0_flag=1;//Reuse next status
 80003aa:	4b75      	ldr	r3, [pc, #468]	; (8000580 <fsm_auto_processing+0x244>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	601a      	str	r2, [r3, #0]
				setTimer1(timeOutMan);//Timeout 5s
 80003b0:	4b76      	ldr	r3, [pc, #472]	; (800058c <fsm_auto_processing+0x250>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fe39 	bl	800102c <setTimer1>
			}
			//button 4
			if(isButtonPress(3)){
 80003ba:	2003      	movs	r0, #3
 80003bc:	f7ff fed6 	bl	800016c <isButtonPress>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	f000 80d1 	beq.w	800056a <fsm_auto_processing+0x22e>
				status_ped=PED_GO;
 80003c8:	4b71      	ldr	r3, [pc, #452]	; (8000590 <fsm_auto_processing+0x254>)
 80003ca:	2216      	movs	r2, #22
 80003cc:	601a      	str	r2, [r3, #0]
				setTimer1(4*redDuration*1000);//2 cycle
 80003ce:	4b71      	ldr	r3, [pc, #452]	; (8000594 <fsm_auto_processing+0x258>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80003d6:	fb02 f303 	mul.w	r3, r2, r3
 80003da:	4618      	mov	r0, r3
 80003dc:	f000 fe26 	bl	800102c <setTimer1>
			}
			break;
 80003e0:	e0c3      	b.n	800056a <fsm_auto_processing+0x22e>
		case AUTO_RED_YELLOW:
			if(timer0_flag==1){
 80003e2:	4b67      	ldr	r3, [pc, #412]	; (8000580 <fsm_auto_processing+0x244>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d115      	bne.n	8000416 <fsm_auto_processing+0xda>
				setTimer0(1000);
 80003ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ee:	f000 fe03 	bl	8000ff8 <setTimer0>

				if(++numberCounter == redDuration){
 80003f2:	4b64      	ldr	r3, [pc, #400]	; (8000584 <fsm_auto_processing+0x248>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	3301      	adds	r3, #1
 80003f8:	4a62      	ldr	r2, [pc, #392]	; (8000584 <fsm_auto_processing+0x248>)
 80003fa:	6013      	str	r3, [r2, #0]
 80003fc:	4b61      	ldr	r3, [pc, #388]	; (8000584 <fsm_auto_processing+0x248>)
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	4b64      	ldr	r3, [pc, #400]	; (8000594 <fsm_auto_processing+0x258>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	429a      	cmp	r2, r3
 8000406:	d102      	bne.n	800040e <fsm_auto_processing+0xd2>
					status=	AUTO_GREEN_RED;
 8000408:	4b5c      	ldr	r3, [pc, #368]	; (800057c <fsm_auto_processing+0x240>)
 800040a:	2203      	movs	r2, #3
 800040c:	601a      	str	r2, [r3, #0]
				}

//				turnOffAll();
//				turnOnOnlyRed(0);
//				turnOnOnlyYellow(1);
				turnOnRed1();
 800040e:	f000 fcc3 	bl	8000d98 <turnOnRed1>
				turnOnYellow2();
 8000412:	f000 fd31 	bl	8000e78 <turnOnYellow2>
			}
			//button 1
			if(isButtonPress(0)){
 8000416:	2000      	movs	r0, #0
 8000418:	f7ff fea8 	bl	800016c <isButtonPress>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d00a      	beq.n	8000438 <fsm_auto_processing+0xfc>
				status = MAN_RED;
 8000422:	4b56      	ldr	r3, [pc, #344]	; (800057c <fsm_auto_processing+0x240>)
 8000424:	220c      	movs	r2, #12
 8000426:	601a      	str	r2, [r3, #0]
				timer0_flag=1;//Reuse next status
 8000428:	4b55      	ldr	r3, [pc, #340]	; (8000580 <fsm_auto_processing+0x244>)
 800042a:	2201      	movs	r2, #1
 800042c:	601a      	str	r2, [r3, #0]
				setTimer1(timeOutMan);//Timeout 5s
 800042e:	4b57      	ldr	r3, [pc, #348]	; (800058c <fsm_auto_processing+0x250>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4618      	mov	r0, r3
 8000434:	f000 fdfa 	bl	800102c <setTimer1>
			}
			//button 4
			if(isButtonPress(3)){
 8000438:	2003      	movs	r0, #3
 800043a:	f7ff fe97 	bl	800016c <isButtonPress>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	f000 8094 	beq.w	800056e <fsm_auto_processing+0x232>
				status_ped=PED_GO;
 8000446:	4b52      	ldr	r3, [pc, #328]	; (8000590 <fsm_auto_processing+0x254>)
 8000448:	2216      	movs	r2, #22
 800044a:	601a      	str	r2, [r3, #0]
				setTimer1(4*redDuration*1000);//2 cycle
 800044c:	4b51      	ldr	r3, [pc, #324]	; (8000594 <fsm_auto_processing+0x258>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000454:	fb02 f303 	mul.w	r3, r2, r3
 8000458:	4618      	mov	r0, r3
 800045a:	f000 fde7 	bl	800102c <setTimer1>
			}
			break;
 800045e:	e086      	b.n	800056e <fsm_auto_processing+0x232>
		case AUTO_GREEN_RED:
			if(timer0_flag==1){
 8000460:	4b47      	ldr	r3, [pc, #284]	; (8000580 <fsm_auto_processing+0x244>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d118      	bne.n	800049a <fsm_auto_processing+0x15e>
				setTimer0(1000);
 8000468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800046c:	f000 fdc4 	bl	8000ff8 <setTimer0>

				if(++numberCounter == (redDuration+greenDuration)){
 8000470:	4b44      	ldr	r3, [pc, #272]	; (8000584 <fsm_auto_processing+0x248>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	3301      	adds	r3, #1
 8000476:	4a43      	ldr	r2, [pc, #268]	; (8000584 <fsm_auto_processing+0x248>)
 8000478:	6013      	str	r3, [r2, #0]
 800047a:	4b42      	ldr	r3, [pc, #264]	; (8000584 <fsm_auto_processing+0x248>)
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	4b45      	ldr	r3, [pc, #276]	; (8000594 <fsm_auto_processing+0x258>)
 8000480:	6819      	ldr	r1, [r3, #0]
 8000482:	4b41      	ldr	r3, [pc, #260]	; (8000588 <fsm_auto_processing+0x24c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	440b      	add	r3, r1
 8000488:	429a      	cmp	r2, r3
 800048a:	d102      	bne.n	8000492 <fsm_auto_processing+0x156>
					status=	AUTO_YELLOW_RED;
 800048c:	4b3b      	ldr	r3, [pc, #236]	; (800057c <fsm_auto_processing+0x240>)
 800048e:	2204      	movs	r2, #4
 8000490:	601a      	str	r2, [r3, #0]
				}

//				turnOffAll();
//				turnOnOnlyGreen(0);
//				turnOnOnlyRed(1);
				turnOnGreen1();
 8000492:	f000 fc95 	bl	8000dc0 <turnOnGreen1>
				turnOnRed2();
 8000496:	f000 fccf 	bl	8000e38 <turnOnRed2>
			}
			//button 1
			if(isButtonPress(0)){
 800049a:	2000      	movs	r0, #0
 800049c:	f7ff fe66 	bl	800016c <isButtonPress>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d00a      	beq.n	80004bc <fsm_auto_processing+0x180>
				status = MAN_RED;
 80004a6:	4b35      	ldr	r3, [pc, #212]	; (800057c <fsm_auto_processing+0x240>)
 80004a8:	220c      	movs	r2, #12
 80004aa:	601a      	str	r2, [r3, #0]
				timer0_flag=1;//Reuse next status
 80004ac:	4b34      	ldr	r3, [pc, #208]	; (8000580 <fsm_auto_processing+0x244>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	601a      	str	r2, [r3, #0]
				setTimer1(timeOutMan);//Timeout 5s
 80004b2:	4b36      	ldr	r3, [pc, #216]	; (800058c <fsm_auto_processing+0x250>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 fdb8 	bl	800102c <setTimer1>
			}
			//button 4
			if(isButtonPress(3)){
 80004bc:	2003      	movs	r0, #3
 80004be:	f7ff fe55 	bl	800016c <isButtonPress>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d054      	beq.n	8000572 <fsm_auto_processing+0x236>
				status_ped=PED_STOP;
 80004c8:	4b31      	ldr	r3, [pc, #196]	; (8000590 <fsm_auto_processing+0x254>)
 80004ca:	2215      	movs	r2, #21
 80004cc:	601a      	str	r2, [r3, #0]
				setTimer1(4*redDuration*1000);//2 cycle
 80004ce:	4b31      	ldr	r3, [pc, #196]	; (8000594 <fsm_auto_processing+0x258>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80004d6:	fb02 f303 	mul.w	r3, r2, r3
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 fda6 	bl	800102c <setTimer1>
			}
			break;
 80004e0:	e047      	b.n	8000572 <fsm_auto_processing+0x236>
		case AUTO_YELLOW_RED:
			if(timer0_flag==1){
 80004e2:	4b27      	ldr	r3, [pc, #156]	; (8000580 <fsm_auto_processing+0x244>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d119      	bne.n	800051e <fsm_auto_processing+0x1e2>
				setTimer0(1000);
 80004ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ee:	f000 fd83 	bl	8000ff8 <setTimer0>

				if(++numberCounter == (2*redDuration)){
 80004f2:	4b24      	ldr	r3, [pc, #144]	; (8000584 <fsm_auto_processing+0x248>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	3301      	adds	r3, #1
 80004f8:	4a22      	ldr	r2, [pc, #136]	; (8000584 <fsm_auto_processing+0x248>)
 80004fa:	6013      	str	r3, [r2, #0]
 80004fc:	4b21      	ldr	r3, [pc, #132]	; (8000584 <fsm_auto_processing+0x248>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	4b24      	ldr	r3, [pc, #144]	; (8000594 <fsm_auto_processing+0x258>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	429a      	cmp	r2, r3
 8000508:	d105      	bne.n	8000516 <fsm_auto_processing+0x1da>
					status=	AUTO_RED_GREEN;
 800050a:	4b1c      	ldr	r3, [pc, #112]	; (800057c <fsm_auto_processing+0x240>)
 800050c:	2201      	movs	r2, #1
 800050e:	601a      	str	r2, [r3, #0]
					numberCounter=0;
 8000510:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <fsm_auto_processing+0x248>)
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
				}

//				turnOffAll();
//				turnOnOnlyYellow(0);
//				turnOnOnlyRed(1);
				turnOnYellow1();
 8000516:	f000 fc67 	bl	8000de8 <turnOnYellow1>
				turnOnRed2();
 800051a:	f000 fc8d 	bl	8000e38 <turnOnRed2>
			}
			//button 1
			if(isButtonPress(0)){
 800051e:	2000      	movs	r0, #0
 8000520:	f7ff fe24 	bl	800016c <isButtonPress>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d00a      	beq.n	8000540 <fsm_auto_processing+0x204>
				status = MAN_RED;
 800052a:	4b14      	ldr	r3, [pc, #80]	; (800057c <fsm_auto_processing+0x240>)
 800052c:	220c      	movs	r2, #12
 800052e:	601a      	str	r2, [r3, #0]
				timer0_flag=1;//Reuse next status
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <fsm_auto_processing+0x244>)
 8000532:	2201      	movs	r2, #1
 8000534:	601a      	str	r2, [r3, #0]
				setTimer1(timeOutMan);//Timeout 5s
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <fsm_auto_processing+0x250>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fd76 	bl	800102c <setTimer1>
			}
			//button 4
			if(isButtonPress(3)){
 8000540:	2003      	movs	r0, #3
 8000542:	f7ff fe13 	bl	800016c <isButtonPress>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d014      	beq.n	8000576 <fsm_auto_processing+0x23a>
				status_ped=PED_STOP;
 800054c:	4b10      	ldr	r3, [pc, #64]	; (8000590 <fsm_auto_processing+0x254>)
 800054e:	2215      	movs	r2, #21
 8000550:	601a      	str	r2, [r3, #0]
				setTimer1(4*redDuration*1000);//2 cycle
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <fsm_auto_processing+0x258>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800055a:	fb02 f303 	mul.w	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fd64 	bl	800102c <setTimer1>
			}
			break;
 8000564:	e007      	b.n	8000576 <fsm_auto_processing+0x23a>
		default:
			break;
 8000566:	bf00      	nop
 8000568:	e006      	b.n	8000578 <fsm_auto_processing+0x23c>
			break;
 800056a:	bf00      	nop
 800056c:	e004      	b.n	8000578 <fsm_auto_processing+0x23c>
			break;
 800056e:	bf00      	nop
 8000570:	e002      	b.n	8000578 <fsm_auto_processing+0x23c>
			break;
 8000572:	bf00      	nop
 8000574:	e000      	b.n	8000578 <fsm_auto_processing+0x23c>
			break;
 8000576:	bf00      	nop
	}
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	2000005c 	.word	0x2000005c
 8000580:	200000d4 	.word	0x200000d4
 8000584:	200000d0 	.word	0x200000d0
 8000588:	2000006c 	.word	0x2000006c
 800058c:	20000058 	.word	0x20000058
 8000590:	20000060 	.word	0x20000060
 8000594:	20000068 	.word	0x20000068

08000598 <fsm_manual_processing>:
#include "software_timer.h"
#include "button.h"

int timeOut = 10000;

void fsm_manual_processing(){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	switch (status) {
 800059c:	4b79      	ldr	r3, [pc, #484]	; (8000784 <fsm_manual_processing+0x1ec>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b0e      	cmp	r3, #14
 80005a2:	f000 809b 	beq.w	80006dc <fsm_manual_processing+0x144>
 80005a6:	2b0e      	cmp	r3, #14
 80005a8:	f300 80e2 	bgt.w	8000770 <fsm_manual_processing+0x1d8>
 80005ac:	2b0c      	cmp	r3, #12
 80005ae:	d002      	beq.n	80005b6 <fsm_manual_processing+0x1e>
 80005b0:	2b0d      	cmp	r3, #13
 80005b2:	d04a      	beq.n	800064a <fsm_manual_processing+0xb2>
//				blinkAllYellowLed();
				blinkAllYellow();
			}
			break;
		default:
			break;
 80005b4:	e0dc      	b.n	8000770 <fsm_manual_processing+0x1d8>
			if(isButtonPress(0)){
 80005b6:	2000      	movs	r0, #0
 80005b8:	f7ff fdd8 	bl	800016c <isButtonPress>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d00a      	beq.n	80005d8 <fsm_manual_processing+0x40>
				setTimer1(timeOut);
 80005c2:	4b71      	ldr	r3, [pc, #452]	; (8000788 <fsm_manual_processing+0x1f0>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fd30 	bl	800102c <setTimer1>
				status = MAN_GREEN;
 80005cc:	4b6d      	ldr	r3, [pc, #436]	; (8000784 <fsm_manual_processing+0x1ec>)
 80005ce:	220d      	movs	r2, #13
 80005d0:	601a      	str	r2, [r3, #0]
				timer0_flag=1;
 80005d2:	4b6e      	ldr	r3, [pc, #440]	; (800078c <fsm_manual_processing+0x1f4>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	601a      	str	r2, [r3, #0]
			if(isButtonPress(1)){
 80005d8:	2001      	movs	r0, #1
 80005da:	f7ff fdc7 	bl	800016c <isButtonPress>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d009      	beq.n	80005f8 <fsm_manual_processing+0x60>
				setTimer1(timeOut);
 80005e4:	4b68      	ldr	r3, [pc, #416]	; (8000788 <fsm_manual_processing+0x1f0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fd1f 	bl	800102c <setTimer1>
				redDuration++;
 80005ee:	4b68      	ldr	r3, [pc, #416]	; (8000790 <fsm_manual_processing+0x1f8>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	4a66      	ldr	r2, [pc, #408]	; (8000790 <fsm_manual_processing+0x1f8>)
 80005f6:	6013      	str	r3, [r2, #0]
			if(isButtonPress(2)){
 80005f8:	2002      	movs	r0, #2
 80005fa:	f7ff fdb7 	bl	800016c <isButtonPress>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d009      	beq.n	8000618 <fsm_manual_processing+0x80>
				setTimer1(timeOut);
 8000604:	4b60      	ldr	r3, [pc, #384]	; (8000788 <fsm_manual_processing+0x1f0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fd0f 	bl	800102c <setTimer1>
				redDuration--;
 800060e:	4b60      	ldr	r3, [pc, #384]	; (8000790 <fsm_manual_processing+0x1f8>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	3b01      	subs	r3, #1
 8000614:	4a5e      	ldr	r2, [pc, #376]	; (8000790 <fsm_manual_processing+0x1f8>)
 8000616:	6013      	str	r3, [r2, #0]
			if(timer1_flag==1){
 8000618:	4b5e      	ldr	r3, [pc, #376]	; (8000794 <fsm_manual_processing+0x1fc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d108      	bne.n	8000632 <fsm_manual_processing+0x9a>
				status = AUTO_RED_GREEN;
 8000620:	4b58      	ldr	r3, [pc, #352]	; (8000784 <fsm_manual_processing+0x1ec>)
 8000622:	2201      	movs	r2, #1
 8000624:	601a      	str	r2, [r3, #0]
				numberCounter=0;
 8000626:	4b5c      	ldr	r3, [pc, #368]	; (8000798 <fsm_manual_processing+0x200>)
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
				timer0_flag=1;
 800062c:	4b57      	ldr	r3, [pc, #348]	; (800078c <fsm_manual_processing+0x1f4>)
 800062e:	2201      	movs	r2, #1
 8000630:	601a      	str	r2, [r3, #0]
			if(timer0_flag==1){
 8000632:	4b56      	ldr	r3, [pc, #344]	; (800078c <fsm_manual_processing+0x1f4>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b01      	cmp	r3, #1
 8000638:	f040 809c 	bne.w	8000774 <fsm_manual_processing+0x1dc>
				setTimer0(500);
 800063c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000640:	f000 fcda 	bl	8000ff8 <setTimer0>
				blinkAllRed();
 8000644:	f000 fc38 	bl	8000eb8 <blinkAllRed>
			break;
 8000648:	e094      	b.n	8000774 <fsm_manual_processing+0x1dc>
			if(isButtonPress(0)){
 800064a:	2000      	movs	r0, #0
 800064c:	f7ff fd8e 	bl	800016c <isButtonPress>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d00a      	beq.n	800066c <fsm_manual_processing+0xd4>
				setTimer1(timeOut);
 8000656:	4b4c      	ldr	r3, [pc, #304]	; (8000788 <fsm_manual_processing+0x1f0>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fce6 	bl	800102c <setTimer1>
				status = MAN_YELLOW;
 8000660:	4b48      	ldr	r3, [pc, #288]	; (8000784 <fsm_manual_processing+0x1ec>)
 8000662:	220e      	movs	r2, #14
 8000664:	601a      	str	r2, [r3, #0]
				timer0_flag=1;
 8000666:	4b49      	ldr	r3, [pc, #292]	; (800078c <fsm_manual_processing+0x1f4>)
 8000668:	2201      	movs	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
			if(isButtonPress(1)){
 800066c:	2001      	movs	r0, #1
 800066e:	f7ff fd7d 	bl	800016c <isButtonPress>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d009      	beq.n	800068c <fsm_manual_processing+0xf4>
				setTimer1(timeOut);
 8000678:	4b43      	ldr	r3, [pc, #268]	; (8000788 <fsm_manual_processing+0x1f0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fcd5 	bl	800102c <setTimer1>
				greenDuration++;
 8000682:	4b46      	ldr	r3, [pc, #280]	; (800079c <fsm_manual_processing+0x204>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	3301      	adds	r3, #1
 8000688:	4a44      	ldr	r2, [pc, #272]	; (800079c <fsm_manual_processing+0x204>)
 800068a:	6013      	str	r3, [r2, #0]
			if(isButtonPress(2)){
 800068c:	2002      	movs	r0, #2
 800068e:	f7ff fd6d 	bl	800016c <isButtonPress>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d009      	beq.n	80006ac <fsm_manual_processing+0x114>
				setTimer1(timeOut);
 8000698:	4b3b      	ldr	r3, [pc, #236]	; (8000788 <fsm_manual_processing+0x1f0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fcc5 	bl	800102c <setTimer1>
				greenDuration--;
 80006a2:	4b3e      	ldr	r3, [pc, #248]	; (800079c <fsm_manual_processing+0x204>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	4a3c      	ldr	r2, [pc, #240]	; (800079c <fsm_manual_processing+0x204>)
 80006aa:	6013      	str	r3, [r2, #0]
			if(timer1_flag==1){
 80006ac:	4b39      	ldr	r3, [pc, #228]	; (8000794 <fsm_manual_processing+0x1fc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d108      	bne.n	80006c6 <fsm_manual_processing+0x12e>
				status = AUTO_RED_GREEN;
 80006b4:	4b33      	ldr	r3, [pc, #204]	; (8000784 <fsm_manual_processing+0x1ec>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
				numberCounter=0;
 80006ba:	4b37      	ldr	r3, [pc, #220]	; (8000798 <fsm_manual_processing+0x200>)
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
				timer0_flag=1;
 80006c0:	4b32      	ldr	r3, [pc, #200]	; (800078c <fsm_manual_processing+0x1f4>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
			if(timer0_flag==1){
 80006c6:	4b31      	ldr	r3, [pc, #196]	; (800078c <fsm_manual_processing+0x1f4>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d154      	bne.n	8000778 <fsm_manual_processing+0x1e0>
				setTimer0(500);
 80006ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d2:	f000 fc91 	bl	8000ff8 <setTimer0>
				blinkAllGreen();
 80006d6:	f000 fc0d 	bl	8000ef4 <blinkAllGreen>
			break;
 80006da:	e04d      	b.n	8000778 <fsm_manual_processing+0x1e0>
			if(isButtonPress(0)){
 80006dc:	2000      	movs	r0, #0
 80006de:	f7ff fd45 	bl	800016c <isButtonPress>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d00b      	beq.n	8000700 <fsm_manual_processing+0x168>
				timer1_flag=1;
 80006e8:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <fsm_manual_processing+0x1fc>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
				status = AUTO_RED_GREEN;
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <fsm_manual_processing+0x1ec>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	601a      	str	r2, [r3, #0]
				numberCounter=0;
 80006f4:	4b28      	ldr	r3, [pc, #160]	; (8000798 <fsm_manual_processing+0x200>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
				timer0_flag=1;
 80006fa:	4b24      	ldr	r3, [pc, #144]	; (800078c <fsm_manual_processing+0x1f4>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	601a      	str	r2, [r3, #0]
			if(isButtonPress(1)){
 8000700:	2001      	movs	r0, #1
 8000702:	f7ff fd33 	bl	800016c <isButtonPress>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d009      	beq.n	8000720 <fsm_manual_processing+0x188>
				setTimer1(timeOut);
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <fsm_manual_processing+0x1f0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fc8b 	bl	800102c <setTimer1>
				yellowDuration++;
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <fsm_manual_processing+0x208>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	3301      	adds	r3, #1
 800071c:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <fsm_manual_processing+0x208>)
 800071e:	6013      	str	r3, [r2, #0]
			if(isButtonPress(2)){
 8000720:	2002      	movs	r0, #2
 8000722:	f7ff fd23 	bl	800016c <isButtonPress>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d009      	beq.n	8000740 <fsm_manual_processing+0x1a8>
				setTimer1(timeOut);
 800072c:	4b16      	ldr	r3, [pc, #88]	; (8000788 <fsm_manual_processing+0x1f0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4618      	mov	r0, r3
 8000732:	f000 fc7b 	bl	800102c <setTimer1>
				yellowDuration--;
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <fsm_manual_processing+0x208>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	3b01      	subs	r3, #1
 800073c:	4a18      	ldr	r2, [pc, #96]	; (80007a0 <fsm_manual_processing+0x208>)
 800073e:	6013      	str	r3, [r2, #0]
			if(timer1_flag==1){
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <fsm_manual_processing+0x1fc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d108      	bne.n	800075a <fsm_manual_processing+0x1c2>
				status = AUTO_RED_GREEN;
 8000748:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <fsm_manual_processing+0x1ec>)
 800074a:	2201      	movs	r2, #1
 800074c:	601a      	str	r2, [r3, #0]
				numberCounter=0;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <fsm_manual_processing+0x200>)
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
				timer0_flag=1;
 8000754:	4b0d      	ldr	r3, [pc, #52]	; (800078c <fsm_manual_processing+0x1f4>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
			if(timer0_flag==1){
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <fsm_manual_processing+0x1f4>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d10c      	bne.n	800077c <fsm_manual_processing+0x1e4>
				setTimer0(500);
 8000762:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000766:	f000 fc47 	bl	8000ff8 <setTimer0>
				blinkAllYellow();
 800076a:	f000 fbe1 	bl	8000f30 <blinkAllYellow>
			break;
 800076e:	e005      	b.n	800077c <fsm_manual_processing+0x1e4>
			break;
 8000770:	bf00      	nop
 8000772:	e004      	b.n	800077e <fsm_manual_processing+0x1e6>
			break;
 8000774:	bf00      	nop
 8000776:	e002      	b.n	800077e <fsm_manual_processing+0x1e6>
			break;
 8000778:	bf00      	nop
 800077a:	e000      	b.n	800077e <fsm_manual_processing+0x1e6>
			break;
 800077c:	bf00      	nop
	}
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000005c 	.word	0x2000005c
 8000788:	20000050 	.word	0x20000050
 800078c:	200000d4 	.word	0x200000d4
 8000790:	20000068 	.word	0x20000068
 8000794:	200000dc 	.word	0x200000dc
 8000798:	200000d0 	.word	0x200000d0
 800079c:	2000006c 	.word	0x2000006c
 80007a0:	20000070 	.word	0x20000070

080007a4 <fsm_pedestrian_processing>:
#include "software_timer.h"
#include "button.h"

int change = 1;

void fsm_pedestrian_processing(){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	switch (status_ped) {
 80007a8:	4b39      	ldr	r3, [pc, #228]	; (8000890 <fsm_pedestrian_processing+0xec>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b16      	cmp	r3, #22
 80007ae:	d037      	beq.n	8000820 <fsm_pedestrian_processing+0x7c>
 80007b0:	2b16      	cmp	r3, #22
 80007b2:	dc69      	bgt.n	8000888 <fsm_pedestrian_processing+0xe4>
 80007b4:	2b14      	cmp	r3, #20
 80007b6:	d061      	beq.n	800087c <fsm_pedestrian_processing+0xd8>
 80007b8:	2b15      	cmp	r3, #21
 80007ba:	d165      	bne.n	8000888 <fsm_pedestrian_processing+0xe4>
		case PED_STOP:
			if(change==1){
 80007bc:	4b35      	ldr	r3, [pc, #212]	; (8000894 <fsm_pedestrian_processing+0xf0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d107      	bne.n	80007d4 <fsm_pedestrian_processing+0x30>
				pedStop();
 80007c4:	f000 fbd2 	bl	8000f6c <pedStop>
				status_buzzer=BUZ_OFF;
 80007c8:	4b33      	ldr	r3, [pc, #204]	; (8000898 <fsm_pedestrian_processing+0xf4>)
 80007ca:	221f      	movs	r2, #31
 80007cc:	601a      	str	r2, [r3, #0]
				change=0;
 80007ce:	4b31      	ldr	r3, [pc, #196]	; (8000894 <fsm_pedestrian_processing+0xf0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
			}
			if(timer1_flag==1){
 80007d4:	4b31      	ldr	r3, [pc, #196]	; (800089c <fsm_pedestrian_processing+0xf8>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d102      	bne.n	80007e2 <fsm_pedestrian_processing+0x3e>
				status_ped=UNABLE;
 80007dc:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <fsm_pedestrian_processing+0xec>)
 80007de:	2214      	movs	r2, #20
 80007e0:	601a      	str	r2, [r3, #0]
			}
			if(status<=4&&status>=1){
 80007e2:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <fsm_pedestrian_processing+0xfc>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	dc14      	bgt.n	8000814 <fsm_pedestrian_processing+0x70>
 80007ea:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <fsm_pedestrian_processing+0xfc>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	dd10      	ble.n	8000814 <fsm_pedestrian_processing+0x70>
				if(numberCounter<=redDuration&&numberCounter>=1){
 80007f2:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <fsm_pedestrian_processing+0x100>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <fsm_pedestrian_processing+0x104>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	dc0e      	bgt.n	800081c <fsm_pedestrian_processing+0x78>
 80007fe:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <fsm_pedestrian_processing+0x100>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	dd0a      	ble.n	800081c <fsm_pedestrian_processing+0x78>
					status_ped=PED_GO;
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <fsm_pedestrian_processing+0xec>)
 8000808:	2216      	movs	r2, #22
 800080a:	601a      	str	r2, [r3, #0]
					change=1;
 800080c:	4b21      	ldr	r3, [pc, #132]	; (8000894 <fsm_pedestrian_processing+0xf0>)
 800080e:	2201      	movs	r2, #1
 8000810:	601a      	str	r2, [r3, #0]
				if(numberCounter<=redDuration&&numberCounter>=1){
 8000812:	e003      	b.n	800081c <fsm_pedestrian_processing+0x78>
				}
			}
			else{
				status_ped=UNABLE;
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <fsm_pedestrian_processing+0xec>)
 8000816:	2214      	movs	r2, #20
 8000818:	601a      	str	r2, [r3, #0]
			}

			break;
 800081a:	e036      	b.n	800088a <fsm_pedestrian_processing+0xe6>
				if(numberCounter<=redDuration&&numberCounter>=1){
 800081c:	bf00      	nop
			break;
 800081e:	e034      	b.n	800088a <fsm_pedestrian_processing+0xe6>
		case PED_GO:
			if(change==1){
 8000820:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <fsm_pedestrian_processing+0xf0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d10a      	bne.n	800083e <fsm_pedestrian_processing+0x9a>
				pedGo();
 8000828:	f000 fbb4 	bl	8000f94 <pedGo>
				setTimer3(200);
 800082c:	20c8      	movs	r0, #200	; 0xc8
 800082e:	f000 fc31 	bl	8001094 <setTimer3>
				status_buzzer=BUZ_ON;
 8000832:	4b19      	ldr	r3, [pc, #100]	; (8000898 <fsm_pedestrian_processing+0xf4>)
 8000834:	221e      	movs	r2, #30
 8000836:	601a      	str	r2, [r3, #0]
				change=0;
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <fsm_pedestrian_processing+0xf0>)
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
			}
			if(status<=4&&status>=1){
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <fsm_pedestrian_processing+0xfc>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b04      	cmp	r3, #4
 8000844:	dc14      	bgt.n	8000870 <fsm_pedestrian_processing+0xcc>
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <fsm_pedestrian_processing+0xfc>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	dd10      	ble.n	8000870 <fsm_pedestrian_processing+0xcc>
				if(numberCounter>=(redDuration+1)||numberCounter==0){
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <fsm_pedestrian_processing+0x104>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <fsm_pedestrian_processing+0x100>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	429a      	cmp	r2, r3
 8000858:	db03      	blt.n	8000862 <fsm_pedestrian_processing+0xbe>
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <fsm_pedestrian_processing+0x100>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d10a      	bne.n	8000878 <fsm_pedestrian_processing+0xd4>
					status_ped=PED_STOP;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <fsm_pedestrian_processing+0xec>)
 8000864:	2215      	movs	r2, #21
 8000866:	601a      	str	r2, [r3, #0]
					change =1;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <fsm_pedestrian_processing+0xf0>)
 800086a:	2201      	movs	r2, #1
 800086c:	601a      	str	r2, [r3, #0]
				if(numberCounter>=(redDuration+1)||numberCounter==0){
 800086e:	e003      	b.n	8000878 <fsm_pedestrian_processing+0xd4>
				}
			}
			else{
				status_ped=UNABLE;
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <fsm_pedestrian_processing+0xec>)
 8000872:	2214      	movs	r2, #20
 8000874:	601a      	str	r2, [r3, #0]
			}

			break;
 8000876:	e008      	b.n	800088a <fsm_pedestrian_processing+0xe6>
				if(numberCounter>=(redDuration+1)||numberCounter==0){
 8000878:	bf00      	nop
			break;
 800087a:	e006      	b.n	800088a <fsm_pedestrian_processing+0xe6>
		case UNABLE:
			change=1;
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <fsm_pedestrian_processing+0xf0>)
 800087e:	2201      	movs	r2, #1
 8000880:	601a      	str	r2, [r3, #0]
			pedOff();
 8000882:	f000 fb9b 	bl	8000fbc <pedOff>
			break;
 8000886:	e000      	b.n	800088a <fsm_pedestrian_processing+0xe6>
		default:
			break;
 8000888:	bf00      	nop
	}
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000060 	.word	0x20000060
 8000894:	20000054 	.word	0x20000054
 8000898:	20000064 	.word	0x20000064
 800089c:	200000dc 	.word	0x200000dc
 80008a0:	2000005c 	.word	0x2000005c
 80008a4:	200000d0 	.word	0x200000d0
 80008a8:	20000068 	.word	0x20000068

080008ac <fsm_buzzer_processing>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void fsm_buzzer_processing(){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	switch (status_buzzer) {
 80008b0:	4b23      	ldr	r3, [pc, #140]	; (8000940 <fsm_buzzer_processing+0x94>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b1e      	cmp	r3, #30
 80008b6:	d002      	beq.n	80008be <fsm_buzzer_processing+0x12>
 80008b8:	2b1f      	cmp	r3, #31
 80008ba:	d034      	beq.n	8000926 <fsm_buzzer_processing+0x7a>
		case BUZ_OFF:
			dutyCycle=0;
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dutyCycle);
			break;
		default:
			break;
 80008bc:	e03d      	b.n	800093a <fsm_buzzer_processing+0x8e>
			if(timer3_flag==1){
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <fsm_buzzer_processing+0x98>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d138      	bne.n	8000938 <fsm_buzzer_processing+0x8c>
				if(redDuration<=5){
 80008c6:	4b20      	ldr	r3, [pc, #128]	; (8000948 <fsm_buzzer_processing+0x9c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b05      	cmp	r3, #5
 80008cc:	dc0d      	bgt.n	80008ea <fsm_buzzer_processing+0x3e>
					setTimer3(200);
 80008ce:	20c8      	movs	r0, #200	; 0xc8
 80008d0:	f000 fbe0 	bl	8001094 <setTimer3>
					dutyCycle+=40;
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <fsm_buzzer_processing+0xa0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	3328      	adds	r3, #40	; 0x28
 80008da:	4a1c      	ldr	r2, [pc, #112]	; (800094c <fsm_buzzer_processing+0xa0>)
 80008dc:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dutyCycle);
 80008de:	4b1b      	ldr	r3, [pc, #108]	; (800094c <fsm_buzzer_processing+0xa0>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <fsm_buzzer_processing+0xa4>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80008e8:	e026      	b.n	8000938 <fsm_buzzer_processing+0x8c>
					if((redDuration-numberCounter)<=5){
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <fsm_buzzer_processing+0x9c>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <fsm_buzzer_processing+0xa8>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	2b05      	cmp	r3, #5
 80008f6:	dc1f      	bgt.n	8000938 <fsm_buzzer_processing+0x8c>
						setTimer3(200);
 80008f8:	20c8      	movs	r0, #200	; 0xc8
 80008fa:	f000 fbcb 	bl	8001094 <setTimer3>
						dutyCycle+=40;
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <fsm_buzzer_processing+0xa0>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	3328      	adds	r3, #40	; 0x28
 8000904:	4a11      	ldr	r2, [pc, #68]	; (800094c <fsm_buzzer_processing+0xa0>)
 8000906:	6013      	str	r3, [r2, #0]
						if(dutyCycle>=1000) dutyCycle=900;
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <fsm_buzzer_processing+0xa0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000910:	db03      	blt.n	800091a <fsm_buzzer_processing+0x6e>
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <fsm_buzzer_processing+0xa0>)
 8000914:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000918:	601a      	str	r2, [r3, #0]
						__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dutyCycle);
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <fsm_buzzer_processing+0xa0>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <fsm_buzzer_processing+0xa4>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000924:	e008      	b.n	8000938 <fsm_buzzer_processing+0x8c>
			dutyCycle=0;
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <fsm_buzzer_processing+0xa0>)
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dutyCycle);
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <fsm_buzzer_processing+0xa0>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <fsm_buzzer_processing+0xa4>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000936:	e000      	b.n	800093a <fsm_buzzer_processing+0x8e>
			break;
 8000938:	bf00      	nop
	}
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000064 	.word	0x20000064
 8000944:	200000ec 	.word	0x200000ec
 8000948:	20000068 	.word	0x20000068
 800094c:	200000cc 	.word	0x200000cc
 8000950:	200000fc 	.word	0x200000fc
 8000954:	200000d0 	.word	0x200000d0

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095c:	f000 fd70 	bl	8001440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000960:	f000 f83a 	bl	80009d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000964:	f000 f966 	bl	8000c34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000968:	f000 f93a 	bl	8000be0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800096c:	f000 f8c2 	bl	8000af4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000970:	f000 f874 	bl	8000a5c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000974:	4812      	ldr	r0, [pc, #72]	; (80009c0 <main+0x68>)
 8000976:	f001 fd2b 	bl	80023d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800097a:	2100      	movs	r1, #0
 800097c:	4811      	ldr	r0, [pc, #68]	; (80009c4 <main+0x6c>)
 800097e:	f001 fdd1 	bl	8002524 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  timer0_flag=1;//Led
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <main+0x70>)
 8000984:	2201      	movs	r2, #1
 8000986:	601a      	str	r2, [r3, #0]
  timer1_flag=1;//timeOutMan || timeOutPed
 8000988:	4b10      	ldr	r3, [pc, #64]	; (80009cc <main+0x74>)
 800098a:	2201      	movs	r2, #1
 800098c:	601a      	str	r2, [r3, #0]
  timer2_flag=1;//blink PA5
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <main+0x78>)
 8000990:	2201      	movs	r2, #1
 8000992:	601a      	str	r2, [r3, #0]
  timer3_flag=1;//buzzer
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <main+0x7c>)
 8000996:	2201      	movs	r2, #1
 8000998:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_auto_processing();
 800099a:	f7ff fccf 	bl	800033c <fsm_auto_processing>
	  fsm_manual_processing();
 800099e:	f7ff fdfb 	bl	8000598 <fsm_manual_processing>
	  fsm_pedestrian_processing();
 80009a2:	f7ff feff 	bl	80007a4 <fsm_pedestrian_processing>
	  fsm_buzzer_processing();
 80009a6:	f7ff ff81 	bl	80008ac <fsm_buzzer_processing>
	  if(timer2_flag==1){
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <main+0x78>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d1f3      	bne.n	800099a <main+0x42>
		  setTimer2(1000);
 80009b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b6:	f000 fb53 	bl	8001060 <setTimer2>
		  blinkPA51s();
 80009ba:	f000 fb13 	bl	8000fe4 <blinkPA51s>
	  fsm_auto_processing();
 80009be:	e7ec      	b.n	800099a <main+0x42>
 80009c0:	20000144 	.word	0x20000144
 80009c4:	200000fc 	.word	0x200000fc
 80009c8:	200000d4 	.word	0x200000d4
 80009cc:	200000dc 	.word	0x200000dc
 80009d0:	200000e4 	.word	0x200000e4
 80009d4:	200000ec 	.word	0x200000ec

080009d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b090      	sub	sp, #64	; 0x40
 80009dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 0318 	add.w	r3, r7, #24
 80009e2:	2228      	movs	r2, #40	; 0x28
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f002 fd00 	bl	80033ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009fe:	2301      	movs	r3, #1
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a02:	2310      	movs	r3, #16
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a06:	2302      	movs	r3, #2
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a0e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a14:	f107 0318 	add.w	r3, r7, #24
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 f86f 	bl	8001afc <HAL_RCC_OscConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a24:	f000 f9b2 	bl	8000d8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a28:	230f      	movs	r3, #15
 8000a2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2102      	movs	r1, #2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f001 fada 	bl	8001ffc <HAL_RCC_ClockConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a4e:	f000 f99d 	bl	8000d8c <Error_Handler>
  }
}
 8000a52:	bf00      	nop
 8000a54:	3740      	adds	r7, #64	; 0x40
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a70:	463b      	mov	r3, r7
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a78:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <MX_TIM2_Init+0x94>)
 8000a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <MX_TIM2_Init+0x94>)
 8000a82:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000a86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <MX_TIM2_Init+0x94>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <MX_TIM2_Init+0x94>)
 8000a90:	220a      	movs	r2, #10
 8000a92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <MX_TIM2_Init+0x94>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <MX_TIM2_Init+0x94>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aa0:	4813      	ldr	r0, [pc, #76]	; (8000af0 <MX_TIM2_Init+0x94>)
 8000aa2:	f001 fc45 	bl	8002330 <HAL_TIM_Base_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000aac:	f000 f96e 	bl	8000d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	4619      	mov	r1, r3
 8000abc:	480c      	ldr	r0, [pc, #48]	; (8000af0 <MX_TIM2_Init+0x94>)
 8000abe:	f001 ff99 	bl	80029f4 <HAL_TIM_ConfigClockSource>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ac8:	f000 f960 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000acc:	2300      	movs	r3, #0
 8000ace:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_TIM2_Init+0x94>)
 8000ada:	f002 fb17 	bl	800310c <HAL_TIMEx_MasterConfigSynchronization>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ae4:	f000 f952 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000144 	.word	0x20000144

08000af4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08e      	sub	sp, #56	; 0x38
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b08:	f107 0320 	add.w	r3, r7, #32
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
 8000b20:	615a      	str	r2, [r3, #20]
 8000b22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b24:	4b2c      	ldr	r3, [pc, #176]	; (8000bd8 <MX_TIM3_Init+0xe4>)
 8000b26:	4a2d      	ldr	r2, [pc, #180]	; (8000bdc <MX_TIM3_Init+0xe8>)
 8000b28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000b2a:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <MX_TIM3_Init+0xe4>)
 8000b2c:	223f      	movs	r2, #63	; 0x3f
 8000b2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <MX_TIM3_Init+0xe4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000b36:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <MX_TIM3_Init+0xe4>)
 8000b38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3e:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <MX_TIM3_Init+0xe4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b44:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <MX_TIM3_Init+0xe4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b4a:	4823      	ldr	r0, [pc, #140]	; (8000bd8 <MX_TIM3_Init+0xe4>)
 8000b4c:	f001 fbf0 	bl	8002330 <HAL_TIM_Base_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b56:	f000 f919 	bl	8000d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b64:	4619      	mov	r1, r3
 8000b66:	481c      	ldr	r0, [pc, #112]	; (8000bd8 <MX_TIM3_Init+0xe4>)
 8000b68:	f001 ff44 	bl	80029f4 <HAL_TIM_ConfigClockSource>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b72:	f000 f90b 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b76:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <MX_TIM3_Init+0xe4>)
 8000b78:	f001 fc7c 	bl	8002474 <HAL_TIM_PWM_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b82:	f000 f903 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b8e:	f107 0320 	add.w	r3, r7, #32
 8000b92:	4619      	mov	r1, r3
 8000b94:	4810      	ldr	r0, [pc, #64]	; (8000bd8 <MX_TIM3_Init+0xe4>)
 8000b96:	f002 fab9 	bl	800310c <HAL_TIMEx_MasterConfigSynchronization>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ba0:	f000 f8f4 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba4:	2360      	movs	r3, #96	; 0x60
 8000ba6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <MX_TIM3_Init+0xe4>)
 8000bbc:	f001 fe5c 	bl	8002878 <HAL_TIM_PWM_ConfigChannel>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000bc6:	f000 f8e1 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bca:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <MX_TIM3_Init+0xe4>)
 8000bcc:	f000 fb58 	bl	8001280 <HAL_TIM_MspPostInit>

}
 8000bd0:	bf00      	nop
 8000bd2:	3738      	adds	r7, #56	; 0x38
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200000fc 	.word	0x200000fc
 8000bdc:	40000400 	.word	0x40000400

08000be0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <MX_USART2_UART_Init+0x50>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c18:	f002 fae8 	bl	80031ec <HAL_UART_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c22:	f000 f8b3 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	2000018c 	.word	0x2000018c
 8000c30:	40004400 	.word	0x40004400

08000c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c48:	4b45      	ldr	r3, [pc, #276]	; (8000d60 <MX_GPIO_Init+0x12c>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a44      	ldr	r2, [pc, #272]	; (8000d60 <MX_GPIO_Init+0x12c>)
 8000c4e:	f043 0310 	orr.w	r3, r3, #16
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b42      	ldr	r3, [pc, #264]	; (8000d60 <MX_GPIO_Init+0x12c>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0310 	and.w	r3, r3, #16
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c60:	4b3f      	ldr	r3, [pc, #252]	; (8000d60 <MX_GPIO_Init+0x12c>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a3e      	ldr	r2, [pc, #248]	; (8000d60 <MX_GPIO_Init+0x12c>)
 8000c66:	f043 0320 	orr.w	r3, r3, #32
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b3c      	ldr	r3, [pc, #240]	; (8000d60 <MX_GPIO_Init+0x12c>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0320 	and.w	r3, r3, #32
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c78:	4b39      	ldr	r3, [pc, #228]	; (8000d60 <MX_GPIO_Init+0x12c>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4a38      	ldr	r2, [pc, #224]	; (8000d60 <MX_GPIO_Init+0x12c>)
 8000c7e:	f043 0304 	orr.w	r3, r3, #4
 8000c82:	6193      	str	r3, [r2, #24]
 8000c84:	4b36      	ldr	r3, [pc, #216]	; (8000d60 <MX_GPIO_Init+0x12c>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c90:	4b33      	ldr	r3, [pc, #204]	; (8000d60 <MX_GPIO_Init+0x12c>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a32      	ldr	r2, [pc, #200]	; (8000d60 <MX_GPIO_Init+0x12c>)
 8000c96:	f043 0308 	orr.w	r3, r3, #8
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b30      	ldr	r3, [pc, #192]	; (8000d60 <MX_GPIO_Init+0x12c>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0308 	and.w	r3, r3, #8
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|PL_2_Pin|TL1_1_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000cae:	482d      	ldr	r0, [pc, #180]	; (8000d64 <MX_GPIO_Init+0x130>)
 8000cb0:	f000 fed1 	bl	8001a56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PL_1_Pin|TL1_2_Pin|TL2_1_Pin|TL2_2_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000cba:	482b      	ldr	r0, [pc, #172]	; (8000d68 <MX_GPIO_Init+0x134>)
 8000cbc:	f000 fecb 	bl	8001a56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc6:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <MX_GPIO_Init+0x138>)
 8000cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4826      	ldr	r0, [pc, #152]	; (8000d70 <MX_GPIO_Init+0x13c>)
 8000cd6:	f000 fd23 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_P_Pin Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_P_Pin|Button_1_Pin|Button_2_Pin;
 8000cda:	2313      	movs	r3, #19
 8000cdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	4619      	mov	r1, r3
 8000cec:	481d      	ldr	r0, [pc, #116]	; (8000d64 <MX_GPIO_Init+0x130>)
 8000cee:	f000 fd17 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin PL_2_Pin TL1_1_Pin */
  GPIO_InitStruct.Pin = LED_Pin|PL_2_Pin|TL1_1_Pin;
 8000cf2:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2302      	movs	r3, #2
 8000d02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4816      	ldr	r0, [pc, #88]	; (8000d64 <MX_GPIO_Init+0x130>)
 8000d0c:	f000 fd08 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000d10:	2301      	movs	r3, #1
 8000d12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4619      	mov	r1, r3
 8000d22:	4811      	ldr	r0, [pc, #68]	; (8000d68 <MX_GPIO_Init+0x134>)
 8000d24:	f000 fcfc 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PL_1_Pin TL1_2_Pin TL2_1_Pin TL2_2_Pin */
  GPIO_InitStruct.Pin = PL_1_Pin|TL1_2_Pin|TL2_1_Pin|TL2_2_Pin;
 8000d28:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000d2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2302      	movs	r3, #2
 8000d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 0310 	add.w	r3, r7, #16
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4809      	ldr	r0, [pc, #36]	; (8000d68 <MX_GPIO_Init+0x134>)
 8000d42:	f000 fced 	bl	8001720 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2028      	movs	r0, #40	; 0x28
 8000d4c:	f000 fcb1 	bl	80016b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d50:	2028      	movs	r0, #40	; 0x28
 8000d52:	f000 fcca 	bl	80016ea <HAL_NVIC_EnableIRQ>

}
 8000d56:	bf00      	nop
 8000d58:	3720      	adds	r7, #32
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40010800 	.word	0x40010800
 8000d68:	40010c00 	.word	0x40010c00
 8000d6c:	10110000 	.word	0x10110000
 8000d70:	40011000 	.word	0x40011000

08000d74 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8000d7c:	f7ff fa10 	bl	80001a0 <getKeyInput>
	runTimer();
 8000d80:	f000 f9a2 	bl	80010c8 <runTimer>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <Error_Handler+0x8>
	...

08000d98 <turnOnRed1>:

int ledR=1;
int ledY=1;
int ledG=1;

void turnOnRed1(){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1_1_GPIO_Port, TL1_1_Pin, 1);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <turnOnRed1+0x20>)
 8000da4:	f000 fe57 	bl	8001a56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1_2_GPIO_Port, TL1_2_Pin, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2108      	movs	r1, #8
 8000dac:	4803      	ldr	r0, [pc, #12]	; (8000dbc <turnOnRed1+0x24>)
 8000dae:	f000 fe52 	bl	8001a56 <HAL_GPIO_WritePin>
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40010800 	.word	0x40010800
 8000dbc:	40010c00 	.word	0x40010c00

08000dc0 <turnOnGreen1>:
void turnOnGreen1(){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1_1_GPIO_Port, TL1_1_Pin, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <turnOnGreen1+0x20>)
 8000dcc:	f000 fe43 	bl	8001a56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1_2_GPIO_Port, TL1_2_Pin, 1);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2108      	movs	r1, #8
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <turnOnGreen1+0x24>)
 8000dd6:	f000 fe3e 	bl	8001a56 <HAL_GPIO_WritePin>
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40010800 	.word	0x40010800
 8000de4:	40010c00 	.word	0x40010c00

08000de8 <turnOnYellow1>:
void turnOnYellow1(){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1_1_GPIO_Port, TL1_1_Pin, 1);
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <turnOnYellow1+0x20>)
 8000df4:	f000 fe2f 	bl	8001a56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1_2_GPIO_Port, TL1_2_Pin, 1);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2108      	movs	r1, #8
 8000dfc:	4803      	ldr	r0, [pc, #12]	; (8000e0c <turnOnYellow1+0x24>)
 8000dfe:	f000 fe2a 	bl	8001a56 <HAL_GPIO_WritePin>
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40010800 	.word	0x40010800
 8000e0c:	40010c00 	.word	0x40010c00

08000e10 <turnOff1>:
void turnOff1(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1_1_GPIO_Port, TL1_1_Pin, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <turnOff1+0x20>)
 8000e1c:	f000 fe1b 	bl	8001a56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1_2_GPIO_Port, TL1_2_Pin, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2108      	movs	r1, #8
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <turnOff1+0x24>)
 8000e26:	f000 fe16 	bl	8001a56 <HAL_GPIO_WritePin>
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40010800 	.word	0x40010800
 8000e34:	40010c00 	.word	0x40010c00

08000e38 <turnOnRed2>:

void turnOnRed2(){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2_1_GPIO_Port, TL2_1_Pin, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2110      	movs	r1, #16
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <turnOnRed2+0x1c>)
 8000e42:	f000 fe08 	bl	8001a56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2_2_GPIO_Port, TL2_2_Pin, 1);
 8000e46:	2201      	movs	r2, #1
 8000e48:	2120      	movs	r1, #32
 8000e4a:	4802      	ldr	r0, [pc, #8]	; (8000e54 <turnOnRed2+0x1c>)
 8000e4c:	f000 fe03 	bl	8001a56 <HAL_GPIO_WritePin>
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40010c00 	.word	0x40010c00

08000e58 <turnOnGreen2>:
void turnOnGreen2(){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2_1_GPIO_Port, TL2_1_Pin, 1);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2110      	movs	r1, #16
 8000e60:	4804      	ldr	r0, [pc, #16]	; (8000e74 <turnOnGreen2+0x1c>)
 8000e62:	f000 fdf8 	bl	8001a56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2_2_GPIO_Port, TL2_2_Pin, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2120      	movs	r1, #32
 8000e6a:	4802      	ldr	r0, [pc, #8]	; (8000e74 <turnOnGreen2+0x1c>)
 8000e6c:	f000 fdf3 	bl	8001a56 <HAL_GPIO_WritePin>
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40010c00 	.word	0x40010c00

08000e78 <turnOnYellow2>:
void turnOnYellow2(){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2_1_GPIO_Port, TL2_1_Pin, 1);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2110      	movs	r1, #16
 8000e80:	4804      	ldr	r0, [pc, #16]	; (8000e94 <turnOnYellow2+0x1c>)
 8000e82:	f000 fde8 	bl	8001a56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2_2_GPIO_Port, TL2_2_Pin, 1);
 8000e86:	2201      	movs	r2, #1
 8000e88:	2120      	movs	r1, #32
 8000e8a:	4802      	ldr	r0, [pc, #8]	; (8000e94 <turnOnYellow2+0x1c>)
 8000e8c:	f000 fde3 	bl	8001a56 <HAL_GPIO_WritePin>
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40010c00 	.word	0x40010c00

08000e98 <turnOff2>:
void turnOff2(){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2_1_GPIO_Port, TL2_1_Pin, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <turnOff2+0x1c>)
 8000ea2:	f000 fdd8 	bl	8001a56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2_2_GPIO_Port, TL2_2_Pin, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2120      	movs	r1, #32
 8000eaa:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <turnOff2+0x1c>)
 8000eac:	f000 fdd3 	bl	8001a56 <HAL_GPIO_WritePin>
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40010c00 	.word	0x40010c00

08000eb8 <blinkAllRed>:

void blinkAllRed(){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	if(ledR==1){
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <blinkAllRed+0x38>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d104      	bne.n	8000ece <blinkAllRed+0x16>
		turnOnRed1();
 8000ec4:	f7ff ff68 	bl	8000d98 <turnOnRed1>
		turnOnRed2();
 8000ec8:	f7ff ffb6 	bl	8000e38 <turnOnRed2>
 8000ecc:	e003      	b.n	8000ed6 <blinkAllRed+0x1e>
	}
	else{
		turnOff1();
 8000ece:	f7ff ff9f 	bl	8000e10 <turnOff1>
		turnOff2();
 8000ed2:	f7ff ffe1 	bl	8000e98 <turnOff2>
	}
	ledR=!ledR;
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <blinkAllRed+0x38>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	bf0c      	ite	eq
 8000ede:	2301      	moveq	r3, #1
 8000ee0:	2300      	movne	r3, #0
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b02      	ldr	r3, [pc, #8]	; (8000ef0 <blinkAllRed+0x38>)
 8000ee8:	601a      	str	r2, [r3, #0]
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000074 	.word	0x20000074

08000ef4 <blinkAllGreen>:
void blinkAllGreen(){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	if(ledG==1){
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <blinkAllGreen+0x38>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d104      	bne.n	8000f0a <blinkAllGreen+0x16>
		turnOnGreen1();
 8000f00:	f7ff ff5e 	bl	8000dc0 <turnOnGreen1>
		turnOnGreen2();
 8000f04:	f7ff ffa8 	bl	8000e58 <turnOnGreen2>
 8000f08:	e003      	b.n	8000f12 <blinkAllGreen+0x1e>
	}
	else{
		turnOff1();
 8000f0a:	f7ff ff81 	bl	8000e10 <turnOff1>
		turnOff2();
 8000f0e:	f7ff ffc3 	bl	8000e98 <turnOff2>
	}
	ledG=!ledG;
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <blinkAllGreen+0x38>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bf0c      	ite	eq
 8000f1a:	2301      	moveq	r3, #1
 8000f1c:	2300      	movne	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b02      	ldr	r3, [pc, #8]	; (8000f2c <blinkAllGreen+0x38>)
 8000f24:	601a      	str	r2, [r3, #0]
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000007c 	.word	0x2000007c

08000f30 <blinkAllYellow>:
void blinkAllYellow(){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	if(ledY==1){
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <blinkAllYellow+0x38>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d104      	bne.n	8000f46 <blinkAllYellow+0x16>
		turnOnYellow1();
 8000f3c:	f7ff ff54 	bl	8000de8 <turnOnYellow1>
		turnOnYellow2();
 8000f40:	f7ff ff9a 	bl	8000e78 <turnOnYellow2>
 8000f44:	e003      	b.n	8000f4e <blinkAllYellow+0x1e>
	}
	else{
		turnOff1();
 8000f46:	f7ff ff63 	bl	8000e10 <turnOff1>
		turnOff2();
 8000f4a:	f7ff ffa5 	bl	8000e98 <turnOff2>
	}
	ledY=!ledY;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <blinkAllYellow+0x38>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	bf0c      	ite	eq
 8000f56:	2301      	moveq	r3, #1
 8000f58:	2300      	movne	r3, #0
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b02      	ldr	r3, [pc, #8]	; (8000f68 <blinkAllYellow+0x38>)
 8000f60:	601a      	str	r2, [r3, #0]
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000078 	.word	0x20000078

08000f6c <pedStop>:
void pedStop(){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PL_1_GPIO_Port, PL_1_Pin, 1);
 8000f70:	2201      	movs	r2, #1
 8000f72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <pedStop+0x20>)
 8000f78:	f000 fd6d 	bl	8001a56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PL_2_GPIO_Port, PL_2_Pin, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f82:	4803      	ldr	r0, [pc, #12]	; (8000f90 <pedStop+0x24>)
 8000f84:	f000 fd67 	bl	8001a56 <HAL_GPIO_WritePin>
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40010c00 	.word	0x40010c00
 8000f90:	40010800 	.word	0x40010800

08000f94 <pedGo>:
void pedGo(){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PL_1_GPIO_Port, PL_1_Pin, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <pedGo+0x20>)
 8000fa0:	f000 fd59 	bl	8001a56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PL_2_GPIO_Port, PL_2_Pin, 1);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000faa:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <pedGo+0x24>)
 8000fac:	f000 fd53 	bl	8001a56 <HAL_GPIO_WritePin>

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40010c00 	.word	0x40010c00
 8000fb8:	40010800 	.word	0x40010800

08000fbc <pedOff>:
void pedOff(){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PL_1_GPIO_Port, PL_1_Pin, 0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <pedOff+0x20>)
 8000fc8:	f000 fd45 	bl	8001a56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PL_2_GPIO_Port, PL_2_Pin, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd2:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <pedOff+0x24>)
 8000fd4:	f000 fd3f 	bl	8001a56 <HAL_GPIO_WritePin>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40010c00 	.word	0x40010c00
 8000fe0:	40010800 	.word	0x40010800

08000fe4 <blinkPA51s>:

void blinkPA51s(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000fe8:	2120      	movs	r1, #32
 8000fea:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <blinkPA51s+0x10>)
 8000fec:	f000 fd4b 	bl	8001a86 <HAL_GPIO_TogglePin>
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40010800 	.word	0x40010800

08000ff8 <setTimer0>:

//Timer0
int timer0_flag=0;
int timer0_counter=0;

void setTimer0(int duration){
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	timer0_counter=duration/TICK;
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <setTimer0+0x28>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	fb92 f3f3 	sdiv	r3, r2, r3
 800100a:	4a06      	ldr	r2, [pc, #24]	; (8001024 <setTimer0+0x2c>)
 800100c:	6013      	str	r3, [r2, #0]
	timer0_flag=0;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <setTimer0+0x30>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000080 	.word	0x20000080
 8001024:	200000d8 	.word	0x200000d8
 8001028:	200000d4 	.word	0x200000d4

0800102c <setTimer1>:

//Timer1
int timer1_flag=0;
int timer1_counter=0;

void setTimer1(int duration){
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	timer1_counter=duration/TICK;
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <setTimer1+0x28>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	fb92 f3f3 	sdiv	r3, r2, r3
 800103e:	4a06      	ldr	r2, [pc, #24]	; (8001058 <setTimer1+0x2c>)
 8001040:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <setTimer1+0x30>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000080 	.word	0x20000080
 8001058:	200000e0 	.word	0x200000e0
 800105c:	200000dc 	.word	0x200000dc

08001060 <setTimer2>:

//Timer2
int timer2_flag=0;
int timer2_counter=0;

void setTimer2(int duration){
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	timer2_counter=duration/TICK;
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <setTimer2+0x28>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001072:	4a06      	ldr	r2, [pc, #24]	; (800108c <setTimer2+0x2c>)
 8001074:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <setTimer2+0x30>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000080 	.word	0x20000080
 800108c:	200000e8 	.word	0x200000e8
 8001090:	200000e4 	.word	0x200000e4

08001094 <setTimer3>:

//Timer3
int timer3_flag=0;
int timer3_counter=0;

void setTimer3(int duration){
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	timer3_counter=duration/TICK;
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <setTimer3+0x28>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80010a6:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <setTimer3+0x2c>)
 80010a8:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <setTimer3+0x30>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000080 	.word	0x20000080
 80010c0:	200000f0 	.word	0x200000f0
 80010c4:	200000ec 	.word	0x200000ec

080010c8 <runTimer>:
}

//Timer N

//Run Timer
void runTimer(){
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	if(timer0_counter>0){
 80010cc:	4b29      	ldr	r3, [pc, #164]	; (8001174 <runTimer+0xac>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dd0b      	ble.n	80010ec <runTimer+0x24>
		timer0_counter--;
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <runTimer+0xac>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3b01      	subs	r3, #1
 80010da:	4a26      	ldr	r2, [pc, #152]	; (8001174 <runTimer+0xac>)
 80010dc:	6013      	str	r3, [r2, #0]
		if(timer0_counter==0) timer0_flag=1;
 80010de:	4b25      	ldr	r3, [pc, #148]	; (8001174 <runTimer+0xac>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d102      	bne.n	80010ec <runTimer+0x24>
 80010e6:	4b24      	ldr	r3, [pc, #144]	; (8001178 <runTimer+0xb0>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	601a      	str	r2, [r3, #0]
	}
	if(timer1_counter>0){
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <runTimer+0xb4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	dd0b      	ble.n	800110c <runTimer+0x44>
		timer1_counter--;
 80010f4:	4b21      	ldr	r3, [pc, #132]	; (800117c <runTimer+0xb4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	4a20      	ldr	r2, [pc, #128]	; (800117c <runTimer+0xb4>)
 80010fc:	6013      	str	r3, [r2, #0]
		if(timer1_counter==0) timer1_flag=1;
 80010fe:	4b1f      	ldr	r3, [pc, #124]	; (800117c <runTimer+0xb4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d102      	bne.n	800110c <runTimer+0x44>
 8001106:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <runTimer+0xb8>)
 8001108:	2201      	movs	r2, #1
 800110a:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter>0){
 800110c:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <runTimer+0xbc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	dd0b      	ble.n	800112c <runTimer+0x64>
		timer2_counter--;
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <runTimer+0xbc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	3b01      	subs	r3, #1
 800111a:	4a1a      	ldr	r2, [pc, #104]	; (8001184 <runTimer+0xbc>)
 800111c:	6013      	str	r3, [r2, #0]
		if(timer2_counter==0) timer2_flag=1;
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <runTimer+0xbc>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d102      	bne.n	800112c <runTimer+0x64>
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <runTimer+0xc0>)
 8001128:	2201      	movs	r2, #1
 800112a:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter>0){
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <runTimer+0xc4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	dd0b      	ble.n	800114c <runTimer+0x84>
		timer3_counter--;
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <runTimer+0xc4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3b01      	subs	r3, #1
 800113a:	4a14      	ldr	r2, [pc, #80]	; (800118c <runTimer+0xc4>)
 800113c:	6013      	str	r3, [r2, #0]
		if(timer3_counter==0) timer3_flag=1;
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <runTimer+0xc4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d102      	bne.n	800114c <runTimer+0x84>
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <runTimer+0xc8>)
 8001148:	2201      	movs	r2, #1
 800114a:	601a      	str	r2, [r3, #0]
	}
	if(timer4_counter>0){
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <runTimer+0xcc>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	dd0b      	ble.n	800116c <runTimer+0xa4>
		timer4_counter--;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <runTimer+0xcc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	3b01      	subs	r3, #1
 800115a:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <runTimer+0xcc>)
 800115c:	6013      	str	r3, [r2, #0]
		if(timer4_counter==0) timer4_flag=1;
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <runTimer+0xcc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d102      	bne.n	800116c <runTimer+0xa4>
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <runTimer+0xd0>)
 8001168:	2201      	movs	r2, #1
 800116a:	601a      	str	r2, [r3, #0]
	}
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	200000d8 	.word	0x200000d8
 8001178:	200000d4 	.word	0x200000d4
 800117c:	200000e0 	.word	0x200000e0
 8001180:	200000dc 	.word	0x200000dc
 8001184:	200000e8 	.word	0x200000e8
 8001188:	200000e4 	.word	0x200000e4
 800118c:	200000f0 	.word	0x200000f0
 8001190:	200000ec 	.word	0x200000ec
 8001194:	200000f8 	.word	0x200000f8
 8001198:	200000f4 	.word	0x200000f4

0800119c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_MspInit+0x5c>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <HAL_MspInit+0x5c>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6193      	str	r3, [r2, #24]
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_MspInit+0x5c>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <HAL_MspInit+0x5c>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <HAL_MspInit+0x5c>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c4:	61d3      	str	r3, [r2, #28]
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <HAL_MspInit+0x5c>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_MspInit+0x60>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <HAL_MspInit+0x60>)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010000 	.word	0x40010000

08001200 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001210:	d114      	bne.n	800123c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <HAL_TIM_Base_MspInit+0x78>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a18      	ldr	r2, [pc, #96]	; (8001278 <HAL_TIM_Base_MspInit+0x78>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	61d3      	str	r3, [r2, #28]
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <HAL_TIM_Base_MspInit+0x78>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	201c      	movs	r0, #28
 8001230:	f000 fa3f 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001234:	201c      	movs	r0, #28
 8001236:	f000 fa58 	bl	80016ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800123a:	e018      	b.n	800126e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0e      	ldr	r2, [pc, #56]	; (800127c <HAL_TIM_Base_MspInit+0x7c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d113      	bne.n	800126e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <HAL_TIM_Base_MspInit+0x78>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <HAL_TIM_Base_MspInit+0x78>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	61d3      	str	r3, [r2, #28]
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <HAL_TIM_Base_MspInit+0x78>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	201d      	movs	r0, #29
 8001264:	f000 fa25 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001268:	201d      	movs	r0, #29
 800126a:	f000 fa3e 	bl	80016ea <HAL_NVIC_EnableIRQ>
}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000
 800127c:	40000400 	.word	0x40000400

08001280 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <HAL_TIM_MspPostInit+0x58>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d117      	bne.n	80012d0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <HAL_TIM_MspPostInit+0x5c>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <HAL_TIM_MspPostInit+0x5c>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_TIM_MspPostInit+0x5c>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PB_Pin;
 80012b8:	2340      	movs	r3, #64	; 0x40
 80012ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2302      	movs	r3, #2
 80012c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PB_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	4619      	mov	r1, r3
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <HAL_TIM_MspPostInit+0x60>)
 80012cc:	f000 fa28 	bl	8001720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40000400 	.word	0x40000400
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010800 	.word	0x40010800

080012e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a15      	ldr	r2, [pc, #84]	; (8001354 <HAL_UART_MspInit+0x70>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d123      	bne.n	800134c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <HAL_UART_MspInit+0x74>)
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	4a13      	ldr	r2, [pc, #76]	; (8001358 <HAL_UART_MspInit+0x74>)
 800130a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800130e:	61d3      	str	r3, [r2, #28]
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <HAL_UART_MspInit+0x74>)
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_UART_MspInit+0x74>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <HAL_UART_MspInit+0x74>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_UART_MspInit+0x74>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001334:	230c      	movs	r3, #12
 8001336:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2302      	movs	r3, #2
 800133e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	4619      	mov	r1, r3
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <HAL_UART_MspInit+0x78>)
 8001348:	f000 f9ea 	bl	8001720 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800134c:	bf00      	nop
 800134e:	3720      	adds	r7, #32
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40004400 	.word	0x40004400
 8001358:	40021000 	.word	0x40021000
 800135c:	40010800 	.word	0x40010800

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <NMI_Handler+0x4>

08001366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <MemManage_Handler+0x4>

08001372 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <UsageFault_Handler+0x4>

0800137e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr

080013a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a6:	f000 f891 	bl	80014cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <TIM2_IRQHandler+0x10>)
 80013b6:	f001 f957 	bl	8002668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000144 	.word	0x20000144

080013c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <TIM3_IRQHandler+0x10>)
 80013ca:	f001 f94d 	bl	8002668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200000fc 	.word	0x200000fc

080013d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80013dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013e0:	f000 fb6a 	bl	8001ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013f6:	490d      	ldr	r1, [pc, #52]	; (800142c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013f8:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013fc:	e002      	b.n	8001404 <LoopCopyDataInit>

080013fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001402:	3304      	adds	r3, #4

08001404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001408:	d3f9      	bcc.n	80013fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800140c:	4c0a      	ldr	r4, [pc, #40]	; (8001438 <LoopFillZerobss+0x22>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001410:	e001      	b.n	8001416 <LoopFillZerobss>

08001412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001414:	3204      	adds	r2, #4

08001416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001418:	d3fb      	bcc.n	8001412 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800141a:	f7ff ffe5 	bl	80013e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800141e:	f001 ffc1 	bl	80033a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001422:	f7ff fa99 	bl	8000958 <main>
  bx lr
 8001426:	4770      	bx	lr
  ldr r0, =_sdata
 8001428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800142c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001430:	08003444 	.word	0x08003444
  ldr r2, =_sbss
 8001434:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001438:	200001d4 	.word	0x200001d4

0800143c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800143c:	e7fe      	b.n	800143c <ADC1_2_IRQHandler>
	...

08001440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_Init+0x28>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a07      	ldr	r2, [pc, #28]	; (8001468 <HAL_Init+0x28>)
 800144a:	f043 0310 	orr.w	r3, r3, #16
 800144e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001450:	2003      	movs	r0, #3
 8001452:	f000 f923 	bl	800169c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001456:	2000      	movs	r0, #0
 8001458:	f000 f808 	bl	800146c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800145c:	f7ff fe9e 	bl	800119c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40022000 	.word	0x40022000

0800146c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_InitTick+0x54>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_InitTick+0x58>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001482:	fbb3 f3f1 	udiv	r3, r3, r1
 8001486:	fbb2 f3f3 	udiv	r3, r2, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f93b 	bl	8001706 <HAL_SYSTICK_Config>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e00e      	b.n	80014b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d80a      	bhi.n	80014b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a0:	2200      	movs	r2, #0
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f000 f903 	bl	80016b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ac:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <HAL_InitTick+0x5c>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e000      	b.n	80014b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000084 	.word	0x20000084
 80014c4:	2000008c 	.word	0x2000008c
 80014c8:	20000088 	.word	0x20000088

080014cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_IncTick+0x1c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_IncTick+0x20>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a03      	ldr	r2, [pc, #12]	; (80014ec <HAL_IncTick+0x20>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	2000008c 	.word	0x2000008c
 80014ec:	200001d0 	.word	0x200001d0

080014f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;
 80014f4:	4b02      	ldr	r3, [pc, #8]	; (8001500 <HAL_GetTick+0x10>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	200001d0 	.word	0x200001d0

08001504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001520:	4013      	ands	r3, r2
 8001522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800152c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001536:	4a04      	ldr	r2, [pc, #16]	; (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	60d3      	str	r3, [r2, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <__NVIC_GetPriorityGrouping+0x18>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	f003 0307 	and.w	r3, r3, #7
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	2b00      	cmp	r3, #0
 8001578:	db0b      	blt.n	8001592 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	f003 021f 	and.w	r2, r3, #31
 8001580:	4906      	ldr	r1, [pc, #24]	; (800159c <__NVIC_EnableIRQ+0x34>)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	2001      	movs	r0, #1
 800158a:	fa00 f202 	lsl.w	r2, r0, r2
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	e000e100 	.word	0xe000e100

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	; (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	; (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
         );
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	; 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001668:	d301      	bcc.n	800166e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166a:	2301      	movs	r3, #1
 800166c:	e00f      	b.n	800168e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <SysTick_Config+0x40>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001676:	210f      	movs	r1, #15
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f7ff ff90 	bl	80015a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <SysTick_Config+0x40>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <SysTick_Config+0x40>)
 8001688:	2207      	movs	r2, #7
 800168a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	e000e010 	.word	0xe000e010

0800169c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ff2d 	bl	8001504 <__NVIC_SetPriorityGrouping>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c4:	f7ff ff42 	bl	800154c <__NVIC_GetPriorityGrouping>
 80016c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	6978      	ldr	r0, [r7, #20]
 80016d0:	f7ff ff90 	bl	80015f4 <NVIC_EncodePriority>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff5f 	bl	80015a0 <__NVIC_SetPriority>
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff35 	bl	8001568 <__NVIC_EnableIRQ>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ffa2 	bl	8001658 <SysTick_Config>
 8001714:	4603      	mov	r3, r0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001720:	b480      	push	{r7}
 8001722:	b08b      	sub	sp, #44	; 0x2c
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800172e:	2300      	movs	r3, #0
 8001730:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001732:	e169      	b.n	8001a08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001734:	2201      	movs	r2, #1
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	429a      	cmp	r2, r3
 800174e:	f040 8158 	bne.w	8001a02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	4a9a      	ldr	r2, [pc, #616]	; (80019c0 <HAL_GPIO_Init+0x2a0>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d05e      	beq.n	800181a <HAL_GPIO_Init+0xfa>
 800175c:	4a98      	ldr	r2, [pc, #608]	; (80019c0 <HAL_GPIO_Init+0x2a0>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d875      	bhi.n	800184e <HAL_GPIO_Init+0x12e>
 8001762:	4a98      	ldr	r2, [pc, #608]	; (80019c4 <HAL_GPIO_Init+0x2a4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d058      	beq.n	800181a <HAL_GPIO_Init+0xfa>
 8001768:	4a96      	ldr	r2, [pc, #600]	; (80019c4 <HAL_GPIO_Init+0x2a4>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d86f      	bhi.n	800184e <HAL_GPIO_Init+0x12e>
 800176e:	4a96      	ldr	r2, [pc, #600]	; (80019c8 <HAL_GPIO_Init+0x2a8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d052      	beq.n	800181a <HAL_GPIO_Init+0xfa>
 8001774:	4a94      	ldr	r2, [pc, #592]	; (80019c8 <HAL_GPIO_Init+0x2a8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d869      	bhi.n	800184e <HAL_GPIO_Init+0x12e>
 800177a:	4a94      	ldr	r2, [pc, #592]	; (80019cc <HAL_GPIO_Init+0x2ac>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d04c      	beq.n	800181a <HAL_GPIO_Init+0xfa>
 8001780:	4a92      	ldr	r2, [pc, #584]	; (80019cc <HAL_GPIO_Init+0x2ac>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d863      	bhi.n	800184e <HAL_GPIO_Init+0x12e>
 8001786:	4a92      	ldr	r2, [pc, #584]	; (80019d0 <HAL_GPIO_Init+0x2b0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d046      	beq.n	800181a <HAL_GPIO_Init+0xfa>
 800178c:	4a90      	ldr	r2, [pc, #576]	; (80019d0 <HAL_GPIO_Init+0x2b0>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d85d      	bhi.n	800184e <HAL_GPIO_Init+0x12e>
 8001792:	2b12      	cmp	r3, #18
 8001794:	d82a      	bhi.n	80017ec <HAL_GPIO_Init+0xcc>
 8001796:	2b12      	cmp	r3, #18
 8001798:	d859      	bhi.n	800184e <HAL_GPIO_Init+0x12e>
 800179a:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <HAL_GPIO_Init+0x80>)
 800179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a0:	0800181b 	.word	0x0800181b
 80017a4:	080017f5 	.word	0x080017f5
 80017a8:	08001807 	.word	0x08001807
 80017ac:	08001849 	.word	0x08001849
 80017b0:	0800184f 	.word	0x0800184f
 80017b4:	0800184f 	.word	0x0800184f
 80017b8:	0800184f 	.word	0x0800184f
 80017bc:	0800184f 	.word	0x0800184f
 80017c0:	0800184f 	.word	0x0800184f
 80017c4:	0800184f 	.word	0x0800184f
 80017c8:	0800184f 	.word	0x0800184f
 80017cc:	0800184f 	.word	0x0800184f
 80017d0:	0800184f 	.word	0x0800184f
 80017d4:	0800184f 	.word	0x0800184f
 80017d8:	0800184f 	.word	0x0800184f
 80017dc:	0800184f 	.word	0x0800184f
 80017e0:	0800184f 	.word	0x0800184f
 80017e4:	080017fd 	.word	0x080017fd
 80017e8:	08001811 	.word	0x08001811
 80017ec:	4a79      	ldr	r2, [pc, #484]	; (80019d4 <HAL_GPIO_Init+0x2b4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d013      	beq.n	800181a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017f2:	e02c      	b.n	800184e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	623b      	str	r3, [r7, #32]
          break;
 80017fa:	e029      	b.n	8001850 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	3304      	adds	r3, #4
 8001802:	623b      	str	r3, [r7, #32]
          break;
 8001804:	e024      	b.n	8001850 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	3308      	adds	r3, #8
 800180c:	623b      	str	r3, [r7, #32]
          break;
 800180e:	e01f      	b.n	8001850 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	330c      	adds	r3, #12
 8001816:	623b      	str	r3, [r7, #32]
          break;
 8001818:	e01a      	b.n	8001850 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001822:	2304      	movs	r3, #4
 8001824:	623b      	str	r3, [r7, #32]
          break;
 8001826:	e013      	b.n	8001850 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d105      	bne.n	800183c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001830:	2308      	movs	r3, #8
 8001832:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	611a      	str	r2, [r3, #16]
          break;
 800183a:	e009      	b.n	8001850 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800183c:	2308      	movs	r3, #8
 800183e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	615a      	str	r2, [r3, #20]
          break;
 8001846:	e003      	b.n	8001850 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001848:	2300      	movs	r3, #0
 800184a:	623b      	str	r3, [r7, #32]
          break;
 800184c:	e000      	b.n	8001850 <HAL_GPIO_Init+0x130>
          break;
 800184e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	2bff      	cmp	r3, #255	; 0xff
 8001854:	d801      	bhi.n	800185a <HAL_GPIO_Init+0x13a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	e001      	b.n	800185e <HAL_GPIO_Init+0x13e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3304      	adds	r3, #4
 800185e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	2bff      	cmp	r3, #255	; 0xff
 8001864:	d802      	bhi.n	800186c <HAL_GPIO_Init+0x14c>
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	e002      	b.n	8001872 <HAL_GPIO_Init+0x152>
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	3b08      	subs	r3, #8
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	210f      	movs	r1, #15
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	fa01 f303 	lsl.w	r3, r1, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	401a      	ands	r2, r3
 8001884:	6a39      	ldr	r1, [r7, #32]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	fa01 f303 	lsl.w	r3, r1, r3
 800188c:	431a      	orrs	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 80b1 	beq.w	8001a02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018a0:	4b4d      	ldr	r3, [pc, #308]	; (80019d8 <HAL_GPIO_Init+0x2b8>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	4a4c      	ldr	r2, [pc, #304]	; (80019d8 <HAL_GPIO_Init+0x2b8>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6193      	str	r3, [r2, #24]
 80018ac:	4b4a      	ldr	r3, [pc, #296]	; (80019d8 <HAL_GPIO_Init+0x2b8>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018b8:	4a48      	ldr	r2, [pc, #288]	; (80019dc <HAL_GPIO_Init+0x2bc>)
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	089b      	lsrs	r3, r3, #2
 80018be:	3302      	adds	r3, #2
 80018c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	220f      	movs	r2, #15
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	4013      	ands	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a40      	ldr	r2, [pc, #256]	; (80019e0 <HAL_GPIO_Init+0x2c0>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d013      	beq.n	800190c <HAL_GPIO_Init+0x1ec>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a3f      	ldr	r2, [pc, #252]	; (80019e4 <HAL_GPIO_Init+0x2c4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d00d      	beq.n	8001908 <HAL_GPIO_Init+0x1e8>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a3e      	ldr	r2, [pc, #248]	; (80019e8 <HAL_GPIO_Init+0x2c8>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d007      	beq.n	8001904 <HAL_GPIO_Init+0x1e4>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a3d      	ldr	r2, [pc, #244]	; (80019ec <HAL_GPIO_Init+0x2cc>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d101      	bne.n	8001900 <HAL_GPIO_Init+0x1e0>
 80018fc:	2303      	movs	r3, #3
 80018fe:	e006      	b.n	800190e <HAL_GPIO_Init+0x1ee>
 8001900:	2304      	movs	r3, #4
 8001902:	e004      	b.n	800190e <HAL_GPIO_Init+0x1ee>
 8001904:	2302      	movs	r3, #2
 8001906:	e002      	b.n	800190e <HAL_GPIO_Init+0x1ee>
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <HAL_GPIO_Init+0x1ee>
 800190c:	2300      	movs	r3, #0
 800190e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001910:	f002 0203 	and.w	r2, r2, #3
 8001914:	0092      	lsls	r2, r2, #2
 8001916:	4093      	lsls	r3, r2
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800191e:	492f      	ldr	r1, [pc, #188]	; (80019dc <HAL_GPIO_Init+0x2bc>)
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	089b      	lsrs	r3, r3, #2
 8001924:	3302      	adds	r3, #2
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d006      	beq.n	8001946 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001938:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <HAL_GPIO_Init+0x2d0>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	492c      	ldr	r1, [pc, #176]	; (80019f0 <HAL_GPIO_Init+0x2d0>)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	600b      	str	r3, [r1, #0]
 8001944:	e006      	b.n	8001954 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001946:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <HAL_GPIO_Init+0x2d0>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	43db      	mvns	r3, r3
 800194e:	4928      	ldr	r1, [pc, #160]	; (80019f0 <HAL_GPIO_Init+0x2d0>)
 8001950:	4013      	ands	r3, r2
 8001952:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d006      	beq.n	800196e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001960:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <HAL_GPIO_Init+0x2d0>)
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	4922      	ldr	r1, [pc, #136]	; (80019f0 <HAL_GPIO_Init+0x2d0>)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
 800196c:	e006      	b.n	800197c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_GPIO_Init+0x2d0>)
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	43db      	mvns	r3, r3
 8001976:	491e      	ldr	r1, [pc, #120]	; (80019f0 <HAL_GPIO_Init+0x2d0>)
 8001978:	4013      	ands	r3, r2
 800197a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d006      	beq.n	8001996 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <HAL_GPIO_Init+0x2d0>)
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	4918      	ldr	r1, [pc, #96]	; (80019f0 <HAL_GPIO_Init+0x2d0>)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	608b      	str	r3, [r1, #8]
 8001994:	e006      	b.n	80019a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001996:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <HAL_GPIO_Init+0x2d0>)
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	43db      	mvns	r3, r3
 800199e:	4914      	ldr	r1, [pc, #80]	; (80019f0 <HAL_GPIO_Init+0x2d0>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d021      	beq.n	80019f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <HAL_GPIO_Init+0x2d0>)
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	490e      	ldr	r1, [pc, #56]	; (80019f0 <HAL_GPIO_Init+0x2d0>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	60cb      	str	r3, [r1, #12]
 80019bc:	e021      	b.n	8001a02 <HAL_GPIO_Init+0x2e2>
 80019be:	bf00      	nop
 80019c0:	10320000 	.word	0x10320000
 80019c4:	10310000 	.word	0x10310000
 80019c8:	10220000 	.word	0x10220000
 80019cc:	10210000 	.word	0x10210000
 80019d0:	10120000 	.word	0x10120000
 80019d4:	10110000 	.word	0x10110000
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40010000 	.word	0x40010000
 80019e0:	40010800 	.word	0x40010800
 80019e4:	40010c00 	.word	0x40010c00
 80019e8:	40011000 	.word	0x40011000
 80019ec:	40011400 	.word	0x40011400
 80019f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_GPIO_Init+0x304>)
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	4909      	ldr	r1, [pc, #36]	; (8001a24 <HAL_GPIO_Init+0x304>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	3301      	adds	r3, #1
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f47f ae8e 	bne.w	8001734 <HAL_GPIO_Init+0x14>
  }
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	372c      	adds	r7, #44	; 0x2c
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	40010400 	.word	0x40010400

08001a28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	887b      	ldrh	r3, [r7, #2]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
 8001a44:	e001      	b.n	8001a4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	807b      	strh	r3, [r7, #2]
 8001a62:	4613      	mov	r3, r2
 8001a64:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a66:	787b      	ldrb	r3, [r7, #1]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a6c:	887a      	ldrh	r2, [r7, #2]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a72:	e003      	b.n	8001a7c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a74:	887b      	ldrh	r3, [r7, #2]
 8001a76:	041a      	lsls	r2, r3, #16
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	611a      	str	r2, [r3, #16]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b085      	sub	sp, #20
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a98:	887a      	ldrh	r2, [r7, #2]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	041a      	lsls	r2, r3, #16
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	43d9      	mvns	r1, r3
 8001aa4:	887b      	ldrh	r3, [r7, #2]
 8001aa6:	400b      	ands	r3, r1
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	611a      	str	r2, [r3, #16]
}
 8001aae:	bf00      	nop
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d006      	beq.n	8001adc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ace:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f806 	bl	8001ae8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40010400 	.word	0x40010400

08001ae8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e26c      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 8087 	beq.w	8001c2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b1c:	4b92      	ldr	r3, [pc, #584]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d00c      	beq.n	8001b42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b28:	4b8f      	ldr	r3, [pc, #572]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d112      	bne.n	8001b5a <HAL_RCC_OscConfig+0x5e>
 8001b34:	4b8c      	ldr	r3, [pc, #560]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b40:	d10b      	bne.n	8001b5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b42:	4b89      	ldr	r3, [pc, #548]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d06c      	beq.n	8001c28 <HAL_RCC_OscConfig+0x12c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d168      	bne.n	8001c28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e246      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x76>
 8001b64:	4b80      	ldr	r3, [pc, #512]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a7f      	ldr	r2, [pc, #508]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	e02e      	b.n	8001bd0 <HAL_RCC_OscConfig+0xd4>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x98>
 8001b7a:	4b7b      	ldr	r3, [pc, #492]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a7a      	ldr	r2, [pc, #488]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	4b78      	ldr	r3, [pc, #480]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a77      	ldr	r2, [pc, #476]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e01d      	b.n	8001bd0 <HAL_RCC_OscConfig+0xd4>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0xbc>
 8001b9e:	4b72      	ldr	r3, [pc, #456]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a71      	ldr	r2, [pc, #452]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	4b6f      	ldr	r3, [pc, #444]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a6e      	ldr	r2, [pc, #440]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e00b      	b.n	8001bd0 <HAL_RCC_OscConfig+0xd4>
 8001bb8:	4b6b      	ldr	r3, [pc, #428]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a6a      	ldr	r2, [pc, #424]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b68      	ldr	r3, [pc, #416]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a67      	ldr	r2, [pc, #412]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d013      	beq.n	8001c00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fc8a 	bl	80014f0 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be0:	f7ff fc86 	bl	80014f0 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b64      	cmp	r3, #100	; 0x64
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e1fa      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf2:	4b5d      	ldr	r3, [pc, #372]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0xe4>
 8001bfe:	e014      	b.n	8001c2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7ff fc76 	bl	80014f0 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c08:	f7ff fc72 	bl	80014f0 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	; 0x64
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e1e6      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1a:	4b53      	ldr	r3, [pc, #332]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x10c>
 8001c26:	e000      	b.n	8001c2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d063      	beq.n	8001cfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c36:	4b4c      	ldr	r3, [pc, #304]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00b      	beq.n	8001c5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c42:	4b49      	ldr	r3, [pc, #292]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d11c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x18c>
 8001c4e:	4b46      	ldr	r3, [pc, #280]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d116      	bne.n	8001c88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5a:	4b43      	ldr	r3, [pc, #268]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d005      	beq.n	8001c72 <HAL_RCC_OscConfig+0x176>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e1ba      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c72:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4939      	ldr	r1, [pc, #228]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c86:	e03a      	b.n	8001cfe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d020      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c90:	4b36      	ldr	r3, [pc, #216]	; (8001d6c <HAL_RCC_OscConfig+0x270>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7ff fc2b 	bl	80014f0 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c9e:	f7ff fc27 	bl	80014f0 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e19b      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbc:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4927      	ldr	r1, [pc, #156]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	600b      	str	r3, [r1, #0]
 8001cd0:	e015      	b.n	8001cfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd2:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <HAL_RCC_OscConfig+0x270>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fc0a 	bl	80014f0 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce0:	f7ff fc06 	bl	80014f0 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e17a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d03a      	beq.n	8001d80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d019      	beq.n	8001d46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d12:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d18:	f7ff fbea 	bl	80014f0 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d20:	f7ff fbe6 	bl	80014f0 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e15a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d32:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f000 fad8 	bl	80022f4 <RCC_Delay>
 8001d44:	e01c      	b.n	8001d80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4c:	f7ff fbd0 	bl	80014f0 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d52:	e00f      	b.n	8001d74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d54:	f7ff fbcc 	bl	80014f0 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d908      	bls.n	8001d74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e140      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4ec>
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	42420000 	.word	0x42420000
 8001d70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d74:	4b9e      	ldr	r3, [pc, #632]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1e9      	bne.n	8001d54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 80a6 	beq.w	8001eda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d92:	4b97      	ldr	r3, [pc, #604]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10d      	bne.n	8001dba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d9e:	4b94      	ldr	r3, [pc, #592]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	4a93      	ldr	r2, [pc, #588]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da8:	61d3      	str	r3, [r2, #28]
 8001daa:	4b91      	ldr	r3, [pc, #580]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001db6:	2301      	movs	r3, #1
 8001db8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dba:	4b8e      	ldr	r3, [pc, #568]	; (8001ff4 <HAL_RCC_OscConfig+0x4f8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d118      	bne.n	8001df8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dc6:	4b8b      	ldr	r3, [pc, #556]	; (8001ff4 <HAL_RCC_OscConfig+0x4f8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a8a      	ldr	r2, [pc, #552]	; (8001ff4 <HAL_RCC_OscConfig+0x4f8>)
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd2:	f7ff fb8d 	bl	80014f0 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dda:	f7ff fb89 	bl	80014f0 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b64      	cmp	r3, #100	; 0x64
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e0fd      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dec:	4b81      	ldr	r3, [pc, #516]	; (8001ff4 <HAL_RCC_OscConfig+0x4f8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d106      	bne.n	8001e0e <HAL_RCC_OscConfig+0x312>
 8001e00:	4b7b      	ldr	r3, [pc, #492]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	4a7a      	ldr	r2, [pc, #488]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6213      	str	r3, [r2, #32]
 8001e0c:	e02d      	b.n	8001e6a <HAL_RCC_OscConfig+0x36e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x334>
 8001e16:	4b76      	ldr	r3, [pc, #472]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	4a75      	ldr	r2, [pc, #468]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	6213      	str	r3, [r2, #32]
 8001e22:	4b73      	ldr	r3, [pc, #460]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	4a72      	ldr	r2, [pc, #456]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	f023 0304 	bic.w	r3, r3, #4
 8001e2c:	6213      	str	r3, [r2, #32]
 8001e2e:	e01c      	b.n	8001e6a <HAL_RCC_OscConfig+0x36e>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	d10c      	bne.n	8001e52 <HAL_RCC_OscConfig+0x356>
 8001e38:	4b6d      	ldr	r3, [pc, #436]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	4a6c      	ldr	r2, [pc, #432]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001e3e:	f043 0304 	orr.w	r3, r3, #4
 8001e42:	6213      	str	r3, [r2, #32]
 8001e44:	4b6a      	ldr	r3, [pc, #424]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4a69      	ldr	r2, [pc, #420]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6213      	str	r3, [r2, #32]
 8001e50:	e00b      	b.n	8001e6a <HAL_RCC_OscConfig+0x36e>
 8001e52:	4b67      	ldr	r3, [pc, #412]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4a66      	ldr	r2, [pc, #408]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	6213      	str	r3, [r2, #32]
 8001e5e:	4b64      	ldr	r3, [pc, #400]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	4a63      	ldr	r2, [pc, #396]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	f023 0304 	bic.w	r3, r3, #4
 8001e68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d015      	beq.n	8001e9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e72:	f7ff fb3d 	bl	80014f0 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e78:	e00a      	b.n	8001e90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7a:	f7ff fb39 	bl	80014f0 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e0ab      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e90:	4b57      	ldr	r3, [pc, #348]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0ee      	beq.n	8001e7a <HAL_RCC_OscConfig+0x37e>
 8001e9c:	e014      	b.n	8001ec8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9e:	f7ff fb27 	bl	80014f0 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea4:	e00a      	b.n	8001ebc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea6:	f7ff fb23 	bl	80014f0 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e095      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ebc:	4b4c      	ldr	r3, [pc, #304]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1ee      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ec8:	7dfb      	ldrb	r3, [r7, #23]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d105      	bne.n	8001eda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ece:	4b48      	ldr	r3, [pc, #288]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	4a47      	ldr	r2, [pc, #284]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 8081 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee4:	4b42      	ldr	r3, [pc, #264]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d061      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d146      	bne.n	8001f86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef8:	4b3f      	ldr	r3, [pc, #252]	; (8001ff8 <HAL_RCC_OscConfig+0x4fc>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efe:	f7ff faf7 	bl	80014f0 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f06:	f7ff faf3 	bl	80014f0 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e067      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f18:	4b35      	ldr	r3, [pc, #212]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f0      	bne.n	8001f06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f2c:	d108      	bne.n	8001f40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f2e:	4b30      	ldr	r3, [pc, #192]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	492d      	ldr	r1, [pc, #180]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f40:	4b2b      	ldr	r3, [pc, #172]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a19      	ldr	r1, [r3, #32]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	430b      	orrs	r3, r1
 8001f52:	4927      	ldr	r1, [pc, #156]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f58:	4b27      	ldr	r3, [pc, #156]	; (8001ff8 <HAL_RCC_OscConfig+0x4fc>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5e:	f7ff fac7 	bl	80014f0 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f66:	f7ff fac3 	bl	80014f0 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e037      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f78:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x46a>
 8001f84:	e02f      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f86:	4b1c      	ldr	r3, [pc, #112]	; (8001ff8 <HAL_RCC_OscConfig+0x4fc>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7ff fab0 	bl	80014f0 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f94:	f7ff faac 	bl	80014f0 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e020      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa6:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0x498>
 8001fb2:	e018      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e013      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_OscConfig+0x4f4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d001      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40007000 	.word	0x40007000
 8001ff8:	42420060 	.word	0x42420060

08001ffc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0d0      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002010:	4b6a      	ldr	r3, [pc, #424]	; (80021bc <HAL_RCC_ClockConfig+0x1c0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d910      	bls.n	8002040 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201e:	4b67      	ldr	r3, [pc, #412]	; (80021bc <HAL_RCC_ClockConfig+0x1c0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 0207 	bic.w	r2, r3, #7
 8002026:	4965      	ldr	r1, [pc, #404]	; (80021bc <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	4313      	orrs	r3, r2
 800202c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800202e:	4b63      	ldr	r3, [pc, #396]	; (80021bc <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0b8      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d020      	beq.n	800208e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002058:	4b59      	ldr	r3, [pc, #356]	; (80021c0 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	4a58      	ldr	r2, [pc, #352]	; (80021c0 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002062:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002070:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	4a52      	ldr	r2, [pc, #328]	; (80021c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800207a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800207c:	4b50      	ldr	r3, [pc, #320]	; (80021c0 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	494d      	ldr	r1, [pc, #308]	; (80021c0 <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d040      	beq.n	800211c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d107      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	4b47      	ldr	r3, [pc, #284]	; (80021c0 <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d115      	bne.n	80020da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e07f      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d107      	bne.n	80020ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ba:	4b41      	ldr	r3, [pc, #260]	; (80021c0 <HAL_RCC_ClockConfig+0x1c4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d109      	bne.n	80020da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e073      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ca:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e06b      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020da:	4b39      	ldr	r3, [pc, #228]	; (80021c0 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f023 0203 	bic.w	r2, r3, #3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4936      	ldr	r1, [pc, #216]	; (80021c0 <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020ec:	f7ff fa00 	bl	80014f0 <HAL_GetTick>
 80020f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f2:	e00a      	b.n	800210a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f4:	f7ff f9fc 	bl	80014f0 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002102:	4293      	cmp	r3, r2
 8002104:	d901      	bls.n	800210a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e053      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210a:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 020c 	and.w	r2, r3, #12
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	429a      	cmp	r2, r3
 800211a:	d1eb      	bne.n	80020f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211c:	4b27      	ldr	r3, [pc, #156]	; (80021bc <HAL_RCC_ClockConfig+0x1c0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d210      	bcs.n	800214c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b24      	ldr	r3, [pc, #144]	; (80021bc <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 0207 	bic.w	r2, r3, #7
 8002132:	4922      	ldr	r1, [pc, #136]	; (80021bc <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b20      	ldr	r3, [pc, #128]	; (80021bc <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e032      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4916      	ldr	r1, [pc, #88]	; (80021c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	4313      	orrs	r3, r2
 8002168:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d009      	beq.n	800218a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	490e      	ldr	r1, [pc, #56]	; (80021c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	4313      	orrs	r3, r2
 8002188:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800218a:	f000 f821 	bl	80021d0 <HAL_RCC_GetSysClockFreq>
 800218e:	4602      	mov	r2, r0
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	490a      	ldr	r1, [pc, #40]	; (80021c4 <HAL_RCC_ClockConfig+0x1c8>)
 800219c:	5ccb      	ldrb	r3, [r1, r3]
 800219e:	fa22 f303 	lsr.w	r3, r2, r3
 80021a2:	4a09      	ldr	r2, [pc, #36]	; (80021c8 <HAL_RCC_ClockConfig+0x1cc>)
 80021a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021a6:	4b09      	ldr	r3, [pc, #36]	; (80021cc <HAL_RCC_ClockConfig+0x1d0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff f95e 	bl	800146c <HAL_InitTick>

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40022000 	.word	0x40022000
 80021c0:	40021000 	.word	0x40021000
 80021c4:	08003424 	.word	0x08003424
 80021c8:	20000084 	.word	0x20000084
 80021cc:	20000088 	.word	0x20000088

080021d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d0:	b490      	push	{r4, r7}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021d6:	4b2a      	ldr	r3, [pc, #168]	; (8002280 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021d8:	1d3c      	adds	r4, r7, #4
 80021da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021e0:	f240 2301 	movw	r3, #513	; 0x201
 80021e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	2300      	movs	r3, #0
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021fa:	4b22      	ldr	r3, [pc, #136]	; (8002284 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b04      	cmp	r3, #4
 8002208:	d002      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0x40>
 800220a:	2b08      	cmp	r3, #8
 800220c:	d003      	beq.n	8002216 <HAL_RCC_GetSysClockFreq+0x46>
 800220e:	e02d      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002210:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002212:	623b      	str	r3, [r7, #32]
      break;
 8002214:	e02d      	b.n	8002272 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	0c9b      	lsrs	r3, r3, #18
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002222:	4413      	add	r3, r2
 8002224:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002228:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d013      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	0c5b      	lsrs	r3, r3, #17
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002242:	4413      	add	r3, r2
 8002244:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002248:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	4a0e      	ldr	r2, [pc, #56]	; (8002288 <HAL_RCC_GetSysClockFreq+0xb8>)
 800224e:	fb02 f203 	mul.w	r2, r2, r3
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	fbb2 f3f3 	udiv	r3, r2, r3
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
 800225a:	e004      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	4a0b      	ldr	r2, [pc, #44]	; (800228c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002260:	fb02 f303 	mul.w	r3, r2, r3
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	623b      	str	r3, [r7, #32]
      break;
 800226a:	e002      	b.n	8002272 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_RCC_GetSysClockFreq+0xb8>)
 800226e:	623b      	str	r3, [r7, #32]
      break;
 8002270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002272:	6a3b      	ldr	r3, [r7, #32]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3728      	adds	r7, #40	; 0x28
 8002278:	46bd      	mov	sp, r7
 800227a:	bc90      	pop	{r4, r7}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	08003414 	.word	0x08003414
 8002284:	40021000 	.word	0x40021000
 8002288:	007a1200 	.word	0x007a1200
 800228c:	003d0900 	.word	0x003d0900

08002290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002294:	4b02      	ldr	r3, [pc, #8]	; (80022a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002296:	681b      	ldr	r3, [r3, #0]
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	20000084 	.word	0x20000084

080022a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022a8:	f7ff fff2 	bl	8002290 <HAL_RCC_GetHCLKFreq>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	4903      	ldr	r1, [pc, #12]	; (80022c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ba:	5ccb      	ldrb	r3, [r1, r3]
 80022bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40021000 	.word	0x40021000
 80022c8:	08003434 	.word	0x08003434

080022cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022d0:	f7ff ffde 	bl	8002290 <HAL_RCC_GetHCLKFreq>
 80022d4:	4602      	mov	r2, r0
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	0adb      	lsrs	r3, r3, #11
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	4903      	ldr	r1, [pc, #12]	; (80022f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022e2:	5ccb      	ldrb	r3, [r1, r3]
 80022e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000
 80022f0:	08003434 	.word	0x08003434

080022f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022fc:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <RCC_Delay+0x34>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0a      	ldr	r2, [pc, #40]	; (800232c <RCC_Delay+0x38>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	0a5b      	lsrs	r3, r3, #9
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002310:	bf00      	nop
  }
  while (Delay --);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1e5a      	subs	r2, r3, #1
 8002316:	60fa      	str	r2, [r7, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f9      	bne.n	8002310 <RCC_Delay+0x1c>
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	20000084 	.word	0x20000084
 800232c:	10624dd3 	.word	0x10624dd3

08002330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e041      	b.n	80023c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7fe ff52 	bl	8001200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3304      	adds	r3, #4
 800236c:	4619      	mov	r1, r3
 800236e:	4610      	mov	r0, r2
 8002370:	f000 fc28 	bl	8002bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d001      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e03a      	b.n	800245e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a18      	ldr	r2, [pc, #96]	; (8002468 <HAL_TIM_Base_Start_IT+0x98>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00e      	beq.n	8002428 <HAL_TIM_Base_Start_IT+0x58>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002412:	d009      	beq.n	8002428 <HAL_TIM_Base_Start_IT+0x58>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a14      	ldr	r2, [pc, #80]	; (800246c <HAL_TIM_Base_Start_IT+0x9c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d004      	beq.n	8002428 <HAL_TIM_Base_Start_IT+0x58>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a13      	ldr	r2, [pc, #76]	; (8002470 <HAL_TIM_Base_Start_IT+0xa0>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d111      	bne.n	800244c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b06      	cmp	r3, #6
 8002438:	d010      	beq.n	800245c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0201 	orr.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800244a:	e007      	b.n	800245c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	40012c00 	.word	0x40012c00
 800246c:	40000400 	.word	0x40000400
 8002470:	40000800 	.word	0x40000800

08002474 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e041      	b.n	800250a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f839 	bl	8002512 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3304      	adds	r3, #4
 80024b0:	4619      	mov	r1, r3
 80024b2:	4610      	mov	r0, r2
 80024b4:	f000 fb86 	bl	8002bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d109      	bne.n	8002548 <HAL_TIM_PWM_Start+0x24>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b01      	cmp	r3, #1
 800253e:	bf14      	ite	ne
 8002540:	2301      	movne	r3, #1
 8002542:	2300      	moveq	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	e022      	b.n	800258e <HAL_TIM_PWM_Start+0x6a>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	2b04      	cmp	r3, #4
 800254c:	d109      	bne.n	8002562 <HAL_TIM_PWM_Start+0x3e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b01      	cmp	r3, #1
 8002558:	bf14      	ite	ne
 800255a:	2301      	movne	r3, #1
 800255c:	2300      	moveq	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	e015      	b.n	800258e <HAL_TIM_PWM_Start+0x6a>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b08      	cmp	r3, #8
 8002566:	d109      	bne.n	800257c <HAL_TIM_PWM_Start+0x58>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b01      	cmp	r3, #1
 8002572:	bf14      	ite	ne
 8002574:	2301      	movne	r3, #1
 8002576:	2300      	moveq	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	e008      	b.n	800258e <HAL_TIM_PWM_Start+0x6a>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b01      	cmp	r3, #1
 8002586:	bf14      	ite	ne
 8002588:	2301      	movne	r3, #1
 800258a:	2300      	moveq	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e05e      	b.n	8002654 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d104      	bne.n	80025a6 <HAL_TIM_PWM_Start+0x82>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025a4:	e013      	b.n	80025ce <HAL_TIM_PWM_Start+0xaa>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d104      	bne.n	80025b6 <HAL_TIM_PWM_Start+0x92>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025b4:	e00b      	b.n	80025ce <HAL_TIM_PWM_Start+0xaa>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d104      	bne.n	80025c6 <HAL_TIM_PWM_Start+0xa2>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025c4:	e003      	b.n	80025ce <HAL_TIM_PWM_Start+0xaa>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2202      	movs	r2, #2
 80025ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2201      	movs	r2, #1
 80025d4:	6839      	ldr	r1, [r7, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fd74 	bl	80030c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a1e      	ldr	r2, [pc, #120]	; (800265c <HAL_TIM_PWM_Start+0x138>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d107      	bne.n	80025f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a18      	ldr	r2, [pc, #96]	; (800265c <HAL_TIM_PWM_Start+0x138>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d00e      	beq.n	800261e <HAL_TIM_PWM_Start+0xfa>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002608:	d009      	beq.n	800261e <HAL_TIM_PWM_Start+0xfa>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a14      	ldr	r2, [pc, #80]	; (8002660 <HAL_TIM_PWM_Start+0x13c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d004      	beq.n	800261e <HAL_TIM_PWM_Start+0xfa>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a12      	ldr	r2, [pc, #72]	; (8002664 <HAL_TIM_PWM_Start+0x140>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d111      	bne.n	8002642 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b06      	cmp	r3, #6
 800262e:	d010      	beq.n	8002652 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002640:	e007      	b.n	8002652 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0201 	orr.w	r2, r2, #1
 8002650:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40012c00 	.word	0x40012c00
 8002660:	40000400 	.word	0x40000400
 8002664:	40000800 	.word	0x40000800

08002668 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b02      	cmp	r3, #2
 800267c:	d122      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b02      	cmp	r3, #2
 800268a:	d11b      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f06f 0202 	mvn.w	r2, #2
 8002694:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fa6f 	bl	8002b8e <HAL_TIM_IC_CaptureCallback>
 80026b0:	e005      	b.n	80026be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fa62 	bl	8002b7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 fa71 	bl	8002ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d122      	bne.n	8002718 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d11b      	bne.n	8002718 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f06f 0204 	mvn.w	r2, #4
 80026e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2202      	movs	r2, #2
 80026ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fa45 	bl	8002b8e <HAL_TIM_IC_CaptureCallback>
 8002704:	e005      	b.n	8002712 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 fa38 	bl	8002b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 fa47 	bl	8002ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b08      	cmp	r3, #8
 8002724:	d122      	bne.n	800276c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b08      	cmp	r3, #8
 8002732:	d11b      	bne.n	800276c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f06f 0208 	mvn.w	r2, #8
 800273c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2204      	movs	r2, #4
 8002742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fa1b 	bl	8002b8e <HAL_TIM_IC_CaptureCallback>
 8002758:	e005      	b.n	8002766 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fa0e 	bl	8002b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fa1d 	bl	8002ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2b10      	cmp	r3, #16
 8002778:	d122      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b10      	cmp	r3, #16
 8002786:	d11b      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0210 	mvn.w	r2, #16
 8002790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2208      	movs	r2, #8
 8002796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f9f1 	bl	8002b8e <HAL_TIM_IC_CaptureCallback>
 80027ac:	e005      	b.n	80027ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f9e4 	bl	8002b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f9f3 	bl	8002ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d10e      	bne.n	80027ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d107      	bne.n	80027ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0201 	mvn.w	r2, #1
 80027e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7fe fac4 	bl	8000d74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f6:	2b80      	cmp	r3, #128	; 0x80
 80027f8:	d10e      	bne.n	8002818 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002804:	2b80      	cmp	r3, #128	; 0x80
 8002806:	d107      	bne.n	8002818 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fce1 	bl	80031da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002822:	2b40      	cmp	r3, #64	; 0x40
 8002824:	d10e      	bne.n	8002844 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002830:	2b40      	cmp	r3, #64	; 0x40
 8002832:	d107      	bne.n	8002844 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800283c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f9b7 	bl	8002bb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b20      	cmp	r3, #32
 8002850:	d10e      	bne.n	8002870 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b20      	cmp	r3, #32
 800285e:	d107      	bne.n	8002870 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0220 	mvn.w	r2, #32
 8002868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fcac 	bl	80031c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800288e:	2302      	movs	r3, #2
 8002890:	e0ac      	b.n	80029ec <HAL_TIM_PWM_ConfigChannel+0x174>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b0c      	cmp	r3, #12
 800289e:	f200 809f 	bhi.w	80029e0 <HAL_TIM_PWM_ConfigChannel+0x168>
 80028a2:	a201      	add	r2, pc, #4	; (adr r2, 80028a8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80028a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a8:	080028dd 	.word	0x080028dd
 80028ac:	080029e1 	.word	0x080029e1
 80028b0:	080029e1 	.word	0x080029e1
 80028b4:	080029e1 	.word	0x080029e1
 80028b8:	0800291d 	.word	0x0800291d
 80028bc:	080029e1 	.word	0x080029e1
 80028c0:	080029e1 	.word	0x080029e1
 80028c4:	080029e1 	.word	0x080029e1
 80028c8:	0800295f 	.word	0x0800295f
 80028cc:	080029e1 	.word	0x080029e1
 80028d0:	080029e1 	.word	0x080029e1
 80028d4:	080029e1 	.word	0x080029e1
 80028d8:	0800299f 	.word	0x0800299f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 f9d0 	bl	8002c88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0208 	orr.w	r2, r2, #8
 80028f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0204 	bic.w	r2, r2, #4
 8002906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6999      	ldr	r1, [r3, #24]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	619a      	str	r2, [r3, #24]
      break;
 800291a:	e062      	b.n	80029e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fa16 	bl	8002d54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699a      	ldr	r2, [r3, #24]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6999      	ldr	r1, [r3, #24]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	021a      	lsls	r2, r3, #8
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	619a      	str	r2, [r3, #24]
      break;
 800295c:	e041      	b.n	80029e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68b9      	ldr	r1, [r7, #8]
 8002964:	4618      	mov	r0, r3
 8002966:	f000 fa5f 	bl	8002e28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	69da      	ldr	r2, [r3, #28]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0208 	orr.w	r2, r2, #8
 8002978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	69da      	ldr	r2, [r3, #28]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0204 	bic.w	r2, r2, #4
 8002988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	69d9      	ldr	r1, [r3, #28]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	61da      	str	r2, [r3, #28]
      break;
 800299c:	e021      	b.n	80029e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68b9      	ldr	r1, [r7, #8]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 faa9 	bl	8002efc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	69da      	ldr	r2, [r3, #28]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	69da      	ldr	r2, [r3, #28]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69d9      	ldr	r1, [r3, #28]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	021a      	lsls	r2, r3, #8
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	61da      	str	r2, [r3, #28]
      break;
 80029de:	e000      	b.n	80029e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80029e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_TIM_ConfigClockSource+0x18>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e0b3      	b.n	8002b74 <HAL_TIM_ConfigClockSource+0x180>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a44:	d03e      	beq.n	8002ac4 <HAL_TIM_ConfigClockSource+0xd0>
 8002a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a4a:	f200 8087 	bhi.w	8002b5c <HAL_TIM_ConfigClockSource+0x168>
 8002a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a52:	f000 8085 	beq.w	8002b60 <HAL_TIM_ConfigClockSource+0x16c>
 8002a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a5a:	d87f      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x168>
 8002a5c:	2b70      	cmp	r3, #112	; 0x70
 8002a5e:	d01a      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0xa2>
 8002a60:	2b70      	cmp	r3, #112	; 0x70
 8002a62:	d87b      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x168>
 8002a64:	2b60      	cmp	r3, #96	; 0x60
 8002a66:	d050      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x116>
 8002a68:	2b60      	cmp	r3, #96	; 0x60
 8002a6a:	d877      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x168>
 8002a6c:	2b50      	cmp	r3, #80	; 0x50
 8002a6e:	d03c      	beq.n	8002aea <HAL_TIM_ConfigClockSource+0xf6>
 8002a70:	2b50      	cmp	r3, #80	; 0x50
 8002a72:	d873      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x168>
 8002a74:	2b40      	cmp	r3, #64	; 0x40
 8002a76:	d058      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x136>
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d86f      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x168>
 8002a7c:	2b30      	cmp	r3, #48	; 0x30
 8002a7e:	d064      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x156>
 8002a80:	2b30      	cmp	r3, #48	; 0x30
 8002a82:	d86b      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x168>
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	d060      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x156>
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d867      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x168>
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d05c      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x156>
 8002a90:	2b10      	cmp	r3, #16
 8002a92:	d05a      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a94:	e062      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6899      	ldr	r1, [r3, #8]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f000 faee 	bl	8003086 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ab8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	609a      	str	r2, [r3, #8]
      break;
 8002ac2:	e04e      	b.n	8002b62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	6899      	ldr	r1, [r3, #8]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f000 fad7 	bl	8003086 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ae6:	609a      	str	r2, [r3, #8]
      break;
 8002ae8:	e03b      	b.n	8002b62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6859      	ldr	r1, [r3, #4]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	461a      	mov	r2, r3
 8002af8:	f000 fa4e 	bl	8002f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2150      	movs	r1, #80	; 0x50
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 faa5 	bl	8003052 <TIM_ITRx_SetConfig>
      break;
 8002b08:	e02b      	b.n	8002b62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6859      	ldr	r1, [r3, #4]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	461a      	mov	r2, r3
 8002b18:	f000 fa6c 	bl	8002ff4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2160      	movs	r1, #96	; 0x60
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fa95 	bl	8003052 <TIM_ITRx_SetConfig>
      break;
 8002b28:	e01b      	b.n	8002b62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6859      	ldr	r1, [r3, #4]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	461a      	mov	r2, r3
 8002b38:	f000 fa2e 	bl	8002f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2140      	movs	r1, #64	; 0x40
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fa85 	bl	8003052 <TIM_ITRx_SetConfig>
      break;
 8002b48:	e00b      	b.n	8002b62 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4619      	mov	r1, r3
 8002b54:	4610      	mov	r0, r2
 8002b56:	f000 fa7c 	bl	8003052 <TIM_ITRx_SetConfig>
        break;
 8002b5a:	e002      	b.n	8002b62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b5c:	bf00      	nop
 8002b5e:	e000      	b.n	8002b62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a29      	ldr	r2, [pc, #164]	; (8002c7c <TIM_Base_SetConfig+0xb8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00b      	beq.n	8002bf4 <TIM_Base_SetConfig+0x30>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be2:	d007      	beq.n	8002bf4 <TIM_Base_SetConfig+0x30>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a26      	ldr	r2, [pc, #152]	; (8002c80 <TIM_Base_SetConfig+0xbc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d003      	beq.n	8002bf4 <TIM_Base_SetConfig+0x30>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a25      	ldr	r2, [pc, #148]	; (8002c84 <TIM_Base_SetConfig+0xc0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d108      	bne.n	8002c06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <TIM_Base_SetConfig+0xb8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00b      	beq.n	8002c26 <TIM_Base_SetConfig+0x62>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c14:	d007      	beq.n	8002c26 <TIM_Base_SetConfig+0x62>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a19      	ldr	r2, [pc, #100]	; (8002c80 <TIM_Base_SetConfig+0xbc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d003      	beq.n	8002c26 <TIM_Base_SetConfig+0x62>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a18      	ldr	r2, [pc, #96]	; (8002c84 <TIM_Base_SetConfig+0xc0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d108      	bne.n	8002c38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a07      	ldr	r2, [pc, #28]	; (8002c7c <TIM_Base_SetConfig+0xb8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d103      	bne.n	8002c6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	615a      	str	r2, [r3, #20]
}
 8002c72:	bf00      	nop
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	40012c00 	.word	0x40012c00
 8002c80:	40000400 	.word	0x40000400
 8002c84:	40000800 	.word	0x40000800

08002c88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	f023 0201 	bic.w	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0303 	bic.w	r3, r3, #3
 8002cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f023 0302 	bic.w	r3, r3, #2
 8002cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a1c      	ldr	r2, [pc, #112]	; (8002d50 <TIM_OC1_SetConfig+0xc8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d10c      	bne.n	8002cfe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f023 0308 	bic.w	r3, r3, #8
 8002cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f023 0304 	bic.w	r3, r3, #4
 8002cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a13      	ldr	r2, [pc, #76]	; (8002d50 <TIM_OC1_SetConfig+0xc8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d111      	bne.n	8002d2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	621a      	str	r2, [r3, #32]
}
 8002d44:	bf00      	nop
 8002d46:	371c      	adds	r7, #28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40012c00 	.word	0x40012c00

08002d54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	f023 0210 	bic.w	r2, r3, #16
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f023 0320 	bic.w	r3, r3, #32
 8002d9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a1d      	ldr	r2, [pc, #116]	; (8002e24 <TIM_OC2_SetConfig+0xd0>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d10d      	bne.n	8002dd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <TIM_OC2_SetConfig+0xd0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d113      	bne.n	8002e00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002de6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	621a      	str	r2, [r3, #32]
}
 8002e1a:	bf00      	nop
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr
 8002e24:	40012c00 	.word	0x40012c00

08002e28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0303 	bic.w	r3, r3, #3
 8002e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	021b      	lsls	r3, r3, #8
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <TIM_OC3_SetConfig+0xd0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d10d      	bne.n	8002ea2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a14      	ldr	r2, [pc, #80]	; (8002ef8 <TIM_OC3_SetConfig+0xd0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d113      	bne.n	8002ed2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002eb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	621a      	str	r2, [r3, #32]
}
 8002eec:	bf00      	nop
 8002eee:	371c      	adds	r7, #28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40012c00 	.word	0x40012c00

08002efc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	021b      	lsls	r3, r3, #8
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	031b      	lsls	r3, r3, #12
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a0f      	ldr	r2, [pc, #60]	; (8002f94 <TIM_OC4_SetConfig+0x98>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d109      	bne.n	8002f70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	019b      	lsls	r3, r3, #6
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	621a      	str	r2, [r3, #32]
}
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	40012c00 	.word	0x40012c00

08002f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	f023 0201 	bic.w	r2, r3, #1
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f023 030a 	bic.w	r3, r3, #10
 8002fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	621a      	str	r2, [r3, #32]
}
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr

08002ff4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	f023 0210 	bic.w	r2, r3, #16
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800301e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	031b      	lsls	r3, r3, #12
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	4313      	orrs	r3, r2
 8003028:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003030:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	621a      	str	r2, [r3, #32]
}
 8003048:	bf00      	nop
 800304a:	371c      	adds	r7, #28
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr

08003052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003052:	b480      	push	{r7}
 8003054:	b085      	sub	sp, #20
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4313      	orrs	r3, r2
 8003070:	f043 0307 	orr.w	r3, r3, #7
 8003074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	609a      	str	r2, [r3, #8]
}
 800307c:	bf00      	nop
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003086:	b480      	push	{r7}
 8003088:	b087      	sub	sp, #28
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	021a      	lsls	r2, r3, #8
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	609a      	str	r2, [r3, #8]
}
 80030ba:	bf00      	nop
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	2201      	movs	r2, #1
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a1a      	ldr	r2, [r3, #32]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	401a      	ands	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a1a      	ldr	r2, [r3, #32]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	fa01 f303 	lsl.w	r3, r1, r3
 80030fc:	431a      	orrs	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	621a      	str	r2, [r3, #32]
}
 8003102:	bf00      	nop
 8003104:	371c      	adds	r7, #28
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr

0800310c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003120:	2302      	movs	r3, #2
 8003122:	e046      	b.n	80031b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a16      	ldr	r2, [pc, #88]	; (80031bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d00e      	beq.n	8003186 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003170:	d009      	beq.n	8003186 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a12      	ldr	r2, [pc, #72]	; (80031c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d004      	beq.n	8003186 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a10      	ldr	r2, [pc, #64]	; (80031c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d10c      	bne.n	80031a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800318c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	4313      	orrs	r3, r2
 8003196:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	40012c00 	.word	0x40012c00
 80031c0:	40000400 	.word	0x40000400
 80031c4:	40000800 	.word	0x40000800

080031c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr

080031da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e03f      	b.n	800327e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fe f866 	bl	80012e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2224      	movs	r2, #36	; 0x24
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800322e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f829 	bl	8003288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003244:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695a      	ldr	r2, [r3, #20]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003254:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003264:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80032c2:	f023 030c 	bic.w	r3, r3, #12
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6812      	ldr	r2, [r2, #0]
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	430b      	orrs	r3, r1
 80032ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a2c      	ldr	r2, [pc, #176]	; (800339c <UART_SetConfig+0x114>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d103      	bne.n	80032f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032f0:	f7fe ffec 	bl	80022cc <HAL_RCC_GetPCLK2Freq>
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	e002      	b.n	80032fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032f8:	f7fe ffd4 	bl	80022a4 <HAL_RCC_GetPCLK1Freq>
 80032fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	009a      	lsls	r2, r3, #2
 8003308:	441a      	add	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	fbb2 f3f3 	udiv	r3, r2, r3
 8003314:	4a22      	ldr	r2, [pc, #136]	; (80033a0 <UART_SetConfig+0x118>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	0119      	lsls	r1, r3, #4
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	009a      	lsls	r2, r3, #2
 8003328:	441a      	add	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	fbb2 f2f3 	udiv	r2, r2, r3
 8003334:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <UART_SetConfig+0x118>)
 8003336:	fba3 0302 	umull	r0, r3, r3, r2
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2064      	movs	r0, #100	; 0x64
 800333e:	fb00 f303 	mul.w	r3, r0, r3
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	3332      	adds	r3, #50	; 0x32
 8003348:	4a15      	ldr	r2, [pc, #84]	; (80033a0 <UART_SetConfig+0x118>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003354:	4419      	add	r1, r3
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	009a      	lsls	r2, r3, #2
 8003360:	441a      	add	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	fbb2 f2f3 	udiv	r2, r2, r3
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <UART_SetConfig+0x118>)
 800336e:	fba3 0302 	umull	r0, r3, r3, r2
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	2064      	movs	r0, #100	; 0x64
 8003376:	fb00 f303 	mul.w	r3, r0, r3
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	3332      	adds	r3, #50	; 0x32
 8003380:	4a07      	ldr	r2, [pc, #28]	; (80033a0 <UART_SetConfig+0x118>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	f003 020f 	and.w	r2, r3, #15
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	440a      	add	r2, r1
 8003392:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40013800 	.word	0x40013800
 80033a0:	51eb851f 	.word	0x51eb851f

080033a4 <__libc_init_array>:
 80033a4:	b570      	push	{r4, r5, r6, lr}
 80033a6:	2600      	movs	r6, #0
 80033a8:	4d0c      	ldr	r5, [pc, #48]	; (80033dc <__libc_init_array+0x38>)
 80033aa:	4c0d      	ldr	r4, [pc, #52]	; (80033e0 <__libc_init_array+0x3c>)
 80033ac:	1b64      	subs	r4, r4, r5
 80033ae:	10a4      	asrs	r4, r4, #2
 80033b0:	42a6      	cmp	r6, r4
 80033b2:	d109      	bne.n	80033c8 <__libc_init_array+0x24>
 80033b4:	f000 f822 	bl	80033fc <_init>
 80033b8:	2600      	movs	r6, #0
 80033ba:	4d0a      	ldr	r5, [pc, #40]	; (80033e4 <__libc_init_array+0x40>)
 80033bc:	4c0a      	ldr	r4, [pc, #40]	; (80033e8 <__libc_init_array+0x44>)
 80033be:	1b64      	subs	r4, r4, r5
 80033c0:	10a4      	asrs	r4, r4, #2
 80033c2:	42a6      	cmp	r6, r4
 80033c4:	d105      	bne.n	80033d2 <__libc_init_array+0x2e>
 80033c6:	bd70      	pop	{r4, r5, r6, pc}
 80033c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80033cc:	4798      	blx	r3
 80033ce:	3601      	adds	r6, #1
 80033d0:	e7ee      	b.n	80033b0 <__libc_init_array+0xc>
 80033d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d6:	4798      	blx	r3
 80033d8:	3601      	adds	r6, #1
 80033da:	e7f2      	b.n	80033c2 <__libc_init_array+0x1e>
 80033dc:	0800343c 	.word	0x0800343c
 80033e0:	0800343c 	.word	0x0800343c
 80033e4:	0800343c 	.word	0x0800343c
 80033e8:	08003440 	.word	0x08003440

080033ec <memset>:
 80033ec:	4603      	mov	r3, r0
 80033ee:	4402      	add	r2, r0
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d100      	bne.n	80033f6 <memset+0xa>
 80033f4:	4770      	bx	lr
 80033f6:	f803 1b01 	strb.w	r1, [r3], #1
 80033fa:	e7f9      	b.n	80033f0 <memset+0x4>

080033fc <_init>:
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	bf00      	nop
 8003400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003402:	bc08      	pop	{r3}
 8003404:	469e      	mov	lr, r3
 8003406:	4770      	bx	lr

08003408 <_fini>:
 8003408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340a:	bf00      	nop
 800340c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340e:	bc08      	pop	{r3}
 8003410:	469e      	mov	lr, r3
 8003412:	4770      	bx	lr
